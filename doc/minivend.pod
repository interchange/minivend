=head1 NAME

MiniVend - WWW Catalog Ordering

=head2 VERSION

This document describes MiniVend, based on Andrew Wilcox's
original Vend, Version 0.2.

=head1 DESCRIPTION

MiniVend allows customers to select items to buy from catalog pages. The
program tracks which products they have selected and the quantity
desired. From the ordering page they may complete the ordering process
by entering their name and address, or return to browsing and select
more items.

You can jump to any of the following sections:

L<OVERVIEW OF MINIVEND>

- L<How MiniVend Manages Sessions>

- L<Where to Download MiniVend>

- L<Perl Version 5>

- L<Setup for the CERN HTTPD Server>

- L<Setup for the NCSA and Apache Servers>


L<QUICK START>


L<MANUAL INSTALLATION>

- L<Needed Directories>

- L<Unpacking the Distribution>

- L<Testing Your CGI-BIN Directory>

- L<Setting up SVEND>

- L<Setting up VLINK>

- L<Setting up minivend.pl>


L<SETTING UP YOUR CATALOG>

- L<The Products File>

- L<Catalog Pages>

- L<The Order Page>

- L<The Search Engine>

- L<Customer Input Fields>

- L<Order Report File>

- L<Sales Tax>

- L<Custom Shipping>

- L<Tracking and Backend Order Entry>

- L<Using Frames>

- L<Controlling Page Appearance>


L<MINIVEND CONFIGURATION FILE>

- L<Optional Configuration Directives>

- L<Required Pages>


L<ADMINISTERING MINIVEND>

- L<Starting, Stopping, and Re-starting the Server>

- L<Making the Product Database>

- L<Expiring Sessions>

- L<INDEX OF ITEMS>


=head1 OVERVIEW OF MINIVEND

If you want to get started, just jump to L<QUICK START> below.
The following sections briefly describe how MiniVend works.

=head2 How MiniVend Manages Sessions

Normally, each request for a World Wide Web page which comes in to a
server stands on its own. While the server will probably know which
machine a request comes from, it may not know if the next request
comes from the same browser or even from the same user on that
machine.

MiniVend keeps track of who is ordering what by including in the URL a
session id: a random string which is different for each customer
browsing the catalog.

So that the session id can be included in URL's within catalog pages,
every page in the catalog is served up by MiniVend running as a cgi-bin
program. Here is an example of such a URL:

        http://xyzcorp.com/cgi-bin/vend/shirts?WehUkATn;;1

An explanation of each part:

=over 4

=item xyzcorp.com

Internet address of server

=item cgi-bin
Informs server that the requested page will be generated by a
program.

=item vend

Name of the program to run

=item shirts

Page of the catalog to display

=item WehUkATn;;1

The session id

=back

Catalog pages are written in regular HTML with a few extensions to
support catalog ordering. Pages are delivered through the following
steps:

    1.  The HTTPD server receives a request for a catalog page.

    2a. The server runs svend as a cgi-bin program. svend is a small C
        program which is setuid to the account which owns the catalog
        files. svend executes the MiniVend Perl script minivend.pl.

                   -- OR --

    2b. The server is already running as a daemon, and runs vlink instead
        of svend.  The vlink program communicates with the MiniVend program
        via a UNIX-domain socket.  THIS IS MUCH FASTER.

    3.  MiniVend reads the HTML source page from the catalog pages directory,
        and interprets the catalog ordering extensions in the file.

    4.  The page, which is now entirely in regular HTML, is delivered to
        the HTTPD server, which returns it to the browser.

Once the customer has finished, the completed order is emailed to the
vendor.

=head2 Where to Download MiniVend


The MiniVend version described in this document is available from:

    http://www.iac.net/~mikeh/download.html

The original Vend is available from:

    http://www.maine.com/awilcox/vend

=head2 Perl Version 5

You will need Perl version 5.001m (or later) to run MiniVend. Many sites
are still running Perl version 4. You can download a copy of Perl 5 from
any CPAN (Comprehensive Perl Archive Network) site:

NORTH AMERICA

  Florida 
     ftp://ftp.cis.ufl.edu/pub/perl/CPAN/ 
  Illinois 
     ftp://uiarchive.cso.uiuc.edu/pub/lang/perl/CPAN/ 
  Massachusetts 
     ftp://ftp.delphi.com/pub/mirrors/packages/perl/CPAN/ 
  Oklahoma 
     ftp://ftp.uoknor.edu/mirrors/CPAN/ 
  Texas 
     ftp://ftp.sedl.org/pub/mirrors/CPAN/ 
     ftp://ftp.sterling.com/programming/languages/perl/ 

EUROPE

  Finland 
     ftp://ftp.funet.fi/pub/languages/perl/CPAN/ 
  France 
     ftp://ftp.ibp.fr/pub/perl/CPAN/ 
     ftp://ftp.pasteur.fr/pub/computing/unix/perl/CPAN/ 
  Germany 
     ftp://ftp.leo.org/pub/comp/programming/languages/perl/CPAN/ 
     ftp://ftp.rz.ruhr-uni-bochum.de/pub/programming/languages/perl/CPAN/ 
  Great Britain 
     ftp://ftp.demon.co.uk/pub/mirrors/perl/CPAN/ 
  The Netherlands 
     ftp://ftp.cs.ruu.nl/pub/PERL/CPAN/ 
  Portugal 
     ftp://ftp.ci.uminho.pt/pub/lang/perl/ 
  Sweden 
     ftp://ftp.sunet.se/pub/lang/perl/CPAN/ 
  Switzerland 
     ftp://ftp.switch.ch/mirror/CPAN/ 

AUSTRALASIA

  Australia 
     ftp://coombs.anu.edu.au/pub/perl/ 
     ftp://ftp.mame.mu.oz.au/pub/perl/CPAN/ 
  New Zealand 
     ftp://ftp.tekotago.ac.nz/pub/perl/CPAN/ 

ASIA

  Japan 
     ftp://ftp.lab.kdd.co.jp/lang/perl/CPAN/ 
  Taiwan 
     ftp://dongpo.math.ncu.edu.tw/perl/CPAN/ 

AFRICA

  South Africa 
     ftp://ftp.is.co.za/programming/perl/CPAN/ 


=head2 Setup for the CERN HTTPD Server

MiniVend uses the user and machine name of the customer as an additional
mechanism for distinguishing between users. Turn identity checking on
in the HTTPD server with the IdentityCheck directive:

        IdentityCheck  On

Unless changed by the UserId directive, the CERN httpd server will run
programs as the user "nobody". To ensure that svend is only run as a
cgi-bin program and not by other users on the system, svend will only
run under this user account. If other programs on the system use the
nobody account, you may want to change the UserId to an account which
is only used by httpd.

        UserId  hguest

You will also need rules to map URLs to your public HTML files and
your cgi-bin directory. These may be already set up in the httpd
configuration file. Here is an example:

        Exec  /xyzcorp/cgi-bin/*  /home/xyzcorp/cgi-bin/*
        Pass  /xyzcorp/*          /home/xyzcorp/WWW/*

The first line specifies that a URL such as
"http://machine.com/xyzcorp/cgi-bin/svend" will run the program svend
located in the /home/xyzcorp/cgi-bin directory. The second line
specifies that files in the /home/xyzcorp/WWW directory can be
retrieved with a URL such as http://machine.com/xyzcorp/file.

The mapping described by Exec will always require two parts in the
URL: one to specify the cgi-bin directory and another to specify the
program to run. You can shorten the URL by specifying an additional
mapping such as:

        Map  /catalog/*  /xyzcorp/cgi-bin/svend/*

This will allow a URL such as "http://machine.com/catalog/shirts" to
be used.

In the MiniVend configuration file, minivend.cfg, set the VendURL directive
to the URL which runs svend in the cgi-bin directory.

        VendURL  http://machine.com/catalog

=head2 Setup for the NCSA and Apache Servers

There is no special configuration required unless you plan
on running the MAT administration program.  Simply put
vlink or svend in the cgi-bin directory (of course it must be 
script-aliased), and run the MiniVend program.

If the MAT program is to be installed in a protected CGI directory, you must: 

1. Create the directory definition in the srm.conf file. This is
what the entry should look like (if you are using the default
NCSA/Apache installation directories):

    ScriptAlias /prot-bin/   /usr/local/etc/httpd/prot-bin/

2. Actually make the directory if it doesn't exist:

    mkdir /usr/local/etc/httpd/prot-bin

3. Add the following entry to the access.conf file:

    <Directory /usr/local/etc/httpd/prot-bin>
        Options
        AuthUserFile /usr/local/etc/httpd/conf/.htpasswd
        AuthGroupFile /usr/local/etc/httpd/conf/.htgroup
        AuthName admin
        AuthType Basic
        <Limit GET POST>
        require group admin
        </Limit>
    </Directory>

4. Create the password file with htpasswd or the like. For convenience,
a Perl version of htpasswd (htpasswd.pl) may be included in your bin/
directory. Copy the password file to /usr/local/etc/httpd/conf/.htpasswd.

5. Create the /usr/local/etc/httpd/conf/.htgroup file with the
user name to use in the file:
     
    admin:mike

6. Copy the mat executable to the protected bin directory.

7. Restart the HTTP server (send it a HUP signal), so it will re-read
the configuration files.

8. Test by accessing the URL http://localhost/prot-bin/mat -- you
should be prompted for a password.

=head1 QUICK START

Before you begin, select the directory where you want to install MiniVend.
You can unpack the tar file either there, or in another temporary
directory -- the configure script handles either. The suggested
directory is /usr/local/lib/minivend -- but really any directory will
do.  You must of course have write permission there; and you will
eventually need to have write permission on your CGI-BIN and protected
CGI-BIN directories.

Decompress and untar the distribution:

        gzip -d minivend.tar.gz
        tar xfv minivend.tar

If you have GNU tar, you can combine these steps:

        tar xfvz minivend.tar.gz

Run the configure script with:

        ./configure

If you have trouble with ./configure, try this:

        perl configure.pl /usr/bin/perl

Replace the 'perl' and '/usr/bin/perl' with the proper paths to
your Perl 5 binary.

The process should be self-explanatory. If you discover any problems,
refer to the following section, L<MANUAL INSTALLATION>. Otherwise,
MiniVend should be installed at the completion of the script.  It is
suggested that you install the demo as a starting point for your own
catalog -- the configuration script will give you the opportunity to do
so.

=head1 MANUAL INSTALLATION

The MiniVend installation is complex, and requires quite a few distinct
steps.  That is why there is an interactive configuration script that
is included with MiniVend -- it merely does automatically
what is described below. It makes the process much easier, and will
install the demo catalog. This configuration script has been tested
on some, but not all, UNIX systems.  Please report problems
to <mikeh@iac.net>.

=head2 Needed Directories

The MiniVend program, your catalog pages, and the products file should all
go into a private directory. Because the catalog pages are served
through the MiniVend cgi-bin program and contain nonstandard elements,
they should not be put into a public WWW directory, nor do they need
to have world-readable file permissions.

There is a utility, B<vendpage>, which is designed to allow a separate
catalog tree to be maintained in HTML and automatically converted to
MiniVend format.  See L<vendpage> for more information. It is available
with the MiniVend, but is also compatible with Vend 0.3, the full implementation
of Vend. It can also be obtained by sending email to <mikeh@iac.net>.

You will want a public WWW directory for inline image graphic files.  If
you use the vendpage utility, you can maintain a common source tree
for the HTML versions of your catalog pages, and use vendpage to insert
the order tags and other vend-specific items.  See L<vendpage>.

You will need a cgi-bin directory in which to put the svend program.

If using I<MAT>, you will want a password-protected
private cgi-bin directory. See the section "Setting up the NCSA/Apache
Server" for details.

=head2 Unpacking the Distribution

Select a directory to use as your MiniVend base directory (referred to
hereafter as VendRoot).  Decompress and untar the distribution:

        gzip -d minivend.tar.gz
        tar xfv minivend.tar

If you have GNU tar, you can combine these steps:

        tar xfvz minivend.tar.gz

The products directory contains a sample product file and the file
report in the main directory is the sample order report.  Sample catalog
pages are in the directory sample/. If you would like to use them as a
starting point for your own catalog, you can either have the configure
script install the demo for you, or you can copy the sample files into
the MiniVend directory and your HTML directory:

        cd /usr/vend                   # wherever your vend directory is
        md pages/images
        cp sample/* pages
        cp sample/images/* pages/images
        cp sample/special*.html <YOUR_HTML_DIRECTORY_HERE>
        cp sample/index.html  <YOUR_HTML_DIRECTORY_HERE>
        cp sample/feature.html  <YOUR_HTML_DIRECTORY_HERE>
        cp sample/address.html  <YOUR_HTML_DIRECTORY_HERE>

Edit minivend.pl and set VendRoot to the minivend directory where
you just unpacked the tar file.  Examine the other configurable
variables and make sure the directories exist.

=head2 Testing Your CGI-BIN Directory

This is a good time to test your cgi-bin configuration and find out
the numeric user-id which your HTTPD server runs cgi-bin programs
under. Edit "src/testcgi" and change the first line to refer to your Perl
version 5 (or higher) executable.

        #!/usr/bin/perl

Copy "testcgi" into your cgi-bin directory, and make it executable.

        cp src/testcgi /your/cgi-bin/directory
        chmod a+rx /your/cgi-bin/directory/testcgi

Try running testcgi from your shell command line to make sure that
everything is working.

        /your/cgi-bin/directory/testcgi

testcgi should respond with the version of Perl that you are running
and your numeric user id.

Now try running testcgi from your browser. Write down the numeric user
id which you get there, as you will need it later for F<svend> and F<mat>.

=head2 Setting up SVEND

F<svend> is a small C program which is setuid to the user account which
can access the catalog data files. The following defines at the
beginning of svend.c should be set:

=over 4

=item CGIUSER

Set this to the numeric uid (user id) which HTTPD runs cgi-bin
programs under. Typically this will be 'http', 'nobody' or 'guest'.

=item PERL

Set this to the location of the perl (version 5 or higher)
executable.

=item VEND

Set to the location of minivend.pl, typically in the VendRoot
directory.

=back

Compile svend.c with your C compiler:

        cc svend.c -o svend

On some systems you can make the executable smaller with the strip
program. But don't worry about it if strip is not on your system.

        strip svend

If you want MiniVend to run under a different user account than your own,
make that user the owner of svend. (You probably need to be root to do
this). Do not make svend owned by root, because making svend setuid
root is an unnecessary security risk.

        chown vendacct svend

Make svend setuid:

        chmod u+s svend

Move the svend executable to your cgi-bin directory:

        mv svend /the/cgi-bin/directory


=head2 Setting up VLINK

The F<vlink> program, compiled from F<link.c>, is a small C program
which is setuid to the user account which can access the catalog data
files, and contacts a running MiniVend daemon. If the MiniVend daemon,
is not running, it will attempt to start it. The following defines at the
beginning of F<link.c> should be set:

=over 4

=item LINK_FILE

Set this to the name of the socket file that will be used
for configuration, usually "/usr/local/lib/minivend/etc/socket"
or the "etc/socket" under the directory you chose for the
VendRoot.

=item LINK_TIMEOUT

Set this to the number of seconds vlink should wait before announcing
that the MiniVend server is not running.  The default of 20 is probably
a reasonable value.

=item PERL

Set this to the location of the perl (version 5 or higher)
executable.

=item VEND

Set to the location of minivend.pl, typically in the VendRoot
directory.

=back

Change directories to the F<src> directory, then run the GNU
configure script:

        cd src
        ./configure

You will see some output as the configure script checks your system.
Then compile the program:

        cc link.c -o vlink

On some systems you can make the executable smaller with the strip
program. But don't worry about it if strip is not on your system.

        strip vlink

If you want MiniVend to run under a different user account than your own,
make that user the owner of vlink. (You probably need to be root to do
this). Do not make vlink owned by root, because making vlink setuid
root is an unnecessary security risk.

        chown vendacct vlink

Make vlink setuid:

        chmod u+s vlink

Move the vlink executable to your cgi-bin directory:

        mv svend /the/cgi-bin/directory

Some systems unset the SUID bit when moving the file -- re-set it
if necessary.

=head2 Setting up minivend.pl

Edit minivend.pl and specify the root directory which contains the MiniVend
distribution:

        $Config::VendRoot = '/usr/local/lib/minivend';

=head1 SETTING UP YOUR CATALOG

MiniVend uses its own tags to implement catalog functions -- they
are similar to normal HTML, but are in [square brackets].  The next
section describes how to set up the pages and the configuration
directives to make your own catalog.  The demo catalog is a good
starting point -- in particular we suggest you pay attention to the
order and search pages.

=head2 The Products File

Each product you are selling should be given a product code: a short
code that identifies the product on the ordering page and in the
catalog. You can use any combination of letters and digits for the
product code. The F<products.asc> file is a simple ASCII tab-delimited
list of all the product codes, a short description, the price, and
a web page location for it in the catalog.  The web page should be
relative to the root of the MiniVend page directory -- the trailing .html
is optional.

Here is an example of a products file:

    SH543   Men's fine cotton shirt 14.95   shirts.html
    PA776   Elegant pants           29.00   pants.html

Note that the items can be separated by any number of tabs, as
long as they are tabs and not spaces. (If you want a blank
description or price, insert a single space character.)

This version of MiniVend implements the database in DBM format, so large
catalogs can be used without using too much memory; or slowing down
performance in static mode.  There is a small utility, F<makedbm> which
is located in the F<bin> directory.  It is run at the behest of F<mat>,
the MiniVend Administration Tool, if that is installed, or can be run
from the command line.  It creates the pr_pric and pr_desc DBM files.

=head2 Catalog Pages

Pages in the catalog are written in regular HTML with extensions to
support catalog ordering. To distinguish them from regular HTML, these
extended elements use square brackets instead of angular brackets.

The first page displayed in the catalog, if no argument is supplied
to the F<vlink> or F<svend> cgi-bin program, is "catalog.html". This page
will contain links to other catalog pages with the [page] element.
Individual products can be ordered by the [order] element, which
brings up the order page "order.html". The order page contains input
boxes for the customer to type in their name and address. Once the
order has been sent the "confirmation.html" page is displayed.

If you use the L<vendpage> utility, you will be able to write
the pages in normal HTML, then convert them I<en masse> to the
Vend format. MiniVend tags (the ones in square brackets) can be passed
in as HTML comments -- see L<vendpage> for details.

You will normally not want to include regular hypertext links to pages
outside of the catalog. Such links will not include the session id,
which means that if the customer follows an external link back to the
catalog the list of products ordered so far will have been lost.

Inline images, on the other hand, are served in the normal fashion.
You should include a regular <IMG SRC="URL"> element, where the URL
refers to a graphic image.

The following elements can be used in catalog pages:

=over 4

=item [page pg]
Insert a hyperlink to the specified catalog page pg. For
example, [page shirts] will expand into <a
href="http://xyzcorp.com/cgi-bin/vend/shirts?WehUkATn;;1>. The
catalog page displayed will come from "shirts.html" in the
pages directory.

=item [pagetarget pg frame]
Same as the page element above, except it specifies an output frame to
target if frames are turned on.  The name F<is> case-sensitive, and if
it doesn't exist a new window will be popped up.  This is the same as
the [page ...] tag if frames are not activated.
For example, [pagetarget shirts main] will expand into a link like <a
href="http://xyzcorp.com/cgi-bin/vend/shirts?WehUkATn;;1 TARGET="main">. The
catalog page displayed will come from "shirts.html" in the
pages directory, and be output to the 'main' frame.  Careful,
frame names are case-sensitive.

=item [areatarget pg frame]
Inserts a Vend URL in a format to provide a targeted reference for a
client-side imagemap.  You set up the <AREA> tag with:

      <AREA COORDS="220,0,270,20" HREF="[areatarget page frame]">

If frames are enabled, this will expand to:

      <AREA COORDS="220,0,270,20" HREF="http://VENDURL/page" TARGET="frame">

If frames are I<not> enabled, this will expand to:

      <AREA COORDS="220,0,270,20" HREF="http://VENDURL/page">

=item [area pg]
Like the I<areatarget> element, except it will never yield
a frame target.

=item [/page], [/pagetarget]
Expands into </a>. Used with the page or pagetarget elements, such as:
[page shirts]Our shirt collection[/page] or [pagetarget pants main] Our
pants collection[/pagetarget].  They are syntactically the same, so
you can use either to terminate an anchor -- the two different ones
are provided for consistency.

=item [frames-on]
Turns on the frames processing option, which is disabled by default.
The proper way to use this is to put it ONLY in a page which is loaded
by frame-based browsers, as part of the initial frame load.  It is
persistent for the entire session, or until counteracted with a
[frames-off] tag.

=item [frames-off]
Turns off the frames processing option.  This can be used to disable
frames, perhaps as a clickable option for users.  It is persistent for
the entire session, or until counteracted with a [frames-on] tag.

=item [finish-order]
This element is used to give the customer, while browsing, a
way to return to the order page after they have already ordered
something. If they haven't ordered anything yet [finish-order]
does not appear at all on the displayed page. If they have
ordered an item, the element will expand into something like:
C<<>a href="http://xyzcorp.com/cgi-bin/vend/finish;WehUkATn;;1">
Finish Incomplete Order</a>

=item [order code]
Expands into a hypertext link which will include the specified
code in the list of products to order and display the order
page. code should be a product code listed in the "products"
file.

=item [/order]
Expands into </a>. Used with the order element, such as: Buy a
[order TK112]Toaster[/order] today.

=item [price code]
Expands into the price of the product identified by code as
found in the products file.

=item [description code]
Expands into the description of code as found in the products
file.

=item [body n]
Selects from the predefined color schemes and/or backgrounds, and
just becomes a <BODY> tag if none are defined. See 
L<Controlling Page Appearance>.

=item [buttonbar n]
Selects from the predefined buttonbars, and is stripped if it
doesn't exist. See L<Controlling Page Appearance>.

=item [random]
Selects from the predefined random messages, and is stripped if none
exist. See L<Controlling Page Appearance>.

=back

=head2 The Order Page

The following elements are used on the order page:

=over 4

=item [value field]
Expands into the current value of the customer input field
named by field. See the section on input fields for more
information.

=item [nitems]
Expands into the total number of items ordered so far.

=item [total-cost]
Expands into the total cost of all the items ordered so far.

=back

Within the order page, the [item-list] element shows a list of all the
items ordered by the customer so far. It works by repeating the source
between [item-list] and [/item-list] once for each item ordered.
Between the item-list markers the following elements will return
information for the current item:

=over 4

=item [item-code]
Evaluates to the product code for the current item.

=item [item-description]
Evaluates to the product description (from the products file)
for the current item.

=item [item-quantity]
Evaluates to the quantity ordered for the current item.

=item [item-price]
Evaluates to the price (from the products file) of the current
item.

=item [quantityC<->name]
Evaluates to the name to give an input box in which the
customer can enter the quantity to order.

=back

=head2 The Search Engine

MiniVend implements a search engine which will search the product
database for items based on customer input.  It uses the (example)
fr_sel.html, fr_search.html, and search.html files in the F<pages>
directory, and has some of its own special tags and variables.

=over 4

=item [search-list]

Starts the representation of a search list. MiniVend tags can be
embedded in the search list, yielding a table or formatted
list of items with part number, description, price, and  hyperlinks to
order or go to its catalog page. 

In particular, all of the item tags described under order page
are active.  The most useful one might be [item-link], which if
properly used, can allow the user to search the catalog for
an item, then click a link to go to detailed catalog page
for the item. See the sample search.html page for an example.

=item [/search-list]

Ends the search list.  


=item [item-link code]
Expands into a hyperlink which will jump the user to a page
under the I<ItemLinkDir> (default is the pages directory),
with anchor text as set in I<ItemLinkValue> (default is "More Details").
I<Only active in the search list>.

=item [process-search]
Calls the search with the proper URL, including MiniVend session tags.  Used
as the ACTION value for the search form.

=back

The sample F<fr_search.html> and F<fr_sel.html> pages show the standard
search form.  You can modify them to present the search in any way you
like -- just be careful to use the proper variable names for passing to
the F<vend> program.  It is also necessary that you copy the hidden
variables as-is -- they are required to interpret the request as a
search.  The special form variables are:

=over 4

=item mv_searchspec

The actual search string that is typed in by the customer. It is 
a text (INPUT TYPE=TEXT) field, or can be put in a select (drop-down)
list to enable category searches.

=item mv_searchlimit

The maximum number of items that will be returned.  It is used to prevent
a searchspec like I<a> from returning a huge match list. Can be
implemented as a scrolling list (INPUT TYPE=SELECT) or radiobox 
(INPUT TYPE=RADIO) field.

=item mv_orsearch

If this item is set to I<yes>, the search will return items matching any
of the words in I<searchspec>. The default is I<no>.

=item mv_case

If this item is set to I<yes>, the search will return items without regard
to upper or lower case.  This is the default -- set to I<yes> if case
should be matched.  Implement with a checkbox (INPUT TYPE=CHECKBOX) field.

=item mv_perl

If set to I<yes>, enables full Perl regular expressions for the match.
It will operate as an "exact match" option in most cases,
though some will find the behavior anomalous. The default is I<no>.

=item mv_doit

This must be set to 'search' to make this a search page.

=back

The sample search page also has a link to a help file F<(pages/help.html)>
which has rudimentary end-user help for the search engine.

=head2 Customer Input Fields

On the orders page, order.html, you will have a number of input fields
allowing customer to enter information such as their name and address.
You can add more fields simply by putting more input elements on the
order.html page, and the information will automatically be included in
the order report. Input elements should be written in this way:

        <input type="text" name="town" value="[value town]" size=30>

The type attribute should be set to "text", which is the only input
type supported by this version of Vend.

Choose a name for this input field such as "email" for an email
address. Set the name attribute to the name you have chosen.

The value attribute specifies the default value to give the field when
the page is displayed. Because the customer may enter information on
the order page, return to browsing, and come back to the order page,
you want the default value to be what was entered the first time. This
is done with the [value] element, which returns the last value of an
input field. Thus,

        value="[value name]"

will evaluate to the name entered on the previous order screen, such
as:

       value="Jane Smith"

which will be displayed by the browser.

The size attributes specifies how many characters wide the input field
should be on the browser. You do not need to set this to fit the
longest possible value since the browser will scroll the field, but
you should set it large enough to be comfortable for the customer.

=head2 Order Report File

The order report file, "report", defines the layout of the order
report which gets mailed on the completion of the order. For example,

              Order Date: $date

                    Name: $name
           Email address: $email

        Shipping address: $addr
        Town, State, Zip: $town, $state $zip
                 Country: $country

Any input field from the order page can be included using the dollar
sign notation.

To prevent a value from being included in the order report, just add it
to the B<ReportIgnore> configuration directive.  

MiniVend defines some values for use in the search form -- they begin
with 'mv_' and are automatically ignored.

=head2 Sales Tax

MiniVend allows calculation of sales tax on a straight percentage basis.
To enable this feature, the directive I<SalesTax> is initialized with
the name of a field (or fields) on the order form.  Commonly, this is
zipcode and/or state:

    SalesTax    zip,state

This being done, MiniVend assumes the presence of a file F<salestax.asc>,
which contains a database with the percentages.  Each line of 
F<salestax.asc> should be a code (again, usually a five-digit zip or
a two letter state) followed by a tab, then a percentage. Example:

    default 0
    45056   .0525
    61821   .0725
    61801   .075
    IL      .0625
    OH      .0525
    WA      .08

Based on the user's entry of information in the order form, MiniVend will
look up (for our example SalesTax directive) first the zip, then the state,
and apply the percentage to the SUBTOTAL of the order (not including shipping).
It will add the percentage, then make that available with the [salestax]
tag for display on the order form. If no match is found, the entry 'default'
is applied -- that is normally 0, but can be anything.

If business is being done on a national basis, it is now common to have
to collect sales tax for multiple states.  If you are doing so, it is possible
to subscribe to a service which issues regular updates of the sales tax
percentages -- usually by quarterly or monthly subscription.  Such a
database can easily be converted to MiniVend format.

=head2 Custom Shipping

MiniVend allows custom shipping charges to be added to an order based
on the value of an entry in the database.  Currently only I<quantity> is
supported, though if a database with shipping I<weight> is available, that
is supported as well (weight becomes the 5th field in the products.asc
file). I<Weight calculation will take custom programming>. To enable
custom shipping, enter the field that will be calculated in the
I<CustomShipping> directive:

    CustomShipping  quantity

The shipping cost database is a tab-separated ASCII file with six fields --
code, text description, criteria (quantity or weight), minimum number,
maximum number, and cost.  None of the fields are case-sensitive.

    code        The unique identifier for that shipping method
    description Text to describe the method
    criteria    Whether it is for weight or quantity
    minimum     The low bound of quantity/weight this entry applies to
    maximum     The high bound of quantity/weight this entry applies to
    cost        The total cost (or multiplier, if begins with 'x')

The cost is calcluated like this:

    1. The base code is selected. If there is more than one entry per
    code, numbers are appended.
    2. The criterion field is found -- if it is quantity, then it
    is in the quantity field of each item on the order form
    3. The quantity is determined, and if the quantity falls
    with in the minimum and maximum, the cost is then applied.
    4. If the cost is fixed, it is simply added.  If the cost
    field begins with an 'x', the cost is multiplied by the quantity.
    5. If no match is found, the 'default' entry is used.

An example would be this (the columns are lined up for your
reading convenience, the actual entries should have ONE tab
between fields!):

    default Slow Boat   quantity    1   99999999    3.00
    upsg1   UPS Ground  quantity    1   5           7.00
    upsg2   UPS Ground  quantity    6   10          10.00
    upsg3   UPS Ground  quantity    11  99999999    x .95
    upsb1   UPS Blue    quantity    1   5           12.00
    upsb2   UPS Blue    quantity    6   10          17.00
    upsb3   UPS Blue    quantity    11  99999999    x 1.60
    upsr1   UPS Red     quantity    1   5           17.00
    upsr2   UPS Red     quantity    6   10          22.00
    upsr3   UPS Red     quantity    11  99999999    x 2.10

If the user selected UPS Blue (code UPSB), and the quantity on the order
was 3, the cost of 12.00 from I<upsb1> would be applied.  If the
quantity were 7, the next entry from I<upsb2> would be selected, for a
cost of 17.00.  If the quantity were 15, I<upsb3> would be selected, and
the quantity of 15 multiplied by 1.60, for a total cost of 24.00.

If a default shipping mode other than 'default' is desired, enter
it into the I<DefaultShipping> directive:

    DefaultShipping     UPSG

This will make the <INPUT TYPE=RADIO NAME=mv_shipmode VALUE=upsg> entry
on the order form checked by default when the user starts the order process.

=head2 Tracking and Backend Order Entry

MiniVend has a I<Tracking>  option, enabled with the configuration directive
I<Tracking>.  Entered orders and page popularity are tracked.

The I<Tracking> directive must be a non-blank value to enable tracking.  In
addition, if the tracking database is not yet initialized, the I<Tracking>
directive is used to initialize the first order number to be placed in
the tracking database. After that initialization, the value of the next
order number is kept in the database (under the key I<mv_next_order>) and
incremented when an order is placed.  The incrementation is alpha-numeric,
so it is important to have leading zeros in any string value -- i.e., an
initial value of B<Order00009> will be incremented to B<Order00010>, while
an initial value of B<Order9> will be incremented to B<Ordes0>. Also, any
non-alphanumeric characters will be stripped -- B<Order_00000> becomes
B<Order00000>.

The tracking is done by entering information in the DBM database I<tracking> in
the product directory (I<ProductDir>). Orders are tracked under two keys,
the actual key (started by the Tracking Directive) and a key that prepends the
string "Backend" to the actual key. The entry in the actual key is a facsimile
of the emailed order report -- the Backend key is the values selected in the 
BackendOrder directive, combined with the actual ordered item codes and
quantities, separated by NUL characters (ASCII code 0).

To illustrate, take a MiniVend system that has tracking enabled with
these two configuration directives in the minivend.cfg file:

    Tracking        Order00001
    BackendOrder    name,address,city,state,zip,account,mv_shipmode

When the user places an order for quantity 2 of item number I<P-133>,
the tracking database will have two keys/values added:

 Key               Value
 ----------------  ----------------------------
 Order00001        (The order report, filled in -- see "Order Report File")
 BackendOrder00001 Joe J. User<NUL>123 Any St.<NUL>MainStreet<NUL>OH<NUL>
                   12345<NUL>Acct#123<NUL>P-133<NUL>2

The scheme allows a history of orders to be kept (the Order00001 key)
and a list of unentered orders (the BackendOrder00001 key).  An external
program can read the tracking database and submit the orders to an
order-entry system, removing (or undefining) the BackendOrder key when
finished. An rudimentary example script which displays the tracking
database is supplied as 'trackrpt' in the bin/ directory. This script
could be easily modified to actually perform batch order entry.

Page popularity is simply tracked by storing a count of accesses, with
the page name as the key.  No additional information is stored. It is
designed to give the catalog designer an idea of which features, pages,
and menus are popular, and which are rarely used.  Since individual page
accesses are tracked, it might also give marketing or sales an idea of
problems with product perception -- if an item were frequently looked
at, but rarely bought, it might be appropriate to re-write the catalog
page.

=head2 Using Frames

MiniVend fully supports frames, the proposed extension to HTML 3.0. (Currently
only Netscape 2.0 and above browsers support frames.) Frames significantly
enhance the electronic catalog experience, since the user can maintain
a context -- with a search frame, a product details frame, a table-of-contents
frame, etc. The demo included with MiniVend is based on frames, though if
you access it with a non-frame browser it will operate perfectly well.

Frames are accessed by adding a TARGET element to a HREF, naming
the frame that the referenced URL should be placed in. MiniVend
produces targets with the pagetarget and areatarget elements, which
send target tags if frames are enabled (by a [frames-on] element.
Any frame name can be used, including the special frames of _top, _blank,
_parent, and _self.

As shown in the demo pages, the best way to accommodate both types of
browsers is by having an F<index.html> page that sets the beginning
frame set.  The <FRAMESET> and <FRAME> tags will be ignored by standard
browsers, which will read the HTML between the <NOFRAMES> and </NOFRAMES>
tags below.

The format of the first set of URLs passed to the frames is important - only
ONE MiniVend link must be called.  That sets the session ID for the user. If
two URLs were called, MiniVend would assign two session IDs to the user,
scrambling the context of their navigation.  From this single access,
all further references to MiniVend are made, though after the first access
multiple frame targets can be referenced.

This first MiniVend page that is accessed (with a frame browser) should
contain a [frames-on] element.  It is the only page that need (or should)
contain a [frames-on], which is persistent throughout the session. This
page should never be seen by a non-frame browser.

Subsequent accesses to MiniVend URLs will now contain the proper session
information, and as long as pagetarget or page elements are used to
pass the URLs, context will be maintained.

The [pagetarget page frame] element is used to pass target tags in hyperlinks.
The [areatarget page frame] element is used to pass target tags in imagemaps.
The [frames-on] and [frames-off] elements enable and disable frame operation.
The [framebase frame] element sets a base target for a page.

See the demo pages:

    fr_greet.html   Starting frame for frames-based browsers - has [frames-on]
    nf_greet.html   Turns off frames -- has [frames-off]
    reframe.html    Re-enables frames after they have been turned off

=head2 Controlling Page Appearance

MiniVend provides centralized page color and imagemap control through
use of the [body n] and [buttonbar n] elements. It also can place a random
message from a series of messages with the [random] element, and embed
help messages with the [help item] element.

The [body n] element selects a color scheme -- numbered from 1 to 15 --
that is set by the Mv_Background, Mv_TextColor, Mv_BgColor,
Mv_LinkColor, and Mv_VlinkColor directives. Each can contain up to 15
parameters, after an opening BEGIN. Here is an example:

    Mv_Background  BEGIN /images/blue_pap.gif
    Mv_BgColor     BEGIN none steelblue white
    Mv_LinkColor   BEGIN none white black
    Mv_TextColor   BEGIN none ltgreen blue
    Mv_VlinkColor  BEGIN none orange purple

The above sequence (set in the minivend.cfg file, or through MAT)
defines three color schemes, accessed with [body 1], [body 2], and [body 3]
elements in MiniVend pages.  The first scheme uses the file 
F</images/blue_pap.gif> as the background pattern, and keeps
the user's default colors for everything else.  It is called 
by a [body 1] element, which when expanded becomes <BODY
BACKGROUND="/images/blue_pap.gif>.

The second scheme defines no background pattern (there is only one file
in the Mv_Background directive), but defines a background color of 'steelblue',
with a text color of white, a link color of light green, and a visited link
color of orange. It is accessed by the [body 2] element, which when expanded
becomes <BODY BGCOLOR="steelblue" TEXT="white" LINK="ltgreen" VLINK="orange">.

The third color scheme is similar to the second, except defines
white-black-blue-purple for the four colors.  It is accessed with
a [body 3] element.

If there is no defined scheme for a body element (as there wouldn't be if
you put [body 4] in a page with the above schemes defined) MiniVend
simply outputs a standard <BODY> tag.

The user can also define their own colors if the Mv_customcolors
variable is set (upon a form submission).  See the supplied
F<control.html> page for an example of how to set custom colors.

Image maps can be supplied and similarly controlled with the [buttonbar n]
series of tags.  They are defined with the ButtonBars directive (also set
in minivend.cfg or with MAT), and take the form of a series of
file names in MiniVend format -- i.e., relative to the PageDir and
without a .html extension. To use the buttonbars, create a file 
with an IMG directive set with the USEMAP element and an associated
client-side image map (defined with <MAP> </MAP>. The [areatarget]
or [area] tags are used to set the URLs. An example:

    <IMG SRC="/sample/images/artbar0.gif" USEMAP="#ARTBAR0">
    <MAP NAME=ARTBAR0>
    <AREA COORDS="198,0,278,20" HREF="[areatarget fr_sel search]">
    <AREA COORDS="303,0,363,20" HREF="[areatarget fr_search search]">
    <AREA COORDS="388,0,442,20" HREF="[areatarget fr_greet main]">
    <AREA COORDS="473,0,537,20" HREF="[areatarget control main]">
    <AREA COORDS="0,0,560,20" NOHREF>
    </MAP>

If the above were saved in the file PageDir/bars/artbar0.html (where PageDir
is your MiniVend pages directory), you would be able to access this
imagemap in your pages with a [buttonbar 0] tag, at least after MiniVend
read this line in the configuration file:

    ButtonBars  bars/artbar0 bars/artbar1 bars/artbar2

The above entry allows you to define three imagemaps and access them in
your pages simply as [buttonbar 0], [buttonbar 1], and [buttonbar 2]. The
advantage of this scheme is central definition of a series of button bars
with only a few tags -- if you change your page colors or mapping, you
need only change one file and the change will roll over to all of your
catalog pages. Since some installations can number in the thousands
of catalog pages, using the pre-defined buttonbars can save a lot of
editing. (Server-side includes cannot be used to achieve the same thing
with MiniVend, since they wouldn't have the proper URLs.)

The [random] element, in conjunction with the Random directive in the
minivend.cfg file (or set with MAT), is similar to the
buttonbar tag, except it displays random messages or images.  It can be
used to place a random tip, hint, ad, or message, and can be any
legal HTML construct. It cannot contain MiniVend elements.

The [help tag] element, in conjunction with the Help directive in the
minivend.cfg file (or, of course, set with MAT), is similar to the
buttonbar tag, except it displays help messages or images, and is
keyed by item name.  The help can be contained in any of a series
of files defined in the Help directive. It can contain most MiniVend
elements.  The user can turn off help through a form -- see the F<control.html>
file for an example.

=head1 MINIVEND CONFIGURATION FILE

The VendRoot directory, specified in vend.pl, is the default location
of all of the MiniVend files. Unless changed in minivend.pl, the MiniVend
configuration file will be minivend.cfg in the VendRoot directory.

In the configuration file, these directives are required:

=over 4

=item VEND URL
Specifies the base URL that will run svend as a cgi-bin program.

        VendURL  C<http://machine.com/xyzcorp/cgi-bin/svend>

=item MAIL ORDER TO
Specifies the email address to mail completed orders to.

        MailOrderTo  orders@xyzcorp.com

=back

=head2 Optional Configuration Directives

These directives all have default values and are optional.

=over 4

=item ButtonBars
The ButtonBars directive allows you to define several preset button bars
that reside in files. The button bar file will usually contain an IMG
link, along with its associated client-side image map.  This allows you
to insert a [buttonbar 1] or [buttonbar 2] directive instead of the
equivalent HTML, and is designed to make it easy to change the look of
your pages with the change of one file. If the file does not exist at
program configuration time, the tag is simply stripped.  The line in the
F<minivend.cfg> file takes the form of the directive, followed by any
number of vend-style file names (relative to the PageDir, with no .html
suffix).

    ButtonBars  bars/button0 bars/button1 bars/button2 bars/button3

=item CustomShipping
If not blank, enables the addition of shipping charges based on
quantity or weight of items ordered.  See L<Custom Shipping>.

    CustomShipping  quantity

=item DefaultShipping
This sets the default shipping mode by initializing the variable
I<mv_ship_mode>. If not set in F<minivend.cfg>, it is I<default>.

    DefaultShipping  UPS

=item DescriptionTrim
This sets the text string after which no more of the product
description will be displayed in the search area. This is useful to
clip long descriptions, while still having them available to search.
The default is no trimming.

    DescriptionTrim  DESCRIPTION:

=item DisplayErrors
While all errors are reported in the error log file, you can also have
errors displayed by the browser. This is convenient while you are
testing your configuration.

    DisplayErrors  Yes

=item FinishOrder
A text string or image tag which is substituted
for the I<[finish-order]> tag.

    FinishOrder <IMG SRC="/icons/fin_ord.gif" ALT="FINISH ORDER">

=item Help
The Help directive allows you to define an unlimited number of help
messages or image specifications that reside in a file (or files).
It is called by the [help item] tag, where item is the first line
of a help file entry which looks like:

 help1
 This is help item one. It ends after a blank line, and
 is called by a [help help1] element embedded in a MiniVend page.
 
 help2
 This is help item two.  It ends after a blank line, and
 is called by a [help help2] element embedded in a MiniVend page.

If the file (or the entry) does not exist at program configuration time,
the tag is simply stripped.  The line in the F<minivend.cfg> file takes
the form of the directive, followed by any number of vend-style file
names (relative to the PageDir, with no .html suffix). See the demo
for an example of how it is used.

    Help  help/hintfile

=item ItemLinkDir
The directory where the [item-link] tag will base all of its
hot links in, relative to the pages directory. The default is blank,
basing all links in the pages directory.  If set, it needs
a trailing '/' to operate properly.

    ItemLinkDir   partno/

=item ItemLinkValue
Specifies the text or image you want to use to provide a clickable
link to the catalog page (in the search form, or other forms).

    ItemLinkValue   <IMG SRC="/images/gopage.gif" ALT="GO TO PAGE">

=item Mv_Background
Sets the background patterns to be used in the color schemes.  The 
line must begin with 'BEGIN', then is followed by up to 15 pattern
URLs containing background patterns to be used with the color schemes.
Each pattern should be separated by one or more spaces.
set to 0 to disable a background pattern for a particular scheme.
Remember, the schemes are numbered in the order that they occur.

    Mv_Background BEGIN /images/blue_pap.gif 0 /images/temple.jpg

=item Mv_BgColor
Sets the background colors to be used in the color schemes.  The line
must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for background color. The specification can be in #RRGGBB
color format, or can be one of the colors that will be recognized
(steelblue, white, etc.) Each color should be separated by one or more
spaces.  Set to 'none' to disable a color (use the browser default) for
a particular scheme.  Remember, the schemes are numbered in the order
that they occur.

    Mv_BgColor BEGIN  steelblue none white

=item Mv_LinkColor
Sets the link colors to be used in the color schemes.  The line
must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for link color. The specification can be in #RRGGBB
color format, or can be one of the colors that will be recognized
(steelblue, white, etc.) Each color should be separated by one or more
spaces.  Set to 'none' to disable a color (use the browser default) for
a particular scheme.  Remember, the schemes are numbered in the order
that they occur.

    Mv_LinkColor BEGIN  ltgreen none red

=item Mv_TextColor
Sets the text colors to be used in the color schemes. The colors are
accessed with the [body n] tag, where n is the color scheme number. The
line must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for text color. The specification can be in #RRGGBB color
format, or can be one of the colors that will be recognized (steelblue,
white, etc.) Each color should be separated by one or more spaces.  Set
to 'none' to disable a color (use the browser default) for a particular
scheme.  Remember, the schemes are numbered in the order that they
occur, beginning with 1.

    Mv_TextColor BEGIN  white none black

=item Mv_VlinkColor 
Sets the visited link colors to be used in the color schemes. The line
must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for visited link color.  The specification can be in
#RRGGBB color format, or can be one of the colors that will be
recognized (steelblue, white, etc.) Each color should be separated by
one or more spaces. Set to 'none' to disable a color (use the browser
default) for a particular scheme. Remember, the schemes are numbered in
the order that they occur.

    Mv_VlinkColor BEGIN  orange none blue

=item OrderFrame
The frame name where the order page will go, if frames are enabled.
If the frame doesn't exist, a new frame will be created.  The default
is '_blank', which creates a new browser window for the page.

    OrderFrame    _blank

=item OrderReport
When the completed order is ready to be mailed to the vendor, the
order report file describes the layout of the order report. Defaults
to I<report>.

    OrderReport  /data/order-form

=item PageDir
Location of catalog pages. Defaults to the pages subdirectory in the
VendRoot directory.

    PageDir  /data/catalog/pages

=item PriceCommas
If you desire no commas in your price numbers (for the [item-price] tag)
set this to 'no'. The default is to put commas in.

    PriceCommas  no

=item ProductDir
Location of the product files. Defaults to the products subdirectory
of the VendRoot directory.

    ProductDir  /data/catalog/for-sale

=item Random
The Random directive allows you to define an unlimited number of random
messages or image specifications that reside in files. It is called by
the [random] tag.  You don't know which one will show up! Even I don't,
it is random.  If the file does not exist at program configuration time,
the tag is simply stripped.  The line in the F<minivend.cfg> file takes
the form of the directive, followed by any number of vend-style file
names (relative to the PageDir, with no .html suffix).

    Random  rand/message1 rand/message2 rand/message3 rand/message4

=item ReadPermission and WritePermission
By default, only the user account that MiniVend runs under (as set by the
setuid permission on svend) can read and write files created by MiniVend.
WritePermission and ReadPermission can be set to 'user', 'group', or
'world'.

    WritePermission  group
    ReadPermission   group

=item ReportIgnore
A comma-separated list of items you don't want to have sent by email on
the order report. Default is blank, or none. Fields beginning with
'mv_', the MiniVend special variables, are automatically ignored.

    ReportIgnore  credit_card_no

=item RequiredFields
A comma-separated list of items you want to make sure the customer fills
in before an order can be submitted.  If an empty field is found when
the customer submits the order, the special page F<needfield.html> will
be displayed to request that they enter the information. No default.

    RequiredFields  name,company,email

=item SalesTax
If non-blank, enables automatic addtion of sales tax based on the order
form.  The value is a comma-separated list of the field names (as placed
in order.html), in priority order, which should be used to look up sales
tax percentage in the salestax.asc database. This database is not
supplied with MiniVend -- it is typically received from a third party by
quarterly or monthly subscription.

    SalesTax    zip,state

=item SearchOverMsg
A string that is substitued for a [search-over-msg] tag, used to
indicate that the search engine returned more than the number
of items it was limited to.

    SearchOverMsg    You had more than

=item Searchframe
The frame name where search results will go, if frames are enabled.
If the frame doesn't exist, a new frame will be created.  The default
is 'main'.

    SearchFrame    main

=item SendMailProgram
Specifies the program used to send email. Defaults to
'/usr/lib/sendmail'.

    SendMailProgram  /bin/mailer

=item SessionDatabase
When storing sessions in a DBM database, specify the base name of the
DBM file to use. The file extensions of .pag, .dir, or .gdbm
(depending on the DBM implementation used) will be appended.

    SessionDatabase  session-data

=item SessionExpire
A customer can exit their browser or leave the catalog pages at any
time, and no indication is given to the HTTPD server aside from the
lack of further requests that have the same session id. Old session
information needs to be periodically expired. The SessionExpire
specifies the minimum time to keep track of session information.
Defaults to one day.

    SessionExpire  4 hours

=item Shipping
Specifies a shipping charge to add onto the total price for items
ordered. If you do not want to include a fixed shipping charge on the
order page, leave this 0 and do not include the [shipping] element in
the order page. Defaults to 0.  Overridden by the I<CustomShipping>
directive.

    Shipping        5.00

=item Tracking
Enables order and popularity tracking when entered. Its value is
the initial order number that will be used as the beginning key for
orders in the tracking database. See L<Tracking and Backend Order Entry>.

    Tracking        Order100001

=item UseCode
This determines whether the part number field in the ASCII product file
will be used to determine the link to the item for the [item-link] tag.
If set, this has the effect of creating a different HTML page link for
every part number.  If not set (the default), the [item-link] tag
uses the value of the last field in the ASCII product file as the link
value.  This option can be used to great effect with a program which
automatically creates catalog pages from the database.

    UseCode    yes

=back

=head2 Required Pages

The following pages need to be present in the pages directory. See the
sample subdirectory for examples.

=over 4 

=item catalog.html
The main catalog page presented by MiniVend when another page is
not specified.

=item confirmation.html
After the order is completed, the confirmation page is
displayed.

=item failed.html
If the sendmail program could not be invoked to email the
completed order, the failed.html page is displayed. (Sadly we
don't know if the email was successfully delivered).

=item interact.html
Displayed if an unexpected response was received from the
browser, such as not getting expected fields from submitting a
form. This would probably happen from typos in the html pages,
but could be a browser bug.

=item missing.html
This page is displayed if the URL from the browser specifies a
page that does not have a matching .html file in the pages
directory. This can happen if the customer saved a bookmark to
a page that was later removed.

=item needfield.html
Displayed if the user did not fill in a required field in the
order form.  See L<REQUIRED FIELDS>.

=item noproduct.html
This page is displayed if the URL from the browser specifies
the ordering of a product code which is not in the products
file.

=item order.html
This page is displayed when the customer orders an item. It contains
all of the customer-entered values, as well as any default items
like I<DefaultShipping>.

=item search.html
Contains the page for the search engine results.  Also required
is an input page, which can be the same as search.html or
an additional page.  Two sample input pages, fr_sel.html and 
fr_search.html, are supplied with the demo.

=back

=head1 ADMINISTERING MINIVEND

There is a supplied administration utility, F<MAT>, the MiniVend
Administration Tool, which has its own documentation.  It can perform
any of the following operations via a web browser.

=head2 Starting, Stopping, and Re-starting the Server

When running in server mode, MiniVend operates much faster. Since
it is loaded once, and keeps the database files open continuously,
it merely needs to field the CGI request (via vlink) and perform
the appropriate function.  But because it is always running, the 
databases are locked -- and you will need to unlock them to perform
administrative functions.

Several utilities are supplied in the VendRoot/bin directory:

    stop       Stops the server
    start      Starts the server
    restart    Re-starts the server (force re-read of configuration)
    makedbm    Makes the pr_pric and pr_desc databases
    trackrpt   Dumps the tracking database (example script)

The following commands assume that you made /usr/local/lib/minivend
your MiniVend base directory.

To start the server:

    /usr/local/lib/minivend/bin/start

Assuming the server starts correctly, you will see a message stating
the process ID it is running under -- that information is also sent
to /usr/local/lib/minivend/error.log.

To re-start the server:

    /usr/local/lib/minivend/bin/restart

This is typically done to force MiniVend to re-read its configuration.
You will see a message stating that a HUP signal has been sent to
the process ID the server is running under -- that information is also sent
to /usr/local/lib/minivend/error.log.  Check the error.log file for
confirmation that the server has restarted properly.

To stop the server:

    /usr/local/lib/minivend/bin/stop

You will see a message stating that a TERM signal has been sent to
the process ID the server is running under -- that information is also sent
to /usr/local/lib/minivend/error.log.  Check the error.log file for
confirmation that the server has actually stopped.

=head2 Making the Product Database

If you have edited your F<products.asc> file, you will need to re-make
the DBM databases for MiniVend to operate properly. Stop the server, and
perform F<makedbm> command, located in the bin/ directory.  If you are
using I<MAT>, it will know automatically how to do it.

=head2 Expiring Sessions

You should periodically expire old sessions to keep the session
database file from growing too large. Either manually do this
with MAT, or stop the server (if running server mode) and
directly execute minivend.pl to do this:

        /usr/local/lib/minivend/bin/stop
        /usr/local/lib/minivend/minivend.pl -expire
        /usr/local/lib/minivend/bin/start

You could add a crontab entry such as the following:

        # once a day at 4:40 am
        40 4 * * *    (cd /usr/local/lib/minivend; \
                       bin/stop; perl minivend.pl -expire; \
                       bin/start )

MiniVend will wait until the current transaction is finished before
stopping, so you can do this at any time without disabling web access.

=head2 INDEX OF ITEMS

I<[area pg]>

I<[areatarget pg frame]>

I<[body n]>

I<[buttonbar n]>

I<ButtonBars>

I<catalog.html>

I<cgi-bin>

I<CGIUSER>

I<confirmation.html>

I<CustomShipping>

I<DefaultShipping>

I<[description code]>

I<DescriptionTrim>

I<DisplayErrors>

I<failed.html>

I<[finish-order]>

I<FinishOrder>

I<[frames-off]>

I<[frames-on]>

I<Help>

I<interact.html>

I<[item-code]>

I<[item-description]>

I<[item-link code]>

I<ItemLinkDir>

I<ItemLinkValue>

I<[item-price]>

I<[item-quantity]>

I<LINK_FILE>

I<LINK_TIMEOUT>

I<MAIL ORDER TO>

I<missing.html>

I<Mv_Background>

I<Mv_BgColor>

I<mv_case>

I<mv_doit>

I<Mv_LinkColor>

I<mv_orsearch>

I<mv_perl>

I<mv_searchlimit>

I<mv_searchspec>

I<Mv_TextColor>

I<Mv_VlinkColor >

I<needfield.html>

I<[nitems]>

I<noproduct.html>

I<[order code]>

I<OrderFrame>

I<order.html>

I<OrderReport>

I<PageDir>

I<[page pg]>

I<[pagetarget pg frame]>

I<PERL>

I<PERL>

I<[price code]>

I<PriceCommas>

I<[process-search]>

I<ProductDir>

I<[quantityC<->name]>

I<[random]>

I<Random>

I<ReadPermission and WritePermission>

I<ReportIgnore>

I<RequiredFields>

I<SalesTax>

I<Searchframe>

I<search.html>

I<[search-list]>

I<SearchOverMsg>

I<SendMailProgram>

I<SessionDatabase>

I<SessionExpire>

I<Shipping>

I<[total-cost]>

I<Tracking>

I<UseCode>

I<[value field]>

I<vend>

I<VEND>

I<VEND>

I<VEND URL>


=head1 AUTHORS

     Original author of Vend is Andrew Wilcox, F<awilcox@world.std.com>
     MiniVend is based on Vend 0.2, with portions from Vend 0.3,
     and is modified extensively Mike Heins, F<mikeh@iac.net>

