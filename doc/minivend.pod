=head1 NAME

MiniVend - WWW Catalog Ordering

=head2 VERSION

This document describes MiniVend 1.02, based on Andrew Wilcox's
original Vend, Version 0.2.

=head1 DESCRIPTION

MiniVend allows customers to select items to buy from catalog pages. The
program tracks which products they have selected and the quantity
desired. From the ordering page they may complete the ordering process
by entering their name and address, or return to browsing and select
more items.

Among other features, MiniVend plugs into a system with an SSL (Secure Sockets
Layer) server, allowing encrypted transmission of sensitive customer data.
This capability makes the entry of credit card numbers practical and
secure.

You can jump to any of the following sections:

L<OVERVIEW OF MINIVEND>

- L<How MiniVend Manages Sessions>

- L<Where to Download MiniVend>

- L<Perl Version 5>

- L<Setup for the CERN HTTPD Server>

- L<Setup for the NCSA and Apache Servers>


L<QUICK START>


L<MANUAL INSTALLATION>

- L<Needed Directories>

- L<Unpacking the Distribution>

- L<The Demo Systems>

- L<Testing Your CGI-BIN Directory>

- L<Setting up SVEND>

- L<Setting up VLINK>

- L<Setting up minivend.pl>


L<SETTING UP YOUR CATALOG>

- L<products.asc>

- L<Catalog Pages>

- L<On-the-fly Catalog Pages>

- L<The Order Page>

- L<The Search Engine>

- L<Customer Input Fields>

- L<Special Fields>

- L<Order Report File>

- L<Sales Tax>

- L<Custom Shipping>

- L<Tracking and Backend Order Entry>

- L<Order Security>

- L<Using Frames>

- L<Controlling Page Appearance>


L<MINIVEND CONFIGURATION FILE>

- L<Optional Configuration Directives>

- L<Required Pages>


L<ADMINISTERING MINIVEND>

- L<Starting, Stopping, and Re-starting the Server>

- L<Making the Product Database>

- L<Expiring Sessions>

- L<INDEX OF ITEMS>


L<AUTHORS>


=head1 OVERVIEW OF MINIVEND

If you want to get started, just jump to L<QUICK START> below.
The following sections briefly describe how MiniVend works.

=head2 How MiniVend Manages Sessions

Normally, each request for a World Wide Web page which comes in to a
server stands on its own. While the server will probably know which
machine a request comes from, it may not know if the next request
comes from the same browser or even from the same user on that
machine.

MiniVend keeps track of who is ordering what by including in the URL a
session id: a random string which is different for each customer
browsing the catalog.

So that the session id can be included in URL's within catalog pages,
every page in the catalog is served up by MiniVend running as a cgi-bin
program. Here is an example of such a URL:

        http://__SERVER_NAME__/cgi-bin/vlink/shirts?WehUkATn;;1

An explanation of each part:

=over 4

=item __SERVER_NAME__

Internet address of server

=item cgi-bin
Informs server that the requested page will be generated by a
program.

=item vlink

Name of the program to run

=item shirts

Page of the catalog to display

=item WehUkATn;;1

The session id

=back

Catalog pages are written in regular HTML with extensions to
support catalog ordering. Pages are delivered through the following
steps:

    1.  The HTTPD server receives a request for a catalog page.

    2a. The server runs svend as a cgi-bin program. svend is a small C
        program which is setuid to the account which owns the catalog
        files. svend executes the MiniVend Perl script minivend.pl.

                   -- OR --

    2b. The server is already running as a daemon, and runs vlink instead
        of svend.  The vlink program communicates with the MiniVend program
        via a UNIX-domain socket.  THIS IS MUCH FASTER.

    3.  MiniVend reads the HTML source page from the catalog pages directory,
        and interprets the catalog ordering extensions in the file. If the 
		page doesn't exist, and corresponds to a part number in the database,
		it is built "on the fly" using the template page flypage.html.

    4.  The page, which is now entirely in regular HTML, is delivered to
        the HTTPD server, which returns it to the browser.

Once the customer has finished, the completed order is emailed to the
vendor.

=head2 Where to Download MiniVend


The MiniVend version described in this document is available from:

    http://www.iac.net/~mikeh/download.html

The original Vend is available from:

    http://www.maine.com/awilcox/vend

=head2 Perl Version 5

You will need Perl version 5.001m (or later) to run MiniVend. Many sites
are still running Perl version 4. You can download a copy of Perl 5 from
any CPAN (Comprehensive Perl Archive Network) site:

NORTH AMERICA

  Florida 
     ftp://ftp.cis.ufl.edu/pub/perl/CPAN/ 
  Illinois 
     ftp://uiarchive.cso.uiuc.edu/pub/lang/perl/CPAN/ 
  Massachusetts 
     ftp://ftp.delphi.com/pub/mirrors/packages/perl/CPAN/ 
  Oklahoma 
     ftp://ftp.uoknor.edu/mirrors/CPAN/ 
  Texas 
     ftp://ftp.sedl.org/pub/mirrors/CPAN/ 
     ftp://ftp.sterling.com/programming/languages/perl/ 

EUROPE

  Finland 
     ftp://ftp.funet.fi/pub/languages/perl/CPAN/ 
  France 
     ftp://ftp.ibp.fr/pub/perl/CPAN/ 
     ftp://ftp.pasteur.fr/pub/computing/unix/perl/CPAN/ 
  Germany 
     ftp://ftp.leo.org/pub/comp/programming/languages/perl/CPAN/ 
     ftp://ftp.rz.ruhr-uni-bochum.de/pub/programming/languages/perl/CPAN/ 
  Great Britain 
     ftp://ftp.demon.co.uk/pub/mirrors/perl/CPAN/ 
  The Netherlands 
     ftp://ftp.cs.ruu.nl/pub/PERL/CPAN/ 
  Portugal 
     ftp://ftp.ci.uminho.pt/pub/lang/perl/ 
  Sweden 
     ftp://ftp.sunet.se/pub/lang/perl/CPAN/ 
  Switzerland 
     ftp://ftp.switch.ch/mirror/CPAN/ 

AUSTRALASIA

  Australia 
     ftp://coombs.anu.edu.au/pub/perl/CPAN/
  New Zealand 
     ftp://ftp.tekotago.ac.nz/pub/perl/CPAN/ 

ASIA

  Japan 
     ftp://ftp.lab.kdd.co.jp/lang/perl/CPAN/ 
  Taiwan 
     ftp://dongpo.math.ncu.edu.tw/perl/CPAN/ 

AFRICA

  South Africa 
     ftp://ftp.is.co.za/programming/perl/CPAN/ 


=head2 Setup for the CERN HTTPD Server

MiniVend uses the user and machine name of the customer as an additional
mechanism for distinguishing between users. Turn identity checking on
in the HTTPD server with the IdentityCheck directive:

        IdentityCheck  On

Unless changed by the UserId directive, the CERN httpd server will run
programs as the user "nobody". To ensure that svend is only run as a
cgi-bin program and not by other users on the system, svend will only
run under this user account. If other programs on the system use the
nobody account, you may want to change the UserId to an account which
is only used by httpd.

        UserId  hguest

You will also need rules to map URLs to your public HTML files and
your cgi-bin directory. These may be already set up in the httpd
configuration file. Here is an example:

        Exec  /xyzcorp/cgi-bin/*  /home/xyzcorp/cgi-bin/*
        Pass  /xyzcorp/*          /home/xyzcorp/WWW/*

The first line specifies that a URL such as
"http://__SERVER_NAME__/cgi-bin/svend" will run the program svend
located in the /home/xyzcorp/cgi-bin directory. The second line
specifies that files in the /home/xyzcorp/WWW directory can be
retrieved with a URL such as http://machine.com/xyzcorp/file.

The mapping described by Exec will always require two parts in the
URL: one to specify the cgi-bin directory and another to specify the
program to run. You can shorten the URL by specifying an additional
mapping such as:

        Map  /catalog/*  /xyzcorp/cgi-bin/svend/*

This will allow a URL such as "http://machine.com/catalog/shirts" to
be used.

In the MiniVend configuration file, minivend.cfg, set the VendURL directive
to the URL which runs svend in the cgi-bin directory.

        VendURL  http://__SERVER_NAME__/catalog

=head2 Setup for the NCSA and Apache Servers

There is no special configuration required unless you plan
on running the MAT administration program.  Simply put
vlink or svend in the cgi-bin directory (of course it must be 
script-aliased), and run the MiniVend program.

If the MAT program is to be installed in a protected CGI directory, you must: 

1. Create the directory definition in the srm.conf file. This is
what the entry should look like (if you are using the default
NCSA/Apache installation directories):

    ScriptAlias /prot-bin/   /usr/local/etc/httpd/prot-bin/

2. Actually make the directory if it doesn't exist:

    mkdir /usr/local/etc/httpd/prot-bin

3. Add the following entry to the access.conf file:

    <Directory /usr/local/etc/httpd/prot-bin>
        Options
        AuthUserFile /usr/local/etc/httpd/conf/.htpasswd
        AuthGroupFile /usr/local/etc/httpd/conf/.htgroup
        AuthName admin
        AuthType Basic
        <Limit GET POST>
        require group admin
        </Limit>
    </Directory>

4. Create the password file with htpasswd or the like. For convenience,
a Perl version of htpasswd (htpasswd.pl) may be included in your bin/
directory. Copy the password file to /usr/local/etc/httpd/conf/.htpasswd.

5. Create the /usr/local/etc/httpd/conf/.htgroup file with the
user name to use in the file:
     
    admin:mike

6. Copy the mat executable to the protected bin directory.

7. Restart the HTTP server (send it a HUP signal), so it will re-read
the configuration files.

8. Test by accessing the URL http://__SERVER_NAME__/prot-bin/mat -- you
should be prompted for a password.

=head1 QUICK START

Before you begin, select the directory where you want to install MiniVend.
You can unpack the tar file either there, or in another temporary
directory -- the configure script handles either. The suggested
directory is /usr/local/lib/minivend -- but really any directory will
do.  You must of course have write permission there; and you will
eventually need to have write permission on your CGI-BIN and protected
CGI-BIN directories.

Decompress and untar the distribution:

        gzip -d mvend102.tar.gz
        tar xfv mvend102.tar

If you have GNU tar, you can combine these steps:

        tar xfvz mvend102.tar.gz

Run the configure script with:

        ./configure

If you have trouble with ./configure, try this:

        perl configure.pl /usr/bin/perl

Replace the 'perl' and '/usr/bin/perl' with the proper paths to
your Perl 5 binary.

The process should be self-explanatory. If you discover any problems,
refer to the following section, L<MANUAL INSTALLATION>. Otherwise,
MiniVend should be installed at the completion of the script.  It is
suggested that you install the demo as a starting point for your own
catalog -- the configuration script will give you the opportunity to do
so.

B<IMPORTANT NOTE:> One point that is to be emphasized --
I<only your base html pages go in the document space of your http server.>
Any pages with MiniVend elements/tags go in the directory set by the
I<PageDir> directive (the default is VendRoot/pages). For the demos
supplied with MiniVend, this means that only a few pages will be copied
to your HTTP server's DocumentRoot, with the remainder of the pages
staying in PageDir.

=head1 MANUAL INSTALLATION

The MiniVend installation is complex, and requires quite a few distinct
steps.  That is why there is an interactive configuration script that
is included with MiniVend -- it merely does automatically
what is described below. It makes the process much easier, and will
install the demo catalog. This configuration script has been tested
on some, but not all, UNIX systems.  Please report problems
to <mikeh@iac.net>.

=head2 Needed Directories

The MiniVend program, your catalog pages, and the products file should all
go into a private directory. Because the catalog pages are served
through the MiniVend cgi-bin program and contain nonstandard elements,
they should not be put into a public WWW directory, nor do they need
to have world-readable file permissions.

You will want a public WWW directory for inline image graphic files. MiniVend
does not serve the images, only the HTML tags calling them. A useful
convention is to place all buttonbars, backgrounds, and icons in
the /images directory, with the catalog items perhaps located
in the /images/catalog directory.  It is up to you, but remember
that you must use an I<absolute path> -- relative paths will not do.

You will need a cgi-bin directory in which to put the svend program.

If using I<MAT>, you will want a password-protected
private cgi-bin directory. See the section
I<Setting up the NCSA/Apache Server> for details.

=head2 Unpacking the Distribution

Select a directory to use as your MiniVend base directory (referred to
hereafter as VendRoot).  Decompress and untar the distribution:

        gzip -d mvend102.tar.gz
        tar xfv mvend102.tar

If you have GNU tar, you can combine these steps:

        tar xfvz mvend102.tar.gz

=head2 The Demo Systems

The products directory contains a sample product file and the file
report in the main directory is the sample order report.  Sample catalog
pages are in the directories sample/ and simple/. If you would like to
use them as a starting point for your own catalog, you can either have
the configure script install the demo for you, or you can copy the
sample files into the MiniVend directory and your HTML directory, which
for these examples is assumed to be /usr/local/etc/httpd/htdocs.

To install the full-featured demo:

 cd /usr/minivend                   # wherever your vend directory is
 mkdir pages                        # make if not already there
 cp sample/*.html pages
 md /usr/local/etc/httpd/htdocs/sample
 md /usr/local/etc/httpd/htdocs/sample/images
 cp sample/images/* /usr/local/etc/httpd/htdocs/sample/images
 cp sample/special*.html /usr/local/etc/httpd/htdocs/sample
 cp sample/index.html  /usr/local/etc/httpd/htdocs/sample
 cp sample/intro.html  /usr/local/etc/httpd/htdocs/sample
 cp sample/address.html /usr/local/etc/httpd/htdocs/sample

To install the simple demo:

 cd /usr/minivend                   # wherever your vend directory is
 mkdir pages                        # make if not already there
 cp simple/*.html pages
 md /usr/local/etc/httpd/htdocs/sample
 md /usr/local/etc/httpd/htdocs/sample/images
 cp sample/images/* /usr/local/etc/httpd/htdocs/sample/images
 cp simple/index.html  /usr/local/etc/httpd/htdocs/sample

=head2 Testing Your CGI-BIN Directory

This is a good time to test your cgi-bin configuration and find out
the numeric user-id which your HTTPD server runs cgi-bin programs
under. Edit "src/testcgi" and change the first line to refer to your Perl
version 5 (or higher) executable.

        #!/usr/bin/perl

Copy "testcgi" into your cgi-bin directory, and make it executable.

        cp src/testcgi /your/cgi-bin/directory
        chmod a+rx /your/cgi-bin/directory/testcgi

Try running testcgi from your shell command line to make sure that
everything is working.

        /your/cgi-bin/directory/testcgi

testcgi should respond with the version of Perl that you are running
and your numeric user id.

Now try running testcgi from your browser. Write down the numeric user
id which you get there, as you will need it later for F<svend> and F<mat>.

=head2 Setting up SVEND

F<svend> is a small C program which is setuid to the user account which
can access the catalog data files. The following defines at the
beginning of svend.c should be set:

=over 4

=item CGIUSER

Set this to the numeric uid (user id) which HTTPD runs cgi-bin
programs under. Typically this will be 'http', 'nobody' or 'guest'.

=item PERL

Set this to the location of the perl (version 5 or higher)
executable.

=item VEND

Set to the location of minivend.pl, typically in the VendRoot
directory.

=back

Compile svend.c with your C compiler:

        cc svend.c -o svend

On some systems you can make the executable smaller with the strip
program. But don't worry about it if strip is not on your system.

        strip svend

If you want MiniVend to run under a different user account than your own,
make that user the owner of svend. (You probably need to be root to do
this). Do not make svend owned by root, because making svend setuid
root is an unnecessary security risk.

        chown vendacct svend

Make svend setuid:

        chmod u+s svend

Move the svend executable to your cgi-bin directory:

        mv svend /the/cgi-bin/directory


=head2 Setting up VLINK

The F<vlink> program, compiled from F<link.c>, is a small C program
which is setuid to the user account which can access the catalog data
files, and contacts a running MiniVend daemon. If the MiniVend daemon,
is not running, it will attempt to start it. The following defines at the
beginning of F<link.c> should be set:

=over 4

=item LINK_FILE

Set this to the name of the socket file that will be used
for configuration, usually "/usr/local/lib/minivend/etc/socket"
or the "etc/socket" under the directory you chose for the
VendRoot.

=item LINK_TIMEOUT

Set this to the number of seconds vlink should wait before announcing
that the MiniVend server is not running.  The default of 20 is probably
a reasonable value.

=item NET_START

If you want the vlink program to start the server for you if it
is not already running, set NET_START equal to "-netstart". If
you set it to the default of "-notify", it will send email to
the MailOrderTo address announcing that the MiniVend server
is down.  If you set it to anything else, it will just send
an innocuous message that "we are probably doing development".

NOTE: If you are running with the I<CreditCards> directive
enabled, you will not be able to enter the password. The CreditCards
directive is disabled by default if -netstart is used to
start up MiniVend.

=item PERL

Set this to the location of the perl (version 5 or higher)
executable.

=item VEND

Set to the location of minivend.pl, typically in the VendRoot
directory.

=back

Change directories to the F<src> directory, then run the GNU
configure script:

        cd src
        ./configure

You will see some output as the configure script checks your system.
Then compile the program:

        cc link.c -o vlink

On some systems you can make the executable smaller with the strip
program. But don't worry about it if strip is not on your system.

        strip vlink

If you want MiniVend to run under a different user account than your own,
make that user the owner of vlink. (You probably need to be root to do
this). Do not make vlink owned by root, because making vlink setuid
root is an unnecessary security risk.

        chown vendacct vlink

Make vlink setuid:

        chmod u+s vlink

Move the vlink executable to your cgi-bin directory:

        mv svend /the/cgi-bin/directory

Some systems unset the SUID bit when moving the file -- re-set it
if necessary.

=head2 Setting up minivend.pl

Edit minivend.pl and specify the root directory which contains the MiniVend
distribution, along with the other needed paths:

        $Config::VendRoot = '/usr/local/lib/minivend';
        $Config::ConfDir = '/usr/local/lib/minivend/etc';
        $Config::PERL = '/usr/bin/perl';
        $Config::VEND = '/usr/local/lib/minivend/minivend.pl';

If you have the Des library and Perl Des module, uncomment the line:

		use Des;

That will allow internal encryption of credit card numbers stored on
disk.

=head1 SETTING UP YOUR CATALOG

MiniVend uses its own tags to implement catalog functions -- they
are similar to normal HTML, but are in [square brackets].  They
will usually be referred to in the following text as I<elements>.
The next section describes how to set up the pages and the configuration
directives to make your own catalog.  The demo catalog is a good
starting point -- in particular we suggest you pay attention to the
order and search pages.

=head2 products.asc

Each product you are selling should be given a product code: a short
code that identifies the product on the ordering page and in the
catalog. You can use any combination of letters, digits, dashes, periods,
pound signs, or underscores for the
product code. The F<products.asc> file is a ASCII tab-delimited
list of all the product codes, along with an arbitrary number of fields
which must contain at least the fields 'description' and 'price'.
Any additional information you want in the catalog can be placed in
any arbitrary field.

The product code must be the first field in the line.

Here is an example of a products file:

  code    description             price   image
  SH543   Men's fine cotton shirt 14.95   shirts.jpg
  PA776   Elegant pants           29.00   pants.gif

B<IMPORTANT NOTE:> The items must be separated by a B<single> tab
character. The items are lined up for your reading convenience.

This version of MiniVend implements the database in either GDBM,
DB_File, or in-memory format. If you use DBM, large
catalogs can be used without using too much memory; or slowing down
performance in static mode.  The DBM files are built automatically 
at MiniVend startup from the products file -- if it has not changed
they are not built. If the only DBM type on your system is NDBM, an
in-memory product database will be used. Catalogs of more than, say,
5,000 items will use large amounts of memory.

B<IMPORTANT NOTE:> The field names must be on the first line of the
I<products.asc> file. These field names must match I<exactly> the field names
of the [in_field] tags in your catalog pages, or the MiniVend server
will stop with an error.

When the products.asc file changes after import or edit, the DBM
database is re-built upon the next server start.

=head2 Catalog Pages

Pages in the catalog are written in regular HTML with extensions to
support catalog ordering. To distinguish them from regular HTML, these
extended elements use square brackets instead of angular brackets.

The first page displayed in the catalog, if no argument is supplied
to the F<vlink> or F<svend> cgi-bin program, is "catalog.html". This page
will contain links to other catalog pages with the [page] element.
Individual products can be ordered by the [order <item-code>] element, which
brings up the order page "order.html". The order page contains input
boxes for the customer to type in their name and address. Once the
order has been sent the "confirmation.html" page is displayed.

If you use the L<vendpage> utility, you will be able to write
the pages in normal HTML, then convert them I<en masse> to the
Vend format. MiniVend tags (the ones in square brackets) can be passed
in as HTML comments -- see L<vendpage> for details.

You will normally not want to include regular hypertext links to pages
outside of the catalog. Such links will not include the session id,
which means that if the customer follows an external link back to the
catalog the list of products ordered so far will have been lost.

Inline images, on the other hand, are served in the normal fashion.
You should include a regular <IMG SRC="URL"> element, where the URL
refers to a graphic image.

The following elements can be used in catalog pages:

=over 4

=item [page pg]
Insert a hyperlink to the specified catalog page pg. For
example, [page shirts] will expand into
<a href="http://__SERVER_NAME__/cgi-bin/vlink/shirts?WehUkATn;;1">. The
catalog page displayed will come from "shirts.html" in the
pages directory.

=item [pagetarget pg frame]
Same as the page element above, except it specifies an output frame to
target if frames are turned on.  The name F<is> case-sensitive, and if
it doesn't exist a new window will be popped up.  This is the same as
the [page ...] tag if frames are not activated.
For example, [pagetarget shirts main] will expand into a link like <a
href="http://__SERVER_NAME__/cgi-bin/vlink/shirts?WehUkATn;;1" TARGET="main">. The
catalog page displayed will come from "shirts.html" in the
pages directory, and be output to the 'main' frame.  Careful,
frame names are case-sensitive.

Also allows specification of secure pages if the target ends with
the string I<__secure> (which will be stripped).  If so specified,
the page will be called with I<SecureURL> instead of I<VendURL>.

=item [areatarget pg frame]
Inserts a Vend URL in a format to provide a targeted reference for a
client-side imagemap.  You set up the <AREA> tag with:

      <AREA COORDS="220,0,270,20" HREF="[areatarget page frame]">

If frames are enabled, this will expand to:

      <AREA COORDS="220,0,270,20"
	     HREF="http://__SERVER_NAME__/vlink/page?ErTxVV8l;;38" TARGET="frame">

If frames are I<not> enabled, this will expand to:

      <AREA COORDS="220,0,270,20"
	     HREF="http://__SERVER_NAME__/vlink/page?ErTxVV8l;;38">

=item [area pg]
Like the I<areatarget> element, except it will never yield
a frame target.

=item [/page], [/pagetarget]
Expands into </a>. Used with the page or pagetarget elements, such as:
[page shirts]Our shirt collection[/page] or [pagetarget pants main] Our
pants collection[/pagetarget].  They are syntactically the same, so
you can use either to terminate an anchor -- the two different ones
are provided for consistency.

=item [frames_on]
Turns on the frames processing option, which is disabled by default.
The proper way to use this is to put it ONLY in a page which is loaded
by frame-based browsers, as part of the initial frame load.  It is
persistent for the entire session, or until counteracted with a
[frames_off] tag.

=item [frames_off]
Turns off the frames processing option.  This can be used to disable
frames, perhaps as a clickable option for users.  It is persistent for
the entire session, or until counteracted with a [frames_on] tag.

=item [finish_order]
This element is used to give the customer, while browsing, a
way to return to the order page after they have already ordered
something. If they haven't ordered anything yet [finish_order]
does not appear at all on the displayed page. If they have
ordered an item, the element will expand into something like:

 <a href="http://__SERVER_NAME__/cgi-bin/vlink/finish;WehUkATn;;1">
 Finish Incomplete Order</a>

=item [order code]
Expands into a hypertext link which will include the specified
code in the list of products to order and display the order
page. code should be a product code listed in the "products"
database.

=item [/order]
Expands into </a>. Used with the order element, such as: Buy a
[order TK112]Toaster[/order] today.

=item [price code]
Expands into the price of the product identified by code as
found in the products database.

=item [description code]
Expands into the description of code as found in the products
database.

=item [field name code]
Expands into the value of the field I<name> for the product
identified by I<code> as found in the products database.
B<IMPORTANT:> If the field name is not a field in the
database, the MiniVend server will stop with an error.

=item [body n]
Selects from the predefined color schemes and/or backgrounds, and
just becomes a <BODY> tag if none are defined. See 
L<Controlling Page Appearance>.

=item [buttonbar n]
Selects from the predefined buttonbars, and is stripped if it
doesn't exist. See L<Controlling Page Appearance>.

=item [random]
Selects from the predefined random messages, and is stripped if none
exist. See L<Controlling Page Appearance>.

=back

=head2 On-the-fly Catalog Pages

If an item is displayed on the search list (or order list) and there is
a link to a special page keyed on the item, MiniVend will attempt to
build the page "on the fly". It will look for the special page
I<flypage.html>, which is used as a template for building the page.  If
I<[item_field fieldname]>, I<[item_price]>, (etc.) elements are used on the page,
quite complex and information-packed pages can be built.  The
I<[if_field fieldname]> HTML I<[/if]> pair can be used to only insert
HTML if there is a non-blank value in a particular field.

=head2 The Order Page

The following elements are used on the order page:

=over 4

=item [value field]
Expands into the current value of the customer input field
named by field. See the section on input fields for more
information.

=item [nitems]
Expands into the total number of items ordered so far.

=item [subtotal]
Expands into the subtotal cost, exclusive of sales tax, of
all the items ordered so far.

=item [salestax]
Expands into the sales tax on the subtotal of all the
items ordered so far. If there is no key field to derive the
proper percentage, such as state or zip code, it is left at zero.
See I<Sales Tax> for more information.

=item [total_cost]
Expands into the total cost of all the items ordered so far, including
sales tax (if any).

=back

Within the order page, the [item_list] element shows a list of all the
items ordered by the customer so far. It works by repeating the source
between [item_list] and [/item_list] once for each item ordered.
Between the item_list markers the following elements will return
information for the current item:

=over 4

=item [item_code]
Evaluates to the product code for the current item.

=item [item_description]
Evaluates to the product description (from the products file)
for the current item.

=item [item_increment]
Evaluates to the number of the item in the match list. Used
for numbering search matches or order items in the list.

=item [item_field fieldname]
Evaluates to the field name I<fieldname> in the database,  for
the current item.

=item [if_field fieldname]
If the database field I<fieldname> is non-blank, the following
text up to the [/if] tag is substituted. This can be used to
substitute IMG or other tags only if the corresponding source
item is present.

=item [/if]
Terminates an [if_field fieldname] element.

=item [item_quantity]
Evaluates to the quantity ordered for the current item.

=item [item_price]
Evaluates to the price (from the products file) of the current
item.

=item [quantity_name]
Evaluates to the name to give an input box in which the
customer can enter the quantity to order.

=back

=head2 The Search Engine

MiniVend implements a search engine which will search the product
database for items based on customer input.  It uses the (example)
nf_sel.html, nf_search.html, fr_comb.html, and search.html files in the F<pages>
directory, and has some of its own special tags and variables.

Two types of searching are available.  The default is a text-based
search of the F<products.asc> file. An optional Glimpse search
is enabled by placing the command specification for Glimpse in
the directive I<Glimpse>.

To use the Glimpse search, you must build the Glimpse index based
on files in your I<ProductDir>. If you installed MiniVend in
the default F</usr/local/lib/minivend>, the command line to build
the index would be:

	glimpseindex -b -H /usr/local/lib/minivend/products products.asc

You could easily structure files such that they returned matches only
for certain words or fields.  One method that works well for large
F<products.asc> files is to split the F<products.asc> file into
small index files (in the example, 100 lines) with the split(1)
UNIX command, then index it with glimpse:

	split -100 products.asc index.asc.
	glimpseindex -H /usr/local/lib/minivend/products index.asc.*

This will dramatically increase search speeds for large catalogs,
at least if the search term is relatively unique. If it is common
string, you will be better off to use the text-based search.

If the Glimpse executable is not found at MiniVend startup, the Glimpse
search will be disabled and the regular text-based search used instead.

=over 4

=item [search_list]

Starts the representation of a search list. MiniVend tags can be
embedded in the search list, yielding a table or formatted
list of items with part number, description, price, and  hyperlinks to
order or go to its catalog page. 

In particular, all of the item tags described under order page
are active.  The most useful one might be [item_link], which if
properly used, can allow the user to search the catalog for
an item, then click a link to go to detailed catalog page
for the item. See the sample search.html page for an example.

=item [/search_list]

Ends the search list.  

=item [more_list]

Starts the section of the search page which only is output
if there are more matches than specified in I<mv_matchlimit>.
If there are less matches than the number in mv_matchlimit, all
text/html between the [more_list] and [/more_list] elements is
stripped.

Use in conjunction with the [more] element to place pointers to
additional pages of matches.

=item [/more_list]

Companion to [more_list].  

=item [more]

Inserts a series of hyperlinks that will call up the next matches
in a series. They look like this:

   Next 1 2 3 4 5 6 Previous

The current page will not be a hyperlink.  Every time the new
link is pressed, the list is re-built to correspond to the current
page.  If there is no I<Next> or I<Previous> page, that link
will not be shown.

See the F<fr_resul.html> or F<search.html> files for examples. Make sure
you insert this item between a [more_list] and [/more_list] element pair.

=item [item_link code]
Expands into a hyperlink which will jump the user to a page
under the I<ItemLinkDir> (default is the pages directory),
with anchor text as set in I<ItemLinkValue> (default is "More Details").
If the page is not present, then I<flypage.html> will be used to build
a page from the entry in the database.  If that doesn't work (perhaps
due to a missing flypage.html) then the error page I<notfound.html> will
be displayed.  Only active in the search list.

=item [process_search]
Calls the search with the proper URL, including MiniVend session tags.  Used
as the ACTION value for the search form.

=back

The sample F<nf_srch.html>, F<nf_sel.html> and F<fr_comb.html> pages show example
search forms.  You can modify them to present the search in any way you
like -- just be careful to use the proper variable names for passing to
MiniVend.  It is also necessary that you copy the hidden
variables as-is -- they are required to interpret the request as a
search.  The special form variables are:

=over 4

=item mv_searchspec

The actual search string that is typed in by the customer. It is 
a text (INPUT TYPE=TEXT) field, or can be put in a select (drop-down)
list to enable category searches.

=item mv_matchlimit

The page size for matches that are returned.  If more matches than
B<mv_matchlimit> are found, the search paging mechanism will be
employed if the proper I<[more_list]> is present.  Can be
implemented as a scrolling list (INPUT TYPE=SELECT) or radiobox 
(INPUT TYPE=RADIO) field.

=item mv_orsearch

If this item is set to I<yes>, the search will return items matching any
of the words in I<searchspec>. The default is I<no>.

=item mv_case

If this item is set to I<yes>, the search will return items without regard
to upper or lower case.  This is the default -- set to I<yes> if case
should be matched.  Implement with a checkbox (INPUT TYPE=CHECKBOX) field.

=item mv_exact

If set to I<yes>, matches only on whole words, not substrings.
Ignored unless using Glimpse.

=item mv_searchtype

If set to I<glimpse>, selects the Glimpse search (if Glimpse is defined).
If set to I<text>, selects the text-based search. Defaults to I<text> if
I<Glimpse> is not defined, to Glimpse if it is. This can allow use of
both search types if that is desirable -- for instance, searching for
very common strings is better done by the text-based search. An example
might be searching for categories of items instead of individual items.

=item mv_spelling_errors

The number of spelling errors that will be tolerated. Ignored unless
using Glimpse. If you have a large catalog, you might wish to limit this
to two.

=item mv_doit

This must be set to 'search' to make this a search page.

=back

The sample search page also has a link to a help file F<(pages/help.html)>
which has rudimentary end-user help for the search engine.

=head2 Customer Input Fields

On the orders page, order.html, you will have a number of input fields
allowing customer to enter information such as their name and address.
You can add more fields simply by putting more input elements on the
order.html page, and the information will automatically be included in
the order report. Input elements should be written in this way:

        <input type="text" name="town" value="[value town]" size=30>

Choose a name for this input field such as "email" for an email
address. Set the name attribute to the name you have chosen.

The value attribute specifies the default value to give the field when
the page is displayed. Because the customer may enter information on
the order page, return to browsing, and come back to the order page,
you want the default value to be what was entered the first time. This
is done with the [value] element, which returns the last value of an
input field. Thus,

        value="[value name]"

will evaluate to the name entered on the previous order screen, such
as:

       value="Jane Smith"

which will be displayed by the browser.

The size attributes specifies how many characters wide the input field
should be on the browser. You do not need to set this to fit the
longest possible value since the browser will scroll the field, but
you should set it large enough to be comfortable for the customer.

=head2 Special Fields

MiniVend treats some fields specially, to enable more control over your
forms and user presentation.

These special fields all begin with I<mv_>, and include:

	*credit_card*		Discussed in order security
	mv_background		Explained in Controlling Page Appearance
	mv_bgcolor			Explained in Controlling Page Appearance
	mv_case				Explained in Search Engine
	mv_customcolors		Explained in Controlling Page Appearance
	mv_doit				Common to all forms, sets default action
	mv_linkcolor		Explained in Controlling Page Appearance
	mv_matchlimit		Explained in Search Engine
	mv_nextpage			Sets next page user will go to after submission
	mv_orsearch			Explained in Search Engine
	mv_perl				Explained in Search Engine
	mv_resetcolors		Explained in Controlling Page Appearance
	mv_searchspec		Explained in Search Engine
	mv_searchtype		Explained in Search Engine
	mv_spelling_errors  Explained in Search Engine
	mv_textcolor		Explained in Controlling Page Appearance
	mv_todo				Common to all forms, sets form action
	mv_todo.map         Contains form imagemap
	mv_todo.x           Set by form imagemap
	mv_todo.y           Set by form imagemap
	mv_vlinkcolor		Explained in Controlling Page Appearance

=head2 Order Report File

The order report file, "report", defines the layout of the order
report which gets mailed on the completion of the order. For example,

              Order Date: $date

                    Name: $name
           Email address: $email

        Shipping address: $addr
        Town, State, Zip: $town, $state $zip
                 Country: $country

Any input field from the order page can be included using the dollar
sign notation.

To prevent a value from being included in the order report, just add it
to the B<ReportIgnore> configuration directive.  

MiniVend defines some values for use in the search form -- they begin
with 'mv_' and are automatically ignored.

=head2 Sales Tax

MiniVend allows calculation of sales tax on a straight percentage basis.
To enable this feature, the directive I<SalesTax> is initialized with
the name of a field (or fields) on the order form.  Commonly, this is
zipcode and/or state:

    SalesTax    zip,state

This being done, MiniVend assumes the presence of a file F<salestax.asc>,
which contains a database with the percentages.  Each line of 
F<salestax.asc> should be a code (again, usually a five-digit zip or
a two letter state) followed by a tab, then a percentage. Example:

    default 0
    45056   .0525
    61821   .0725
    61801   .075
    IL      .0625
    OH      .0525
    WA      .08

Based on the user's entry of information in the order form, MiniVend will
look up (for our example SalesTax directive) first the zip, then the state,
and apply the percentage to the SUBTOTAL of the order (not including shipping).
It will add the percentage, then make that available with the [salestax]
tag for display on the order form. If no match is found, the entry 'default'
is applied -- that is normally 0, but can be anything.

If business is being done on a national basis, it is now common to have
to collect sales tax for multiple states.  If you are doing so, it is possible
to subscribe to a service which issues regular updates of the sales tax
percentages -- usually by quarterly or monthly subscription.  Such a
database can easily be converted to MiniVend format.

=head2 Custom Shipping

MiniVend allows custom shipping charges to be added to an order based
on the value of an entry in the database.  Currently only I<quantity> is
supported by the supplied database, though if a database with shipping
I<weight> is available, that is supported as well (weight must be a field
in the products.asc file).  To enable custom shipping, enter the field
that will be calculated in the I<CustomShipping> directive:

    CustomShipping  quantity

The shipping cost database is a tab-separated ASCII file with six fields --
code, text description, criteria (quantity or weight, for example),
minimum number, maximum number, and cost.  None of the fields
are case-sensitive.

    code        The unique identifier for that shipping method
    description Text to describe the method
    criteria    Whether it is for weight, quantity, country, or whatever
    minimum     The low bound of quantity/weight this entry applies to
    maximum     The high bound of quantity/weight this entry applies to
    cost        The total cost (or multiplier, if begins with 'x')

The cost is calcluated like this:

    1. The base code is selected. If there is more than one entry per
    code, numbers are appended.
    2. The criterion field is found -- if it is quantity, then it
    is in the quantity field of each item on the order form
    3. The quantity is determined, and if the quantity falls
    with in the minimum and maximum, the cost is then applied.
    4. If the cost is fixed, it is simply added.  If the cost
    field begins with an 'x', the cost is multiplied by the quantity.
    5. If no match is found, the 'default' entry is used.

An example would be this (the columns are lined up for your
reading convenience, the actual entries should have ONE tab
between fields!):

    default Slow Boat   quantity    1   99999999    3.00
    upsg1   UPS Ground  quantity    1   5           7.00
    upsg2   UPS Ground  quantity    6   10          10.00
    upsg3   UPS Ground  quantity    11  99999999    x .95
    upsb1   UPS Blue    quantity    1   5           12.00
    upsb2   UPS Blue    quantity    6   10          17.00
    upsb3   UPS Blue    quantity    11  99999999    x 1.60
    upsr1   UPS Red     quantity    1   5           17.00
    upsr2   UPS Red     quantity    6   10          22.00
    upsr3   UPS Red     quantity    11  99999999    x 2.10

If the user selected UPS Blue (code UPSB), and the quantity on the order
was 3, the cost of 12.00 from I<upsb1> would be applied.  If the
quantity were 7, the next entry from I<upsb2> would be selected, for a
cost of 17.00.  If the quantity were 15, I<upsb3> would be selected, and
the quantity of 15 multiplied by 1.60, for a total cost of 24.00.

If a default shipping mode other than 'default' is desired, enter
it into the I<DefaultShipping> directive:

    DefaultShipping     UPSG

This will make the <INPUT TYPE=RADIO NAME=mv_shipmode VALUE=upsg> entry
on the order form checked by default when the user starts the order process.

=head2 Tracking and Backend Order Entry

MiniVend has a tracking  option, enabled with the configuration
directive I<Tracking>.  Entered orders and page popularity are tracked.
The tracking database is also used to hold encrypted data such as credit
card numbers, expiration dates, and the encrypted MiniVend password.

The Tracking directive must be a non-blank value to enable tracking.  In
addition, if the tracking database is not yet initialized, the Tracking
directive is used to initialize the first order number to be placed in
the tracking database. After that initialization, the value of the next
order number is kept in the database (under the key I<mv_next_order>) and
incremented when an order is placed.  The incrementation is alpha-numeric,
so it is important to have leading zeros in any string value -- i.e., an
initial value of B<Order00009> will be incremented to B<Order00010>, while
an initial value of B<Order9> will be incremented to B<Ordes0>. Also, any
non-alphanumeric characters will be stripped -- B<Order_00000> becomes
B<Order00000>.

The tracking is done by entering information in the DBM database F<tracking> in
the product directory (I<ProductDir>). Orders are tracked under two keys,
the actual key (started by the Tracking Directive) and a key that prepends the
string "Backend" to the actual key. The entry in the actual key is a facsimile
of the emailed order report -- the Backend key is the values selected in the 
BackendOrder directive, combined with the actual ordered item codes and
quantities, separated by NUL characters (ASCII code 0).

To illustrate, take a MiniVend system that has tracking enabled with
these two configuration directives in the minivend.cfg file:

    Tracking        Order00001
    BackendOrder    name,address,city,state,zip,account,mv_shipmode

When the user places an order for quantity 2 of item number I<P-133>,
the tracking database will have two keys/values added:

 Key               Value
 ----------------  ----------------------------
 Order00001        (The order report, filled in -- see "Order Report File")
 BackendOrder00001 Joe J. User<NUL>123 Any St.<NUL>MainStreet<NUL>OH<NUL>
                   12345<NUL>Acct#123<NUL>P-133<NUL>2

If the customer left a credit card number with the SSL account information form
(see L<Order Security>), the credit card number and its associated expiration
date will be placed in two additional fields:

 Key               Value
 ----------------  ----------------------------
 CcOrder00001      (encrypted data)
 ExpOrder00001     (encrypted data)


The scheme allows a history of orders to be kept (the Order00001 key)
and a list of unentered orders (the BackendOrder00001 key, along with
the CcOrder00001 and ExpOrder00001 keys).  An external program can read
the tracking database and submit the orders to an order-entry system,
removing (or undefining) the BackendOrder, CcOrder, and ExpOrder keys
when finished. An rudimentary example script which displays the tracking
database is supplied as 'trackrpt' in the bin/ directory. This script
could be easily modified to actually perform batch order entry.

Page popularity is simply tracked by storing a count of accesses, with
the page name as the key.  No additional information is stored. It is
designed to give the catalog designer an idea of which features, pages,
and menus are popular, and which are rarely used.  Since individual page
accesses are tracked, it might also give marketing or sales an idea of
problems with product perception -- if an item were frequently looked
at, but rarely bought, it might be appropriate to re-write the catalog
page.

=head2 Order Security

MiniVend has several features that enable secure ordering via SSL
(Secure Sockets Layer). Despite their mystique, SSL servers are actually
quite easy to operate.  The difference between the standard HTTP server
and the SSL HTTPS server, from the standpoint of the user, is only in
the encryption and the specification of the URL -- https: is used for the
URL protocol specification instead of the usual http: designation.

B<IMPORTANT NOTE:>  MiniVend attempts to perform operations securely,
but no guarantees or warrantees of any kind are made! Since MiniVend
comes with Perl source, it is possible to modify the program to create
bad security problems. One way to minimize this possibility is to record
digital signatures, using MD5 or PGP, of F<minivend.pl>,
F<minivend.cfg>, and all modules included in minivend.pl (standard ones are
Vend/Server.pm, Vend/Imagemap.pm, Vend/Http.pm, Vend/lock.pm, and
possibly Des). Check them on a regular basis to ensure they have not
been changed.

MiniVend uses the I<SecureURL> directive to set the base URL for secure
transactions, and the I<VendURL> directive for normal non-secure transactions.
Secure URLs can be enabled for forms through the [process_target action secure]
element, pages through the [pagetarget page frame__secure] element, and
access to the secure account information form is available through the
[secure_order] element.

MiniVend incorporates additional security for credit card numbers.  Any field
on the order form which has B<credit_card> in its name will not be written
to disk unless it is encrypted.  Either an external encryption program, such
as crypt(1) or des(1), can be used, or for internal encryption, the Perl
I<Des> module can be used.  The Des module can be defined at program 
configuration time, or can be inserted in the F<minivend.pl> configuration
section as the line:

  use Des;

The Des module is available at the same sites as L<Perl Version 5>. It
also requires a functional F<libdes> library, which will be harder to
obtain.

To accept credit_card fields, you need to define several things in
F<minivend.cfg> (or with MAT). First, the directive I<CreditCards> needs
to be set to I<yes>. Also, I<Tracking> needs to be enabled, to provide a
place to store the credit card numbers as well as a place to store your
access password. I<EncryptProgram> also needs to be defined with at
least some value.  If using the internal F<Des> support, the entries
should look something like:

  CreditCards      Yes
  Tracking         Order00001
  EncryptProgram   internal

If you wish to use an external encryption program, recognize
that this is not nearly as secure as using the internal F<Des> option,
for the design of most encryption programs prevents secure transmission
of the password.  The password has to be sent on the command line, and
though MiniVend tries to hide it, not all operating systems will prevent
access to the password through the ps(1) command. If you decide this is
acceptable, here is an example EncryptProgram definition that will work
for many des(1) implementations:

  EncryptProgram   /usr/bin/des -e -k %p < %f

The C<%p> parameter indicates the location where the password will be placed
in the command line, and C<%f> is the placeholder for the input file name.
Consult your des(1) manual page for details on how the command line should be
constructed.

If your encryption program allows the password to be placed on the first
line of the text to be encrypted, omit the %p specification.  MiniVend will
send the password, followed by a newline, before sending the text to be
encrypted.  This is much more secure than a command line password, but your
encryption program may not allow this mode of operation.

If the I<CreditCards>, I<EncryptProgram> and I<Tracking> directives are
defined at program startup, MiniVend will prompt for a password before
starting the server.  This password is checked against a password
previously stored in the tracking database (if it exists), otherwise
MiniVend prompts for a second entry to verify a new password, which is
then stored in the tracking database.  Three tries can be made before
MiniVend gives up.

If encryption is not enabled, MiniVend will silently overwrite any fields
in the order form(s) with X characters.  This prevents non-authorized startups
from saving any sensitive information to disk.

=head2 Using Frames

MiniVend fully supports frames, the proposed extension to HTML 3.0. (Currently
only Netscape 2.0 and above browsers support frames.) Frames significantly
enhance the electronic catalog experience, since the user can maintain
a context -- with a search frame, a product details frame, a table-of-contents
frame, etc. The demo included with MiniVend is based on frames, though if
you access it with a non-frame browser it will operate perfectly well.

Frames are accessed by adding a TARGET element to a HREF, naming
the frame that the referenced URL should be placed in. MiniVend
produces targets with the pagetarget and areatarget elements, which
send target tags if frames are enabled (by a [frames_on] element.
Any frame name can be used, including the special frames of _top, _blank,
_parent, and _self.

As shown in the demo pages, the best way to accommodate both types of
browsers is by having an F<index.html> page that sets the beginning
frame set.  The <FRAMESET> and <FRAME> tags will be ignored by standard
browsers, which will read the HTML between the <NOFRAMES> and </NOFRAMES>
tags below.

The format of the first set of URLs passed to the frames is important - only
ONE MiniVend link must be called.  That sets the session ID for the user. If
two URLs were called, MiniVend would assign two session IDs to the user,
scrambling the context of their navigation.  From this single access,
all further references to MiniVend are made, though after the first access
multiple frame targets can be referenced.

This first MiniVend page that is accessed (with a frame browser) should
contain a [frames_on] element.  It is the only page that need (or should)
contain a [frames_on], which is persistent throughout the session. This
page should never be seen by a non-frame browser.

Subsequent accesses to MiniVend URLs will now contain the proper session
information, and as long as pagetarget or page elements are used to
pass the URLs, context will be maintained.

The [pagetarget page frame] element is used to pass target tags in hyperlinks.
The [areatarget page frame] element is used to pass target tags in imagemaps.
The [frames_on] and [frames_off] elements enable and disable frame operation.
The [framebase frame] element sets a base target for a page.

See the demo pages:

    fr_greet.html   Starting frame for frames-based browsers - has [frames_on]
    nf_greet.html   Turns off frames -- has [frames_off]
    reframe.html    Re-enables frames after they have been turned off

=head2 Controlling Page Appearance

MiniVend provides centralized page color and imagemap control through
use of the [body n] and [buttonbar n] elements. It also can place a random
message from a series of messages with the [random] element, and embed
help messages with the [help item] element.

The [body n] element selects a color scheme -- numbered from 1 to 15 --
that is set by the Mv_Background, Mv_TextColor, Mv_BgColor,
Mv_LinkColor, and Mv_VlinkColor directives. Each can contain up to 15
parameters, after an opening BEGIN. Here is an example:

    Mv_Background  BEGIN /images/blue_pap.gif
    Mv_BgColor     BEGIN none steelblue white
    Mv_LinkColor   BEGIN none white black
    Mv_TextColor   BEGIN none ltgreen blue
    Mv_VlinkColor  BEGIN none orange purple

The above sequence (set in the minivend.cfg file, or through MAT)
defines three color schemes, accessed with [body 1], [body 2], and [body 3]
elements in MiniVend pages.  The first scheme uses the file 
F</images/blue_pap.gif> as the background pattern, and keeps
the user's default colors for everything else.  It is called 
by a [body 1] element, which when expanded becomes <BODY
BACKGROUND="/images/blue_pap.gif>.

The second scheme defines no background pattern (there is only one file
in the Mv_Background directive), but defines a background color of 'steelblue',
with a text color of white, a link color of light green, and a visited link
color of orange. It is accessed by the [body 2] element, which when expanded
becomes <BODY BGCOLOR="steelblue" TEXT="white" LINK="ltgreen" VLINK="orange">.

The third color scheme is similar to the second, except defines
white-black-blue-purple for the four colors.  It is accessed with
a [body 3] element.

If there is no defined scheme for a body element (as there wouldn't be if
you put [body 4] in a page with the above schemes defined) MiniVend
simply outputs a standard <BODY> tag.

The user can also define their own colors if the Mv_customcolors
variable is set (upon a form submission).  See the supplied
F<control.html> page for an example of how to set custom colors.

Image maps can be supplied and similarly controlled with the [buttonbar n]
series of tags.  They are defined with the ButtonBars directive (also set
in minivend.cfg or with MAT), and take the form of a series of
file names in MiniVend format -- i.e., relative to the PageDir and
without a .html extension. To use the buttonbars, create a file 
with an IMG directive set with the USEMAP element and an associated
client-side image map (defined with <MAP> </MAP>. The [areatarget]
or [area] tags are used to set the URLs. An example:

    <IMG SRC="/sample/images/artbar0.gif" USEMAP="#ARTBAR0">
    <MAP NAME=ARTBAR0>
    <AREA COORDS="198,0,278,20" HREF="[areatarget fr_sel search]">
    <AREA COORDS="303,0,363,20" HREF="[areatarget fr_search search]">
    <AREA COORDS="388,0,442,20" HREF="[areatarget fr_greet main]">
    <AREA COORDS="473,0,537,20" HREF="[areatarget control main]">
    <AREA COORDS="0,0,560,20" NOHREF>
    </MAP>

If the above were saved in the file PageDir/bars/artbar0.html (where PageDir
is your MiniVend pages directory), you would be able to access this
imagemap in your pages with a [buttonbar 0] tag, at least after MiniVend
read this line in the configuration file:

    ButtonBars  bars/artbar0 bars/artbar1 bars/artbar2

The above entry allows you to define three imagemaps and access them in
your pages simply as [buttonbar 0], [buttonbar 1], and [buttonbar 2]. The
advantage of this scheme is central definition of a series of button bars
with only a few tags -- if you change your page colors or mapping, you
need only change one file and the change will roll over to all of your
catalog pages. Since some installations can number in the thousands
of catalog pages, using the pre-defined buttonbars can save a lot of
editing. (Server-side includes cannot be used to achieve the same thing
with MiniVend, since they wouldn't have the proper URLs.)

Imagemaps can also be defined on forms, with the special form variable
I<mv_todo.map>.  A series of map actions can be defined --
the action specified in the I<default> entry will be applied if none
of the other coordinates match. The image is specified with a standard
HTML 2.0 form field of type I<IMAGE>.  Here is an example:

 <INPUT TYPE="HIDDEN" NAME="mv_todo.map" VALUE="rect submit 0,0 100,20">
 <INPUT TYPE="HIDDEN" NAME="mv_todo.map" VALUE="rect cancel 290,2 342,18">
 <INPUT TYPE="HIDDEN" NAME="mv_todo.map" VALUE="default refresh">
 <INPUT TYPE="IMAGE" NAME="mv_todo" SRC="url_of_image">

All of the actions will be combined together into one image map with
NCSA-style functionality -- see the NCSA imagemap documentation for
details -- except that MiniVend form actions are defined instead
of URLs.  The standard actions are:

 submit   Submit order
 refresh  Refresh order page (update quantities, etc.)
 cancel   Cancel order and wipe credit card numbers
 return   Go to previous page (or page defined in mv_nextpage variable)
 control  Control help, colors, etc.
 search   Search for an item in the catalog

The [random] element, in conjunction with the Random directive in the
minivend.cfg file (or set with MAT), is similar to the
buttonbar tag, except it displays random messages or images.  It can be
used to place a random tip, hint, ad, or message, and can be any
legal HTML construct. It cannot contain MiniVend elements.

The [help tag] element, in conjunction with the Help directive in the
minivend.cfg file (or, of course, set with MAT), is similar to the
buttonbar tag, except it displays help messages or images, and is
keyed by item name.  The help can be contained in any of a series
of files defined in the Help directive. It can contain most MiniVend
elements.  The user can turn off help through a form -- see the F<control.html>
file for an example.

=head1 MINIVEND CONFIGURATION FILE

The VendRoot directory, specified in vend.pl, is the default location
of all of the MiniVend files. Unless changed in minivend.pl, the MiniVend
configuration file will be minivend.cfg in the VendRoot directory.

In the configuration file, these directives are B<required>:

=over 4

=item VendURL
Specifies the base URL that will run svend as a cgi-bin program.

        VendURL  http://__SERVER_NAME__/cgi-bin/vlink

=item MailOrderTo
Specifies the email address to mail completed orders to.

        MailOrderTo  orders@xyzcorp.com

=back

=head2 Optional Configuration Directives

These directives all have default values and are optional.

=over 4

=item ButtonBars
The ButtonBars directive allows you to define several preset button bars
that reside in files. The button bar file will usually contain an IMG
link, along with its associated client-side image map.  This allows you
to insert a [buttonbar 1] or [buttonbar 2] directive instead of the
equivalent HTML, and is designed to make it easy to change the look of
your pages with the change of one file. If the file does not exist at
program configuration time, the tag is simply stripped.  The line in the
F<minivend.cfg> file takes the form of the directive, followed by any
number of vend-style file names (relative to the PageDir, with no .html
suffix).

    ButtonBars  bars/button0 bars/button1 bars/button2 bars/button3

=item CreditCards
If set to I<Yes>, enables the encryption and saving of fields on
the order form that contain B<credit_card> in their name. See
L<Order Security>.  Default is I<no>, or not enabled.

    CreditCards  Yes

=item CustomShipping
If not blank, enables the addition of shipping charges based on
quantity or weight of items ordered.  See L<Custom Shipping>.

    CustomShipping  quantity

=item DefaultShipping
This sets the default shipping mode by initializing the variable
I<mv_ship_mode>. If not set in F<minivend.cfg>, it is I<default>.

    DefaultShipping  UPS

=item DescriptionTrim
This sets the text string after which no more of the product
description will be displayed in the search area. This is useful to
clip long descriptions, while still having them available to search.
The default is no trimming.

    DescriptionTrim  DESCRIPTION:

=item DisplayErrors
While all errors are reported in the error log file, you can also have
errors displayed by the browser. This is convenient while you are
testing your configuration.

    DisplayErrors  Yes

=item EncryptProgram
Enables the encryption of fields containing the string I<credit_card>
in their name.  If the I<Des> module is not included, should contain
a program command line specification that indicates how an external
encryption program will work. Two placeholders, C<%p> and C<%f>, are
defined, which are replaced at encryption time with the password and
temporary file name respectively.  See L<Order Security>.

    EncryptProgram   /usr/local/bin/des -E -k %p < %f

=item FinishOrder
A text string or image tag which is substituted
for the I<[finish_order]> tag.

    FinishOrder <IMG SRC="/icons/fin_ord.gif" ALT="FINISH ORDER">

=item FrameOrderPage
The MiniVend-style page name (i.e. no .html extension, relative
to I<PageDir>) which contains the special order page for when frames
are in use.  If not set (the default), the standard order page
will be used.

    FrameOrderPage  fr_order

=item FrameSearchPage
The MiniVend-style page name (i.e. no .html extension, relative
to I<PageDir>) which contains the special search page for when frames
are in use.  If not set (the default), the standard search page
will be used.

    FrameSearchPage  fr_resul

=item Glimpse
The pathname for the glimpse command, used if glimpse searches
are to be enabled.  If you wish to use F<glimpseserver>, you
must include the -C, -J,  and -K tags if they are needed.

    Glimpse  /usr/local/bin/glimpse -C -J srch_engine -K2345

=item Help
The Help directive allows you to define an unlimited number of help
messages or image specifications that reside in a file (or files).
It is called by the [help item] tag, where item is the first line
of a help file entry which looks like:

 help1
 This is help item one. It ends after a blank line, and
 is called by a [help help1] element embedded in a MiniVend page.
 
 help2
 This is help item two.  It ends after a blank line, and
 is called by a [help help2] element embedded in a MiniVend page.

If the file (or the entry) does not exist at program configuration time,
the tag is simply stripped.  The line in the F<minivend.cfg> file takes
the form of the directive, followed by any number of vend-style file
names (relative to the PageDir, with no .html suffix). See the demo
for an example of how it is used.

    Help  help/hintfile

=item ItemLinkDir
The directory where the [item_link] tag will base all of its
hot links in, relative to the pages directory. The default is blank,
basing all links in the pages directory.  If set, it needs
a trailing '/' to operate properly.

    ItemLinkDir   partno/

=item ItemLinkValue
Specifies the text or image you want to use to provide a clickable
link to the catalog page (in the search form, or other forms).

    ItemLinkValue   <IMG SRC="/images/gopage.gif" ALT="GO TO PAGE">

=item Mv_Background
Sets the background patterns to be used in the color schemes.  The 
line must begin with 'BEGIN', then is followed by up to 15 pattern
URLs containing background patterns to be used with the color schemes.
Each pattern should be separated by one or more spaces.
set to 0 to disable a background pattern for a particular scheme.
Remember, the schemes are numbered in the order that they occur.

    Mv_Background BEGIN /images/blue_pap.gif 0 /images/temple.jpg

=item Mv_BgColor
Sets the background colors to be used in the color schemes.  The line
must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for background color. The specification can be in #RRGGBB
color format, or can be one of the colors that will be recognized
(steelblue, white, etc.) Each color should be separated by one or more
spaces.  Set to 'none' to disable a color (use the browser default) for
a particular scheme.  Remember, the schemes are numbered in the order
that they occur.

    Mv_BgColor BEGIN  steelblue none white

=item Mv_LinkColor
Sets the link colors to be used in the color schemes.  The line
must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for link color. The specification can be in #RRGGBB
color format, or can be one of the colors that will be recognized
(steelblue, white, etc.) Each color should be separated by one or more
spaces.  Set to 'none' to disable a color (use the browser default) for
a particular scheme.  Remember, the schemes are numbered in the order
that they occur.

    Mv_LinkColor BEGIN  ltgreen none red

=item Mv_TextColor
Sets the text colors to be used in the color schemes. The colors are
accessed with the [body n] tag, where n is the color scheme number. The
line must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for text color. The specification can be in #RRGGBB color
format, or can be one of the colors that will be recognized (steelblue,
white, etc.) Each color should be separated by one or more spaces.  Set
to 'none' to disable a color (use the browser default) for a particular
scheme.  Remember, the schemes are numbered in the order that they
occur, beginning with 1.

    Mv_TextColor BEGIN  white none black

=item Mv_VlinkColor 
Sets the visited link colors to be used in the color schemes. The line
must begin with 'BEGIN', then is followed by up to 15 RGB color
specifications for visited link color.  The specification can be in
#RRGGBB color format, or can be one of the colors that will be
recognized (steelblue, white, etc.) Each color should be separated by
one or more spaces. Set to 'none' to disable a color (use the browser
default) for a particular scheme. Remember, the schemes are numbered in
the order that they occur.

    Mv_VlinkColor BEGIN  orange none blue

=item OrderFrame
The frame name where the order page will go, if frames are enabled.
If the frame doesn't exist, a new frame will be created.  The default
is '_blank', which creates a new browser window for the page.

    OrderFrame    _blank

=item OrderReport
When the completed order is ready to be mailed to the vendor, the
order report file describes the layout of the order report. Defaults
to I<report>.

    OrderReport  /data/order-form

=item PageDir
Location of catalog pages. Defaults to the pages subdirectory in the
VendRoot directory.

    PageDir  /data/catalog/pages

=item PriceCommas
If you desire no commas in your price numbers (for the [item_price] tag)
set this to 'no'. The default is to put commas in.

    PriceCommas  no

=item ProductDir
Location of the product files. Defaults to the products subdirectory
of the VendRoot directory.

    ProductDir  /data/catalog/for-sale

=item Random
The Random directive allows you to define an unlimited number of random
messages or image specifications that reside in files. It is called by
the [random] tag.  You don't know which one will show up! Even I don't,
it is random.  If the file does not exist at program configuration time,
the tag is simply stripped.  The line in the F<minivend.cfg> file takes
the form of the directive, followed by any number of vend-style file
names (relative to the PageDir, with no .html suffix).

    Random  rand/message1 rand/message2 rand/message3 rand/message4

=item ReadPermission and WritePermission
By default, only the user account that MiniVend runs under (as set by the
setuid permission on svend) can read and write files created by MiniVend.
WritePermission and ReadPermission can be set to 'user', 'group', or
'world'.

    WritePermission  group
    ReadPermission   group

=item ReportIgnore
A comma-separated list of items you don't want to have sent by email on
the order report. Default is blank, or none. Fields beginning with
'mv_', the MiniVend special variables, are automatically ignored.

    ReportIgnore  credit_card_no

=item RequiredFields
A comma-separated list of items you want to make sure the customer fills
in before an order can be submitted.  If an empty field is found when
the customer submits the order, the special page F<needfield.html> will
be displayed to request that they enter the information. No default.

    RequiredFields  name,company,email

=item SalesTax
If non-blank, enables automatic addtion of sales tax based on the order
form.  The value is a comma-separated list of the field names (as placed
in order.html), in priority order, which should be used to look up sales
tax percentage in the salestax.asc database. This database is not
supplied with MiniVend -- it is typically received from a third party by
quarterly or monthly subscription.

    SalesTax    zip,state

=item ScratchDir
The directory where scratch files will be written, notably cached
searches. Defaults to VendRoot/etc.

    ScratchDir  /tmp

=item SearchOverMsg
A string that is substitued for a [search_over_msg] tag, used to
indicate that the search engine returned more than the number
of items it was limited to.

    SearchOverMsg    You had more than

=item Searchframe
The frame name where search results will go, if frames are enabled.
If the frame doesn't exist, a new frame will be created.  The default
is 'main'.

    SearchFrame    main

=item SecureURL
The base URL for secure forms/page transmissions.  Normally it is
the same as I<VendURL> except for the F<https:> protocol definition.
Default is blank, disabling secure access.

    SecureURL	https://machine.com/xyzcorp/cgi-bin/vlink

=item SendMailProgram
Specifies the program used to send email. Defaults to
'/usr/lib/sendmail'.

    SendMailProgram  /bin/mailer

=item SessionDatabase
When storing sessions in a DBM database, specify the base name of the
DBM file to use. The file extensions of .pag, .dir, or .gdbm
(depending on the DBM implementation used) will be appended.

    SessionDatabase  session-data

=item SessionExpire
A customer can exit their browser or leave the catalog pages at any
time, and no indication is given to the HTTPD server aside from the
lack of further requests that have the same session id. Old session
information needs to be periodically expired. The SessionExpire
specifies the minimum time to keep track of session information.
Defaults to one day.

    SessionExpire  4 hours

=item Shipping
Specifies a shipping charge to add onto the total price for items
ordered. If you do not want to include a fixed shipping charge on the
order page, leave this 0 and do not include the [shipping] element in
the order page. Defaults to 0.  Overridden by the I<CustomShipping>
directive.

    Shipping        5.00

=item Tracking
Enables order and popularity tracking when entered, as well as enabling
password and credit card encryption for order security (in combination
with the I<EncryptProgram> directive). Its value is the initial order
number that will be used as the beginning key for orders in the tracking
database. See L<Tracking and Backend Order Entry> and L<Order Security>.

    Tracking        Order100001

=item UseCode
This determines whether the part number field in the ASCII product file
will be used to determine the link to the item for the [item_link] tag.
If set, this has the effect of creating a different HTML page link for
every part number.  If not set (the default), the [item_link] tag
uses the value of the last field in the ASCII product file as the link
value.  This option can be used to great effect with a program which
automatically creates catalog pages from the database.

    UseCode    yes

=back

=head2 Required Pages

The following pages need to be present in the pages directory. See the
sample subdirectory for examples.

=over 4 

=item badsearch.html
The error page displayed if there is a system or user error with the search
engine.

=item canceled.html
The page displayed by MiniVend when an order has been canceled by
the user.

=item catalog.html
The main catalog page presented by MiniVend when another page is
not specified.

=item confirmation.html
After the order is completed, the confirmation page is
displayed.

=item failed.html
If the sendmail program could not be invoked to email the
completed order, the failed.html page is displayed. (Sadly we
don't know if the email was successfully delivered).

=item flypage.html
If the catalog page for an item was not found when its [item_link]
is clicked, this page is used as a template to build an on-the-fly
page. See I<On-the-fly Catalog Pages>.

=item interact.html
Displayed if an unexpected response was received from the
browser, such as not getting expected fields from submitting a
form. This would probably happen from typos in the html pages,
but could be a browser bug.

=item missing.html
This page is displayed if the URL from the browser specifies a
page that does not have a matching .html file in the pages
directory. This can happen if the customer saved a bookmark to
a page that was later removed from the database.

=item needfield.html
Displayed if the user did not fill in a required field in the
order form.  See L<REQUIRED FIELDS>.

=item noproduct.html
This page is displayed if the URL from the browser specifies
the ordering of a product code which is not in the products
file.

=item order.html
This page is displayed when the customer orders an item. It contains
all of the customer-entered values, as well as any default items
like I<DefaultShipping>.  If frames are in use, the special
order page can be configured with the directive I<FrameOrderPage>. This
allows the item list to be in a separate window from the name/address/account
information.

=item search.html
Contains the page for the search engine results.  Also required
is an input page, which can be the same as search.html or
an additional page.  Five sample input pages are supplied with
the demo - nf_sel.html, nf_search.html, selframe.html, schframe.html,
and fr_comb.html.  An alternate fr_resul.html is a search page for
the full-featured demo -- see I<FrameSearchPage>.

=item violation.html
Displayed if a security violation is noted, such as an attempt to
submit a credit card number on a non-secured form.

=back

=head1 ADMINISTERING MINIVEND

There is a supplied administration utility, F<MAT>, the MiniVend
Administration Tool, which has its own documentation.  It can perform
any of the following operations via a web browser.

=head2 Starting, Stopping, and Re-starting the Server

When running in server mode, MiniVend operates much faster. Since
it is loaded once, and keeps some of the database files open continuously,
it merely needs to field the CGI request (via vlink) and perform
the appropriate function.  But because it is running, some of the 
databases are locked -- and you will need to unlock them to perform
administrative functions. MAT or the supplied scripts will do that
for you.

Several utilities are supplied in the VendRoot/bin directory:

    stop       Stops the server
    start      Starts the server
    restart    Re-starts the server (force re-read of configuration)
    trackrpt   Dumps the tracking database (example script)

NOTE: restart does NOT re-build the database.

The following commands assume that you made /usr/local/lib/minivend
your MiniVend base directory.

To start the server:

    /usr/local/lib/minivend/bin/start

Assuming the server starts correctly, you will see a message stating
the process ID it is running under -- that information is also sent
to /usr/local/lib/minivend/error.log.

To re-start the server:

    /usr/local/lib/minivend/bin/restart

This is typically done to force MiniVend to re-read its configuration.
You will see a message stating that a HUP signal has been sent to
the process ID the server is running under -- that information is also sent
to /usr/local/lib/minivend/error.log.  Check the error.log file for
confirmation that the server has restarted properly.

To stop the server:

    /usr/local/lib/minivend/bin/stop

You will see a message stating that a TERM signal has been sent to
the process ID the server is running under -- that information is also sent
to /usr/local/lib/minivend/error.log.  Check the error.log file for
confirmation that the server has actually stopped.

=head2 Making the Product Database

As of MiniVend 1.02, the product database is made automatically upon
server startup, and no special command is required.  I<You must not>
I<use the old makedbm command>.

=head2 Expiring Sessions

You should periodically expire old sessions to keep the session
database file from growing too large. Either manually do this
with MAT, or directly execute minivend.pl to do this:

        /usr/local/lib/minivend/minivend.pl -expire

You could add a crontab entry such as the following:

        # once a day at 4:40 am
        40 4 * * *    perl /usr/local/lib/minivend/minivend.pl -expire

MiniVend will wait until the current transaction is finished before
expiring, so you can do this at any time without disabling web access.
Any search cache files for the affected session (kept in I<ScratchDir>)
will be removed as well.

=head2 INDEX OF ITEMS

I<[area pg]>

I<[areatarget pg frame]>

I<badsearch.html>

I<__SERVER_NAME__>

I<[body n]>

I<[buttonbar n]>

I<ButtonBars>

I<canceled.html>

I<catalog.html>

I<cgi-bin>

I<CGIUSER>

I<confirmation.html>

I<CreditCards>

I<CustomShipping>

I<DefaultShipping>

I<[description code]>

I<DescriptionTrim>

I<DisplayErrors>

I<EncryptProgram>

I<failed.html>

I<[finish_order]>

I<FinishOrder>

I<flypage.html>

I<FrameOrderPage>

I<[frames_off]>

I<[frames_on]>

I<FrameSearchPage>

I<Glimpse>

I<Help>

I<[if_field fieldname]>

I<interact.html>

I<[item_code]>

I<[item_description]>

I<[item_field fieldname]>

I<[item_increment]>

I<[item_link code]>

I<[item_price]>

I<[item_quantity]>

I<ItemLinkDir>

I<ItemLinkValue>

I<LINK_FILE>

I<LINK_TIMEOUT>

I<MailOrderTo>

I<missing.html>

I<[more]>

I<[more_list]>

I<Mv_Background>

I<Mv_BgColor>

I<mv_case>

I<mv_doit>

I<mv_exact>

I<Mv_LinkColor>

I<mv_matchlimit>

I<mv_orsearch>

I<mv_searchspec>

I<mv_searchtype>

I<mv_spelling_errors>

I<Mv_TextColor>

I<Mv_VlinkColor >

I<needfield.html>

I<NET_START>

I<[nitems]>

I<noproduct.html>

I<[order code]>

I<OrderFrame>

I<order.html>

I<OrderReport>

I<PageDir>

I<[page pg]>

I<[pagetarget pg frame]>

I<PERL>

I<PERL>

I<[price code]>

I<PriceCommas>

I<[process_search]>

I<ProductDir>

I<[quantity_name]>

I<[random]>

I<Random>

I<ReadPermission and WritePermission>

I<ReportIgnore>

I<RequiredFields>

I<[salestax]>

I<SalesTax>

I<ScratchDir>

I<[search_list]>

I<Searchframe>

I<search.html>

I<SearchOverMsg>

I<SecureURL>

I<SendMailProgram>

I<SessionDatabase>

I<SessionExpire>

I<Shipping>

I<[subtotal]>

I<[total_cost]>

I<Tracking>

I<UseCode>

I<[value field]>

I<VEND>

I<VEND>

I<VendURL>

I<violation.html>


=head1 AUTHORS

     Original author of Vend is Andrew Wilcox, F<awilcox@world.std.com>
     MiniVend is based on Vend 0.2, with portions from Vend 0.3,
     and is enhanced and modified extensively by Mike Heins, F<mikeh@iac.net>

