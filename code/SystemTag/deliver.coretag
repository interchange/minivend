UserTag deliver Order type
UserTag deliver HasEndTag
UserTag deliver addAttr
UserTag deliver Routine <<EOR
sub {
	my ($type, $opt, $body) = @_;
	my $out;
	use vars qw/$Tag/;
	$Tag ||= new Vend::Tags;
	if($opt->{file}) {
		$type ||= Vend::Util::mime_type($opt->{file});
		return undef unless -f $opt->{file};
		my $tmp = readfile($opt->{file});
		$out = \$tmp;
	}
	elsif(ref $body) {
		$out = $body;
	}
	elsif($body) {
		$out = \$body;
	}
	$type ||= 'application/octet-stream';
	$Tag->tag( { op => 'header', name => 'Content-Type', content => $type } );

	## This is a bounce, returns
	if($opt->{location}) {
		$Tag->tag( {	op => 'header',
							name => 'Status',
							content => $opt->{status} || '302 moved',
						} );
		$Tag->tag( {	op => 'header',
							name => 'Location',
							content => $opt->{location},
						} );
		$Vend::Sent = 1;
		return 1;
	}

	if($opt->{get_encrypted}) {
		$opt->{get_encrypted} = 1 unless $opt->{get_encrypted} =~ /^\d+$/;
		my $idx = $opt->{get_encrypted};
		while ($idx--) {
			$$out =~ s/.*?(---+BEGIN PGP MESSAGE--+)/$1/s;
		}
		$$out =~ s/(---+END PGP MESSAGE---+).*/$1\n/s;
	}

	$Vend::StatusLine = $Vend::StatusLine ? "$Vend::StatusLine\n" : '';
	$Vend::StatusLine .=  "Content-Type: $type";
	
	if($opt->{extra_headers}) {
		my @lines = grep /\S/, split /[\r\n]+/, $opt->{extra_headers};
		for(@lines) {
			my ($header, $val) = split /:/, $_;
			$Tag->tag( {	op => 'header',
						name => $header,
						content => $val,
					} );
		}
	}
	::response($out);
	$Vend::Sent = 1;
	return 1;
}
EOR
