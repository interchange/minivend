UserTag write-page Documentation <<EOD

=head2 write-page

usage: [write-page file=name]content[/write-page]

Writes a file C<name> in the catalog directory. Name must be relative; it will
return undef if the file name is absolute or contains C<..>.

EOD

UserTag write-page Order page
UserTag write-page addAttr
UserTag write-page hasEndTag
UserTag write-page Routine <<EOR
sub {
	my ($page, $opt, $data) = @_;
	$opt ||= {};
	use vars qw/$Tag $CGI/;
	$page = $Tag->filter('filesafe', $page);

	my $page_id = "$Vend::Cfg->{VendRoot}/$page";
	$page_id =~ s!^$Vend::Cfg->{PageDir}/!!;
	$page_id =~ s!\.html?$!!;

	my $tmpdir  = $Vend::Cfg->{ScratchDir} || 'tmp';
	my $pagedir = $Vend::Cfg->{PageDir} || 'pages';
	for(\$tmpdir, \$pagedir) {
		$$_ =~ s!^$Vend::Cfg->{VendRoot}/!!;
	}
	$tmpdir .= "/pages/$Session->{id}";

	$page .= $Vend::Cfg->{HTMLsuffix}
		unless $page =~ /$Vend::Cfg->{HTMLsuffix}$/;

#Debug("final page=$page page_id=$page_id");
	
	my $ptab = $Vend::Cfg->{PageTables};
	my $db;
	my $ok;
	my $wrote_db;
	my $wrote_bak;

	if($opt->{publish} and $ptab and $db = database_exists_ref($ptab->[0]) ) {
		my $map = $Vend::Cfg->{PageTableMap};
		my ($cf, $bf, $sf, $ef, $tf) = @{$map}{qw/
												code
												base_page
												show_date
												expiration_date
												page_text
												/};
		my $date = $Tag->time( { body => '%Y%m%d%H%M%S' } );
		my $now  = time;
		my %record = (
			$bf => $page_id,
			$tf => $data,
			$sf => $opt->{show_date},
			$ef => $opt->{expiration_date},
		);
		my $curr = $db->row_hash($page_id) || {};
		my $code;
		my $bukey;
		if(! $curr->{$cf}) {
			$code = $page_id;
		}
		elsif (! $opt->{show_date} or $opt->{show_date} lt $date) {
			$bukey = "$page_id.$now";
			$code = $page_id;
		}
		else {
			$code = "$page_id.$now";
		}

		if($bukey) {
			$wrote_bak = $db->clone_row($page_id, $bukey);
		}

		$wrote_db = 1;
		$ok = $db->set_slice($code, \%record);
	}
	elsif (! $opt->{publish}) {
		$page = "$tmpdir/$page";
	}

	if(! $wrote_db) {
		$ok = $Tag->write_relative_file($page, $data);
	}

	if(! $ok) {
#Debug("failed to write page=$page dbwrite=$wrote_db");
		$::Scratch->{ui_error} = errmsg("Couldn't save page %s.", $page);
	}
	elsif($opt->{publish}) {
		my $unlink = $Tag->unlink_file("$tmpdir/$page");
#Debug("unlink=$unlink file=$tmpdir/$page");
	}
#::logDebug("wrote page=$page page_id=$page_id db=$wrote_db");

	return $ok;
}
EOR

