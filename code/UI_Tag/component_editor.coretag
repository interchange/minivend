UserTag component-editor Order item
UserTag component-editor addAttr
UserTag component-editor hasEndTag
UserTag component-editor Routine <<EOR

sub ce_read_components {
	my ($spec, $opt) = @_;
	$opt ||= {};
	$opt->{components} = 1;
	return ce_read_template($spec, $opt);
}

sub ce_read_template {
	my ($spec, $opt) = @_;
	$opt ||= {};

	my $table = $opt->{table} || $::Variable->{UI_COMPONENT_TABLE};
	my $tdir	=  $opt->{template_dir}
				|| $::Variable->{UI_TEMPLATE_DIR} || 'templates';
	my $cdir	=  $opt->{component_dir}
				|| $::Variable->{UI_COMPONENT_DIR} || "$tdir/components";
	my $group = $opt->{group};

	my $tmpdir  = $Vend::Cfg->{ScratchDir} || 'tmp';
	for(\$tmpdir, \$tdir, \$cdir) {
		$$_ =~ s!^$Vend::Cfg->{VendRoot}/!!;
	}
	$tmpdir .= "/components/$Vend::Session->{id}";

	my $data;
	my %out;
	my @out;

	my $db;
	$db = database_exists_ref($table) if $table;

	my @data;
	if($opt->{components}) {

		if(! $db) {
			my @files = glob("$tdir/components/*");
			for(@files) {
				push @data, 	
					 Vend::Util::readfile($_, $Global::NoAbsolute, 0);
			}
		}
		else {
			my @atoms;
			push @atoms, "select * from $table";
			push @atoms, "where comp_type = '$opt->{type}'" if $opt->{type};
			push @atoms, "where comp_group = '$opt->{group}'" if $opt->{group};
			my $q = join " ", @atoms;
			my $ary = $db->query({ sql => $q, hashref => 1 });
			for(@$ary) {
				push @data, $_->{comp_text};
			}
		}
	}
	elsif($spec) {
		if(! $db) {
			my @files = grep -f $_, glob("$tdir/*");
			for(@files) {
				push @data, 	
					 Vend::Util::readfile($_, $Global::NoAbsolute, 0);
			}
		}
		else {
			my @atoms;
			push @atoms, "select * from $table";
			push @atoms, "where code = '$spec'";
			my $q = join " ", @atoms;
			my $ary = $db->query({ sql => $q, hashref => 1 });
			for(@$ary) {
				push @data, $_->{comp_text};
			}
		}
	}

	my $might_be_single;
	if(scalar @data == 1) {
		$might_be_single = 1;
	}

	foreach my $data (@data) {
		next unless length($data);

		my $ref = {};
		$data =~ m{\[comment\]\s*(ui_.*?)\[/comment\]\s*(.*)}s;
		my $structure = $1 || '';
		$ref->{ui_current_content} = $2 if $opt->{content};
		next unless $structure;
		my @lines = split /\n/, $structure;
		my $found;
		for(;;) {
			my $i = -1;
			for(@lines) {
				$i++;
				next unless s/\\$//;
				$found = $i;
				last;
			}
			last unless defined $found;
			if (defined $found) {
				my $add = splice @lines, $found + 1, 1;
#::logDebug("Add is '$add', found index=$found");
				$lines[$found] .= $add;
#::logDebug("Complete line now is '$lines[$found]'");
				undef $found;
			}
		}
		$ref->{ui_definition} = join "\n", @lines;
		my $current;
	
		for(@lines) {
			if(/^\s*ui_/) {
				my ($el, $el_item, $el_data) = split /\s*:\s*/, $_;
#::logDebug("found el=$el el_item=$el_item el_data=$el_data");
				if(defined $el_data) {
					$ref->{$el} = { } if ! ref($ref->{$el});
					$ref->{$el}{$el_item} = $el_data;
				}
				else {
					$ref->{$el} = $el_item;
				}
			}
			elsif ( /^(\w+)\s*:\s*(.*)$/) {
				$current = $1;
				$ref->{element}{$current} = $2;
				$ref->{ui_display_order} = [] if ! $ref->{ui_display_order};
				push @{$ref->{ui_display_order}}, $current;
			}
			elsif( /^\s+(\w+)\s*:\s*(.*)/ ) {
				my ($fn, $fv) = ( lc($1), $2 );
				$ref->{$fn}{$current} = $fv;
			}
		}
		push @out, $ref;
	}

	if(wantarray) {
		return @out;
	}
	elsif($opt->{single} or $might_be_single) {
		return $out[0];
	}
	else {
		return \@out;
	}
}

sub {
	my ($item, $opt, $template) = @_;
	my %opt = ( junk => 1);
	return ::uneval(ce_read_template('*', \%opt));

#	package Vend::Interpolate;
#	use vars qw/$Values $Scratch $Db $Tag $Config $CGI $Variable $safe_safe/;

#	init_calc() if ! $Vend::Calc_initialized;

	my @messages;
	my @errors;

	my $tref;
	my $template_dir	=  $opt->{template_dir}
						|| $::Variable->{UI_TEMPLATE_DIR}
						|| 'templates';

	if($opt->{template}) {
		#$tref;
	}
	my $rowcount = 0;
	my $rowdiv = $opt->{across} || 1;
	my $span = $rowdiv * 2;
	my $oddspan = $span - 1;
	$opt->{table_width} = '90%' if ! $opt->{table_width};
	$opt->{left_width} = '30%'  if ! $opt->{left_width};

	if (! $opt->{inner_table_width}) {
		if($opt->{table_width} =~ /%/) {
			$opt->{inner_table_width} = '100%';
		}
		elsif ($opt->{table_width} =~ /^\d+$/) {
			$opt->{inner_table_width} = $opt->{table_width} - 2;
		}
		else {
			$opt->{inner_table_width} = $opt->{table_width};
		}
	}

		
}
EOR
