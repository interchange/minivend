GlobalSub <<EOF
sub flycat {
	use Vend::FlyCat;
	return undef if $Vend::InternalHTTP;
	$Vend::Session->{return_value} = Vend::FlyCat::check_items(@_) || undef;
}
EOF


UserTag  dv  Order field
UserTag  dv  PosNumber 1
UserTag  dv  Routine <<EOR
sub {
	my $field = shift;
	if($field =~ /^\s*[\[_]/) {
		$field = Vend::Interpolate::interpolate_html($field);
	}
	$field =~ s/\s+//g;
	return Vend::Data::database_field(
		'vendor',
		$Vend::Cfg->{Variable}{STORE_ID},
		$field,
		);
}
EOR

UserTag  if-dv  Order field
UserTag  if-dv  PosNumber 1
UserTag  if-dv  HasEndTag 1
UserTag  if-dv  Routine <<EOR
sub {
	my ($field, $stuff) = @_;
	my $reverse = 0;
	$field =~ s/^\s*!\s*// and $reverse = 1;
	if($field =~ /^\s*[[_]/) {
		$field = Vend::Interpolate::interpolate_html($field);
	}
	$field =~ s/\s+//g;
	Vend::Data::database_field(
		'vendor',
		$Vend::Cfg->{Variable}{STORE_ID},
		$field,
		)
	and
	return Vend::Interpolate::pull_if($stuff, $reverse);
	return Vend::Interpolate::pull_else($stuff, $reverse);
}
EOR

UserTag  ups-query  Order  mode origin zip weight country
UserTag  ups-query  Routine <<EOR
sub {
 	my( $mode, $origin, $zip, $weight, $country) = @_;
	BEGIN {
		eval {
			require Business::UPS;
			import Business::UPS;
		};
	};
	$country = uc $country;
	$country = undef if $country eq 'US';
#::logGlobal("calling with: " . join("|", $mode, $origin, $zip, $weight, $country));
	my ($shipping, $zone, $error) =
		getUPS( $mode, $origin, $zip, $weight, $country);
#::logGlobal("received back: " . join("|", $shipping, $zone, $error));
	if($error) {
		$Vend::Session->{ship_message} .= " $mode: $error";
		return 0;
	}
	return $shipping;
}
EOR

UserTag raw_subtotal Order noformat
UserTag raw_subtotal Routine <<EOF
sub {
	my $noformat = shift;
	my $save_entire = delete $Vend::Session->{discount}{ENTIRE_ORDER};
	my $save_all    = delete $Vend::Session->{discount}{ALL_ITEMS};
	my $sub = Vend::Interpolate::subtotal();
	$Vend::Session->{discount}{ENTIRE_ORDER} = $save_entire
		if $save_entire;
	$Vend::Session->{discount}{ALL_ITEMS} = $save_all
		if $save_all;
	return $noformat ? $sub : Vend::Util::currency($sub);
}
EOF

UserTag fcounter Order file
UserTag fcounter Routine <<EOF
sub {
    my $file = shift || 'etc/counter';
    $file = $Vend::Cfg->{VendRoot} . "/$file"
        unless index($file, '/') == 0;
    my $ctr = new File::CounterFile $file;
    return $ctr->inc();
}
EOF

UserTag mkdir Order dir
UserTag mkdir Routine <<EOR
sub {
	my $dir = shift;
	
    my $mask  = $Vend::Cfg->{FileCreationMask};
    my $xmask = $mask >> 2;
    $xmask &= 0111;
    $mask = $mask | $xmask;

    if (mkdir $dir, $mask) {
		return "$dir created.";
	}
	else {
		return "$dir creation failed: $!";
	}
}
EOR

UserTag tabbed Interpolate 1
UserTag tabbed HasEndTag   1
UserTag tabbed Order fields
UserTag tabbed Routine <<EOR
sub {
	my ($fields, $text) = @_;
	$text =~ s/^\s+//;
	$text =~ s/\s+$//;
	my @fields;
	@fields = split /\r?\n/, $text;
	if($fields) {
		while (scalar @fields < $fields) {
			push @fields, '';
		}
	}
	return join "\t", @fields;
}
EOR

UserTag fly-tax PosNumber 1
UserTag fly-tax Order area
UserTag fly-tax AttrAlias area state
UserTag fly-tax Routine <<EOR
sub {
	my ($area) = @_;
	if(! $area) {
		my $zone = $Vend::Cfg->{SalesTax};
		while($zone =~ m/(\w+)/g) {
			last if $area = $::Values->{$zone};
		}
	}
	return 0 unless $area;
	my $rates = $Vend::Cfg->{Variable}{TAXRATE} || 
				Vend::Data::database_field(
					'vendor',
					$Vend::Cfg->{Variable}{STORE_ID},
					'tax_rates',
					);
	my $taxable = $Vend::Cfg->{Variable}{TAXSHIPPING} || 
					Vend::Data::database_field(
					'vendor',
					$Vend::Cfg->{Variable}{STORE_ID},
					'tax_shipping',
					);
	$rates =~ s/^\s+//;
	$rates =~ s/\s+$//;
	$area =~ s/^\s+//;
	$area =~ s/\s+$//;
	my (@rates) = split /\s*,\s*/, $rates;
	my $rate;
	for(@rates) {
		my ($k,$v) = split /\s*=\s*/, $_, 2;
		next unless "\U$k" eq "\U$area";
		$rate = $v;
		$rate = $rate / 100 if $rate > 1;
		last;
	}
	return 0 unless $rate;
	my $amount = Vend::Interpolate::taxable_amount();
	$amount   += Vend::Interpolate::shipping()
		if $taxable =~ m{(^|[\s,])$area([\s,]|$)}i;
	return $amount * $rate;
}
EOR
