# Set global defaults for UI images location
Variable UI_IMAGE_DIR /interchange-5/
Variable UI_IMAGE_DIR_SECURE /interchange-5/

# Set the base for the UI pages
Variable UI_BASE admin
Variable UI_HELP_TABLE ichelp
#Variable UI_HELP_URL http://other-help-host/...

Variable UI_STATE_TABLE   state
Variable UI_COUNTRY_TABLE country

# This one is MV because used internally as well
Variable MV_OPTION_TABLE options

# Load individual locale settings.
# Comment this out to remove language selection box from login page.
include lib/UI/locales/*_*.cfg

# Set up for default locale
Locale en_US MV_LANG_NAME English

# instruct Interchange to use this directory as alternative
# for searching Interchange pages
TemplateDir lib/UI/pages

# This tag is here to initialize the imports
UserTag reconfigure Order table file
UserTag reconfigure Routine <<EOR
use UI::Primitive;
use Vend::Table::Editor;
*ui_check_acl = \&UI::Primitive::ui_check_acl;
*ui_acl_enabled = \&UI::Primitive::ui_acl_enabled;
*get_ui_table_acl = \&UI::Primitive::get_ui_table_acl;
sub {
	my ($table, $file) = @_;
	my $recon = $CGI::script_name;
	if($table and $file) {
		$recon .= " $table $file";
	}
	Vend::Util::logData("$Global::RunDir/reconfig", $recon)
			and return "SUCCESS";
	return "FAILED";
}
EOR

GlobalSub <<EOS
sub admin_links {
	return unless $Vend::admin;
	my $tmpd = $Vend::Cfg->{ScratchDir};
	$tmpd .= "/previews/$Vend::SessionID";
#::logDebug("tmpd = $tmpd");
	$Vend::Cfg->{PreviewDir} = $tmpd if -d $tmpd;
#::logDebug("PreviewDir=$Vend::Cfg->{PreviewDir}");
	$::Variable->{ADL_SUFFIX} = $Vend::Cfg->{HTMLsuffix};
	$::Variable->{ADL_PAGE} = $::Variable->{ADL_PAGE_TEMPLATE} || <<EOF;
[page href="admin/content_editor" form="
			ui_name=[var MV_PAGE 1][var ADL_SUFFIX]
			ui_type=page
		"][loc]edit[/loc]&nbsp;[loc]page[/loc]</A>
[page href="[var MV_PAGE 1]" form="
			ui_mozilla_edit=1
		"][loc]show&nbsp;tags[/loc]</A>
EOF

	$::Variable->{ADL_COMPONENT} = $::Variable->{ADL_COMPONENT_TEMPLATE} || <<EOF;
[page href="admin/content_editor" form="
			ui_name=[contol component]
			ui_type=component
		"][loc]edit[/loc]&nbsp;[control component]</A>
EOF

	$::Variable->{ADL_ITEM} = $::Variable->{ADL_ITEM_TEMPLATE} || <<EOF;
<a href="[area
			href=admin/item_edit
			form=|
				item_id=[item-code]
				ui_return_to=index
			|
		]">[loc]edit[/loc]&nbsp;[loc]item[/loc]</A>
EOF
	$::Variable->{ADL_MENU} = $::Variable->{ADL_MENU_TEMPLATE} || <<EOF;
<a class="[control link_class]"
	href="[area
			href=admin/menu_editor
			form=|
				qmenu_name=[either][control menu_name][or][var MV_PAGE 1][/either]
			|
		]">[loc]edit[/loc]&nbsp;[loc]menu[/loc]</A>
EOF

	if($CGI::values{ui_mozilla_edit}) {
		$::Pragma->{init_page} = 'show_tags_for_edit';
	}
	return;

}
EOS

GlobalSub <<EOS
sub show_tags_for_edit {
	my $html = shift;
	$$html =~ s{(<!--+\s*BEGIN\s+CONTENT\s*--+>)}{[strip reparse=0]$1};
	$$html =~ s{(<!--+\s*END\s+CONTENT\s*--+>)}{$1\[/strip]};
}
EOS

ActionMap admin_publish <<EOR
sub {
	require HTML::HeadParser;
	my $path = shift;
#::logDebug("Path is $path");

	use vars qw/
		$Tag
	/;
	
#::logDebug("env is " . ::uneval(Vend::Dispatch::http()->{env}));

	$Vend::Extension and $path .= $Vend::Cfg->{HTMLsuffix};

	unless($CGI::request_method eq 'PUT') {
		$Tag->deliver('text/html', { status => "405 Not Implemented" }, 0);
		logError("admin_publish expecting PUT.");
		return;
	}

	unless($Vend::admin) {
		$Tag->deliver('text/html', { status => "403 forbidden" }, 0);
		logError("PUT by non-admin, quitting.");
		return;	
	}

	my $mimetype = Vend::Util::mime_type($path);

	my $publish_dir;
	my $icpage;
	my $umask;
	my $orig_umask;

	if($mimetype eq 'text/html') {
		$icpage = 1;
		$publish_dir = $::Variable->{PUBLISH_PUT_PAGES}  || 'pages';
		unless($Tag->if_mm('pagematch', $path)) {
			$Tag->deliver('text/html', { status => "403 forbidden" }, 0);
			logError("User %s not authorized for page %s.", $Vend::username, $path);
			return;	
		}
	}
	else {
		$publish_dir = $::Variable->{PUBLISH_PUT_IMAGES} || 'images';
		unless($Tag->if_mm('filematch', "$publish_dir/$path")) {
			$Tag->deliver('text/html', { status => "403 forbidden" }, 0);
			logError(
					"User %s not authorized for file %s.",
					$Vend::username,
					"$publish_dir/$path",
				);
			return;	
		}
		$umask = oct($::Variable->{PUBLISH_IMAGES_UMASK} || 2);
	}

	if(	$::Variable->{PUBLISH_NO_PAGE_ROOT}
		and $mimetype eq 'text/html'
		and $path !~ m{/}
	) {
		$Tag->deliver('text/html', { status => "403 forbidden" }, 0);
		logError("PUT in top level of page directory not allowed.");
		return;	
	}

	my %header;

	CREATEPAGE: {
		my $top;
		my $bottom;

		last CREATEPAGE unless $icpage;

		$::Pragma->{no_locale_parse} = 1;
		my $origfile = readin($path);

		my $dir = $path;
		$dir =~ s:/[^/]+$::
			or $dir = '';

		GETPAGE: {
			last GETPAGE if $origfile;
			my $newpath = $path;
			my $idx = $Vend::Cfg->{DirectoryIndex} || 'index';
			while(! $origfile and $newpath =~ s:/?([^/]+)$::) {
				$origfile = readin(Vend::File::catfile($newpath, $idx));
			}
		}
		if(! $origfile) {
			::logDebug("Cannot find template file, publishing as is.");
			last CREATEPAGE;
		}
		$origfile =~ s{(.*)\s*<!--+\s+BEGIN\s+CONTENT\s+--+>}{}s
			and $top = $1;
		$origfile =~ s{.*<!--+\s+END\s+CONTENT\s+--+>\s*}{}s
			and $bottom = $origfile;
		my $content = $$CGI::put_ref;

		my $p = HTML::HeadParser->new();

		$p->parse($content);
		$header{page_title} = $p->header('title');
#::logDebug("header title=$header{page_title} object" . ::uneval($p));
		$top =~ s{(\[(seti?|tmpn?)\s+(\w+)\s*\])(.*?)(\[/\2\])}
				{$1 . ($header{$3} || $4) . $5}eg;

		$content =~ s{.*<!--+\s+BEGIN\s+CONTENT\s+--+>\s*}{}s
			or $content =~ s:.*<body.*?>\s*::is;
		$content =~ s{\s*<!--+\s+END\s+CONTENT\s+--+>.*}{}s
			or $content =~ s:\s*</body\s*>.*::is;
		$content =~ s/\r\n/\n/g;

		my %strip_vars;
		my $strip_init;

		my $change_sub = sub {
			my $url = shift;
			return $url if $url =~ m{^\w+:};
			return $url if $url =~ m{^[[/]};
			my @parts = split m{/}, $dir;
			while($url =~ s{^../}{}) {
				splice @parts, -1, 1;
			}
			my $newdir = join "/", @parts;
			$url = "$newdir/$url" if $newdir;

			my $arg;
			my @args;
			my @out;
			($url, $arg) = split /[?&]/, $url, 2;
			@args = split $Global::UrlSplittor, $arg;
			if(@args) {
				for(@args) {
					my ($var, $val) = split /=/, $_, 2;
					next if $strip_vars{$var};
					push @out, "$var=" . unhexify($_);
				}
				my $fstr = join "\n", @out;
				return qq{[area href='$url' form=|$fstr|]};
			}
			return qq{[area $url]};
		};

		1 while $content =~ s{(<\w+[^>]*\s+[-\w]+\s*=\s*")([^"]*\%5b.*?\%5d)}
							{$1 . unhexify($2)}ie;
		if($dir) {
			$dir =~ s:/*$:/:;
			$content =~ s{(<a\s+[^>]*href\s*=\s*)(["'])(\.\.[^'"]+)\2}
							{$1 . $2 . $change_sub->($3) . $2}gei;
			$content =~ s#(<i\w+\s+[^>]*?src=")(?!\w+:)([^/'][^"]+)#
						$1 . $dir . $2#ige;
			$content =~ s#(<body\s+[^>]*?background=")(?!\w+:)([^/'][^"]+)#
						$1 . $dir . $2#ige;
			$content =~ s#(<t(?:[dhr]|able)\s+[^>]*?background=")(?!\w+:)([^/'][^"]+)#
							$1 . $dir . $2#ige;
		}

		$$CGI::put_ref = join "\n",
							$top,
							'<!-- BEGIN CONTENT -->',
							$content,
							'<!-- END CONTENT -->',
							$bottom;
	}

	if($::Variable->{PUBLISH_TO_PREVIEWS}) {
		$Vend::Cfg->{PreviewDir} ||=
			catfile($Vend::Cfg->{ScratchDir}, 'previews', $Vend::SessionID);
		$publish_dir = $Vend::Cfg->{PreviewDir};
		$publish_dir =~ s{^$Vend::Cfg->{VendRoot}/*}{};
	}

#::logDebug("PUBLISH_DIR=$publish_dir FILE=$path");

	my $fn = catfile($publish_dir, $path);

	$orig_umask = umask($umask) if $umask;

	if($icpage and $::Variable->{PUBLISH_DO_RCS} and -f $fn) {
		## Make the RCS directory if not there
		my $dir;
		$fn =~ m{(.*)/};
		$dir = "$1/RCS";
		File::Path::mkpath($dir) if ! -d $dir;

		my $msg = errmsg("Change by %s published via PUT.", $Vend::username);
		my @rcs_cmd = (
					qq{ci -m"$msg" $fn >/dev/null 2>/dev/null},
					qq{co -l $fn >/dev/null 2>/dev/null},
					);

		# See if in RCS already, check in initial if not
		system(qq{rlog $fn >/dev/null 2>/dev/null});
		if($?) {
#::logDebug("RCS version was not there.");
			my $m = $header{page_title} || 'New page';
			$m =~ s/"/\\"/g;
			$rcs_cmd[0] = qq{ci -i1.1 -t-"$m" $fn >/dev/null 2>/dev/null};
			## Do nothing, there was already a version
		}
		else {
#::logDebug("RCS version previously checked in.");
			## Don't need to check in, already done
		}
		for(@rcs_cmd) {
#::logDebug("RCS command: $_");
			system $_;
			if($?) {
				logError("PUT RCS error on command '%s': %s", $_, $!);
				if ($::Variable->{PUBLISH_QUIT_ON_RCS_ERROR}) {
					$Tag->deliver('text/html', { status => "500 Server Error" }, 0);
					umask($orig_umask) if defined $orig_umask;
					return;
				}
			}
		}
	}

#::logDebug("Getting ready to put $fn.");

	my $existing = -f $fn;

	unless($Tag->write_relative_file($fn, $$CGI::put_ref)) {
		$Tag->deliver('text/html', { status => "500 Server Error" }, 0);
		logError("PUT of $fn failed, write error.");
		umask($orig_umask) if defined $orig_umask;
		return;
	}

	umask($orig_umask) if defined $orig_umask;

	$Vend::Session->{put_files} ||= [];
	push (@{$Vend::Session->{put_files}}, $path);

	my $status = $existing ? '204 OK' : '201 OK';
	::logError("put of %s succeeded, status=$status.", $fn);

	$Tag->deliver('text/html', { status => $status}, 1);
	return;
}
EOR

# user tags
include lib/UI/vars/*
Profiles lib/UI/profiles/*

Message ...UI is loaded...
