
UserTag import_fields Order table
UserTag import_fields addAttr
UserTag import_fields Routine <<EOR
sub {
	my($table, $opt) = @_;
	use strict;
	local($SIG{__DIE__});
	$SIG{"__DIE__"} = sub {
                            my $msg = shift;
                            ::response(<<EOF);
<HTML><HEAD><TITLE>Fatal Administration Error</TITLE></HEAD><BODY>
<H1>FATAL error</H1>
<PRE>$msg</PRE>
</BODY></HTML>
EOF
                            exit 0;
                        };
	my $file = $opt->{'file'} || $Vend::Cfg->{ProductDir} . "/$table.update";
	my $db = Vend::Data::database_exists_ref($table);
	die "Non-existent table '$table'\n" unless $db;
	$db = $db->ref() unless $Vend::Interpolate::Db{$table};
	my $out = '<PRE>';
	my $delimiter = quotemeta $opt->{delimiter} || "\t";
	open(UPDATE, $file)
		or die "read $file: $!\n";
	my $fields;
	if($opt->{'fields'}) {
		$fields = $opt->{'fields'};
		$out .= "Using fields from parameter: '$fields'\n";
	}
	else {
		$fields = <UPDATE>;
		chomp $fields;
		$fields =~ s/$delimiter/ /g;
		$out .= "Using fields from file: '$fields'\n";
	}
	die "No field names." if ! $fields;
	my @names;
	my $k;
	my @f;
	@names = split /\s+/, $fields;
	shift @names;
	my @set;
	my $i = 0;
	my $idx = 0;
	for(@names) {
		$db->column_index($_);
		$set[$idx++] = $db->field_settor($_);
	}
	my $count = 0;
	my $totcount = 0;
	my $delcount = 0;
	my $addcount = 0;
	while(<UPDATE>) {
		chomp;
		$totcount++;
		($k, @f) = split /$delimiter/o, $_;
		if(! $k and ! length($k)) {
			next if ! $opt->{delete};
			next if $f[0] ne 'DELETE';
			$out .= "Deleting record '$f[1]'.\n";
			$db->delete_record($f[1]);
			$count++;
			$delcount++;
			next;
		}
		$out .= "Record '$k' had too many fields, ignored.\n"
			if @f > $idx;
		if ( ! $db->record_exists($k)) {
			if ($opt->{add}) {
				$out .= "Adding record '$k'.\n";
				$db->set_row($k);
				$addcount++;
			}
			else {
				$out .= "Non-existent record '$k', skipping.\n";
				next;
			}
		}
		for ($i = 0; $i < $idx; $i++) {
			$set[$i]->($k, $f[$i]);
		}
		$count++;
	}
	$out .= "$count records processed of $totcount input lines.\n";
	$out .= "$delcount records deleted.\n" if $delcount;
	$out .= "$addcount records added.\n" if $addcount;
	$out .= "</PRE>";
	close UPDATE;
	if($opt->{'move'}) {
		my $ext = POSIX::strftime("%Y%m%d%H%M%S", localtime());
		rename $file, "$file.$ext"
			or die "rename $file --> $file.$ext: $!\n";
		if(	$opt->{dir}
			and (-d $opt->{dir} or File::Path::mkpath($opt->{dir}))
			and -w $opt->{dir}
			)
		{
			File::Copy::move("$file.$ext", $opt->{dir})
				or die "move $file.$ext --> $opt->{dir}: $!\n";
		}
	}
	return $out;
}
EOR

