# Defines a couple of tags for the admin interface. Kept here because
# they might be generally useful for individual catalogs.
#

UserTag reconfig Order name
UserTag reconfig PosNumber  1
UserTag reconfig Routine <<EOR
use strict;
sub {
	my $name = shift || $Vend::Cfg->{CatalogName};

	my $myname = $Vend::Cfg->{CatalogName};
#::logGlobal("Trying to reconfig $name");

	if($myname ne '_mv_admin' and $myname ne $name) {
			$::Values{mv_error_tag_restart} =
				"Not authorized to reconfig that catalog.";
			return undef;
	}
#::logGlobal("Passed name check on reconfig $name");

	logData("$Global::ConfDir/reconfig", $Global::Catalog{$name}->{'script'});
	return 1;
}
EOR

UserTag reconfig-wait Order name
UserTag reconfig-wait Routine <<EOR
sub {
	my $name = shift || $Vend::Cfg->{CatalogName};
	my $myname = $Vend::Cfg->{CatalogName};
	return '' unless $myname eq '_mv_admin' or $myname eq $name;
    my $now = time();
    my $mod = ( stat("$Global::ConfDir/status." . $Vend::Cfg->{CatalogName}))[9];
    if( ($now - $mod) < $Global::HouseKeeping ) {
        $::Scratch->{possible_timeout} = 0;
        $::Scratch->{reconfigured} = 1;
        return '';
    }
    else {
        sleep 1;
        $::Scratch->{possible_timeout} = 1;
        return 'please wait...<BR>';
    }
}
EOR

UserTag reconfig-time Order name
UserTag reconfig-time Routine <<EOR
sub {
	my $name = shift || $Vend::Cfg->{CatalogName};
	my $myname = $Vend::Cfg->{CatalogName};
	return '' unless $myname eq '_mv_admin' or $myname eq $name;
	return Vend::Util::readfile($Global::ConfDir . '/status.' . $name);
}
EOR



UserTag restart Order name dir script aliases directive
UserTag restart PosNumber  5
UserTag restart Routine <<EOR
use strict;
sub {
	my (%cat);
	my ($changed, $directive, $name);
	my (@params) = (qw/name dir script aliases/);
	(@cat{@params}, $directive) = @_;
	$name = $cat{'name'} || $Vend::Cfg->{CatalogName};
	my $authorized;

	if (! Vend::Util::check_security('change catalog configuration', 3)) {
		$::Values{mv_error_tag_restart} = "Not authorized.";
		return undef;
	}

	if($directive or ! $Global::Catalog{$name}) {
		do {
			$::Values{mv_error_tag_restart} =
				"Not authorized to change Global directives from this catalog.";
			return undef;
		} unless $Vend::Cfg->{CatalogName} eq '_mv_admin';
	}
	elsif($name ne '_mv_admin' and $name ne $Vend::Cfg->{CatalogName}) {
			$::Values{mv_error_tag_restart} =
				"Not authorized to change that catalog.";
			return undef;
	}
	else {
		for (@params) {
			if($cat{$_}) {
				$changed = 1 if $cat{$_} ne $Global::Catalog{$name}->{$_};
			}
			else {
				$cat{$_} = $Global::Catalog{$name}->{$_};
			}
		}
	}

::logGlobal("Trying to restart $directive");
	if($directive) {
		logData("$Global::ConfDir/restart", $directive);
	}
	elsif (!$changed) {
		$::Values{mv_error_tag_restart} =
			"There was no change in parameters: " .
			join " ", map { "$_=$cat{$_} " } @params;
		return undef;
	}
	else {
		my $sub = $Global::Selector{$cat{'script'}}->{BaseCatalog}
					? 'Sub' : '';
		logData("$Global::ConfDir/restart", 
			 "$sub$name $cat{'dir'} $cat{'script'} $cat{'aliases'}");
	}
	my $pid = readfile("$Global::ConfDir/minivend.pid");
	$pid =~ tr/0-9//cd;
::logGlobal("Trying to restart PID=$pid");

	return 1 if $Global::Windows;
	kill '-HUP', $pid;
}
EOR

# Not strictly an admin tag, but could be useful
# 
UserTag secure-images Routine <<EOR
sub {
    return unless $CGI::secure;
    return if $Vend::Foreground;
    $Vend::Cfg->{ImageAlias}{'http:'} = 'https:';
	return '';
}
EOR

UserTag active-buttons Order dir
UserTag active-buttons PosNumber 1
UserTag active-buttons Interpolate 1
UserTag active-buttons HasEndTag 1
UserTag active-buttons Routine   <<EOR
sub {
	use strict;
	my ($dir, $html) = @_;
	my $scr = ($::Scratch->{mvc_bbar_script_name} ||= 'aaaa');
	$::Scratch->{mvc_bbar_script_name}++;
	$::Scratch->{mvc_bbar_script_hash} = {}
		unless defined $::Scratch->{mvc_bbar_script_hash};
	my $hash = $::Scratch->{mvc_bbar_script_hash};
	if(!$dir) {
		return $html unless $dir = $Vend::Cfg->{Variable}{DOCROOT};
		$dir .= $Vend::Cfg->{ImageDir}
			if $Vend::Cfg->{ImageDir} !~ /^http:/;
	}
	$dir =~ s:/+$::;
	my @images;


	$html =~ s#
						(
							<\s*input
						|
							<\s*a \s+ [^>]+
						)
						(>\s*<\s*img \s+|\s+)

						([^>]+\s+)? (src\s*=\s*"?)
						([^/][^"\s]*?) \. (gif|jpe?g) (?:[^>]+name="([^"]+)")?
					#
						my ($hjs, $ijs);
						my $mage = "$dir/${5}_up.$6";
						if (! defined $hash->{$mage}) {
							$hash->{$mage} = -f $mage;
						}
						if ($hash->{$mage}) {
							if("\L$1" eq '<input') {
								my $s = "$5 $6";
								if ($7) {
									$s .= " $7";
								}
								else {
									my $retry = $3;
::logGlobal("retry '$retry'");
						            $retry =~ /\bname="([^"]+)"/i;
									$s .= " $1" if $1;
								}
								push @images, $s;
							}
							else {
								push @images, "$5 $6";
							}
							$hjs =	'_JSCRIPT_HREF_ ';
							$ijs =	'_JSCRIPT_HIMG_ ';
						}
						else { $hjs = $ijs = '' };
						$1 . $hjs . $2 . $ijs . $3 . "$4$5.$6"
					#egix;
	return $html unless @images;
	
	my $template_begin = <<EOT;
<SCRIPT LANGUAGE="javascript">
<!-- hide
	mvABok = (
			(
				(navigator.appName == "Netscape") && 
				(parseInt(navigator.appVersion) >= 3 )
			) || 
			(
			  (navigator.appName == "Microsoft Internet Explorer") && 
				(parseInt(navigator.appVersion) >= 4 )
			)
		); 

   function ${scr}img_up (imgName) {
     if (mvABok && document.images) {
        imgUp = eval(imgName + "up.src");
        document [imgName].src = imgUp;
     }
   }

   function ${scr}img_dn (imgName) {
     if (mvABok && document.images) {
        imgDn = eval(imgName + "dn.src");
        document [imgName].src = imgDn;
     }
   }

EOT

	my $template_end = <<EOT;

// end hide -->
</SCRIPT>
EOT

	my $all_up = <<EOT;
function all_up   () {
 if (mvABok && document.images) {
EOT

	my $all_dn = <<EOT;
function all_dn  () {
 if (mvABok && document.images) {
EOT


	my $middle = '';
	my $img;
	my $sub;
	my $imgdir = $Vend::Cfg->{ImageDir};
	my $i = 1;
	foreach $img (@images) {
		my ($base, $ext, $name) = split /\s+/, $img, 3;
		my ($focus, $blur, $lab);
		if ($name) {
			$lab = '';
			$focus = qq| onFocus="all_up()" |;
			$blur  = qq| onBlur="all_dn()" |;
		}
		else {
			$name = $scr . $i++;
			$middle .= <<EOM;
if(mvABok) {
	${name}up = new Image();
	${name}dn = new Image();
	${name}up.src = "$imgdir${base}_up.$ext";
	${name}dn.src = "$imgdir${base}.$ext";
}
EOM
			$all_up .= "\t${scr}img_up('$name')\n";
			$all_dn .= "\t${scr}img_dn('$name')\n";
			$focus = qq| onMouseOver="${scr}img_up('$name')" |;
			$blur  = qq| onMouseOut="${scr}img_dn('$name')" |;
			$lab = qq|NAME="$name"|;
		}

		$html =~ s/_JSCRIPT_HREF_/ $blur $focus /;
		$html =~ s/_JSCRIPT_HIMG_/ $lab /;
	}
	$all_up .= "\t}\n}\n\n";
	$all_dn .= "\t}\n}\n\n";
	return $template_begin . $all_up . $all_dn . $middle . $template_end . $html;
}
EOR
