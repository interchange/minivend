------------------------------------------------------------------------------

                  What's new in each version of Interchange
                       (since the version 4.8 branch)

------------------------------------------------------------------------------

Interchange 4.9.7 not yet released


Core
----

* Allow [PREFIX-more-list] ... [/PREFIX-more-list] for nested loops.

* Support sparsely-populated quantity pricing tables.

* Fix bug in field name ranges in CommonAdjust where q99..q101 was handled
  as a Perl alphanumeric range q99, r00, r01, r02, etc. instead of
  q99, q100, q101.

Menu
----

* Add category-specific image links and toggles for the tree menu.

  To enable this for toggles, do:

  	  [menu
	  		menu-type=tree
			...
			specific-image-toggle=N
			]

  Where N is the level (1 == 0) to which you wish to do this.

  The image for a non-toggled category comes from the tree database field
  img_up, for a toggled category from img_dn.

  You can set the base URL for the images with:

  		specific-image-base="__IMAGE_DIR__";

  A trailing / is added if not already present.

  If you wish to allow image anchors for links as well, put the image
  name in the img_up field and add the parameter:

  	       specific-image-link=1

  If the image name is not present, the normal "name" field is used.

  To enable all of this for the example product_tree component, you would
  have a call of:

	[menu tree-selector="[control tree_selector Products]"
			link-class="[control link_class barlink]"
			link-style="[control link_style]"
			link-class-open="[control link_class_open]"
			link-style-open="[control link_style_open font-size: larger;]"
			link-class-closed="[control link_class_closed]"
			link-style-closed="[control link_style_closed font-size: larger;]"
			no-image="[control no_image]"
			menu-type=tree
			specific-image-toggle=1
			specific-image-base="__IMAGE_DIR__/tree"
			specific-image-link=1
			reparse=0]


UI
--

* Fix dependency of page editor on certain [if ...] conditions in page code.

* Add "send help edit to ICDEVGROUP" function in the online help editor.

* Change name of "Bottom" menu (which was on top) to "Fixed". 

Payment
-------

* Add support for Verisign's PFProAPI.pm Perl module, which implements
  Payflow Pro gateway communication without needing any external binary,
  and thus no forking or temporary files for communication. Use PFProAPI
  automatically if it is found at IC startup time, but fall back to pfpro
  or pfpro-file if not. Upgrades should be transparent.

Foundation
----------

* Make metadata correspond to current UI version.

Debian
------

* Default traffic setting is low now.

* Allow selection of traffic setting with debconf and interchangeconfig.

* Specify unix and inet modes explicitly if user selects both. 

* Check if /etc/init.d/interchange and /usr/sbin/interchangeconfig are 
  executable in interchange-ui maintainer scripts.


------------------------------------------------------------------------------


Interchange 4.9.6, released 8-Jan-2003.


Core
----

* Perl version 5.6.0 or newer is now a requirement to run Interchange.

* Add new global directive TrustProxy, which allows the administrator to
  designate certain IP addresses or hostnames as trusted proxies, whose
  claims (via the HTTP_X_FORWARDED_FOR environment variable) about the
  original requesting host will be believed.

  When using a front-end proxy for Interchange, all requests appear to come
  from that proxy, say 127.0.0.1 if on the same machine, which is effectively
  the same as running WideOpen because sessions can be easily hijacked. This
  offers a way to bring back a little discernment about what host we're
  really dealing with.

  Usage is identical to the RobotIP directive's, for example:

  TrustProxy 127.0.0.1, 10.0.0.*

  I'm not sure why anyone would want to do this, but it could also be used
  with external HTTP proxies in general (which hopefully aren't lying), with
  a simple 'TrustProxy *'.

* Fix whitespace transform and tolerate leading whitespace on HTTP
  header lines.

* Avoid persistent storage to make [summary] safe in prefork mode.

* Allow a database to spring into existence without a .txt file. TO
  do this, you define the field names in the NAME paramter.

      Database will_be_there  will_be_there.txt  __SQLDSN__
      Database will_be_there  NAME   code  field1 field2
      Database will_be_there  CREATE_EMPTY_TXT  1

  All it does is create the .txt file (or whatever the name is) from
  the value of NAME array. It does take delimiters into account.

  You must be just a bit careful, since if you then remove the .txt
  file it will of course recreate the table. Of course you should
  take that into account when setting this non-default parameter.

  This will allow some one-file configurations to be added to the
  system.

* Allow autonumber for the linked-table behavior of update_data. Before,
  you couldn't autonumber because the determination of whether the data
  would be set was whether the key value is present. This allows
  you to set mv_data_qual=fieldname and have a non-empty value in
  that field determine whether to insert or not.

* Minor cleanup in Data.pm, including ensuring $obj->{DELIMITER} 
  and $obj->{delimiter} match.

* Avoid infinite loops in catalog configuration caused by includes.

* Compile warnings in catalog usertags now show up in the logs instead
  of "UserTag 'ugly_hack' code is not a subroutine reference".

* Add new database configuration option PREFER_NULL. It accepts a list of
  field names which should be set to NULL instead of an empty string
  whenever possible:

  Database  people  PREFER_NULL  age height

  Probably most useful with numeric or date fields that are nullable, to
  prevent import errors when trying to store '' into a numeric field. Also
  for character fields that you'd rather have contain a NULL than '' to
  comply with a CHECK or foreign key constraint.

UserTags
--------

* Obsolete usertags dbinfo, e, if-key-exists, if_sql, reconfig_wait, 
  rotate_file, with and write_page removed.

Filters
-------

* Allow % in filter arguments. This could conceivably be a problem for
  someone who had a filter ".%s" or something.

Content Management
------------------

* Get restrict_allow settings right -- the default was not allowing the "var"
  to be expanded in the image preview path. Should probably look at this
  concept on a per-field basis, and set the default to "".

Payment
-------

* Patch to display errors from payment modules in credit card header
  on checkout page.

Foundation
----------

* Multi-language support, configured by the LOCALES and DEFAULTLOCALE
  variables.

* Updated region templates.

* New PayflowPro control variables MV_PAYMENT_PARTNER and MV_PAYMENT_VENDOR.

* Payment routes use now generic MV_PAYMENT_* variables.

* Test order page added.

Shadow Database
---------------

* lookup_table option added

* foreign method implemented

* test_record calls underlying database now

Installation
------------

* Debian packages support the selection of the GnuPG home directory 
  during installation now.

mod_interchange
---------------

* Fixed a weird bug where empty HTTP variables were being passed
  under certain circumstances.

* Fixed a bug reported by Jeff Dafoe.  The request information
  enabled Interchange to show the correct page but prevented it
  from storing the request in the session's history.  The problem
  only showed itself when Interchange's [history-scan] tag was used.
  As almost no page history was saved, [history-scan] sent the user
  to the default page (usually index) most of the time. 


------------------------------------------------------------------------------


Interchange 4.9.5 released 2002-12-13 (minor bugfix release).


Foundation
----------

* Add component files for new selectable results-list done by Ton.

* Make proper patches to history-scan and barlink() to work with Randy
  Moore's category_vert_toggle component.

* Minor updates to category_vert_toggle component for HTML cleanup and 
  performance improvement.

Core
----

* Fixed problem with PreFork and mod_perl modes where Interchange children
  kept order profile state between runs.

* Make sure STDERR is selected in mod_perl mode in case some other mod_perl 
  code uses select. 

* Change default for MaxServers in "rpc" profile to zero. This is probably
  best for the vast majority of servers running in PreFork mode.

* Tolerate missing configdb database, issue warning only.

* Tolerate people forgetting and putting , on the end of a parameter
  when using line2options. A comma should never be the last character, I
  would think, but you can choose to not use the filter if by some
  bizarre chance it is needed.

* A number of refinements and fixes to Menu module.

	- Passing timed=1 to [menu ...] tag prevents putting session ID and
	  count in URL, allowing timed-build to work well.

	- first_line and last_line transforms allow you to specify a field
	  to set to trigger the first line or the last line of the menu.
	  This allows the current IC menu structures to work well with
	  menus separated by space.

	- logical_page feature allows a tab "up" indication in another
	  menu, based on the page of the entry. This allows multi-level
	  tabs to have an "up" indication on different menus.

	- expand_values_form allows setting of ITL tag values even
	  on multiple form values.  Honors [cgi ..], [value ..], and [var ..].

    - Fix ordering of open paramter for trees -- it was broken by the new
	  Vend::Util::vendUrl routine.

* Simplify field_settor subroutines with prepared query and placeholders.
  Prevents infamous DBD::Pg::do errors.

* Form module -- add intrinsic "file" type, and allow setting of a
  widget class directly without using "extra".

* Other minor bugfixes too insignificant to mention.

UserTags
--------

* min-rows option added to table-organize tag. Allows building small
  result sets in one column (or however many columns needed to reach
  min-rows).

* Reworked [tree ...] tag to use DBI placeholders if supported.
  While this doesn't seem to save too much CPU on a machine that
  has the database and IC on the same machine, it should relieve
  some network bandwidth on distributed setups.

Installation
------------

* Various debian build patches.


------------------------------------------------------------------------------


Interchange 4.9.4 released 2002-12-02.

* Fix problem with PreFork and mod_perl modes where Interchange children
  kept order profile state between runs.

* Tolerate people forgetting and putting , on the end of a parameter
  when using line2options.

Core
----

* The interchange script is now only used for configuration and
  options. All code that previously resided there (notably the
  dispatch(), respond(), update_data(), and do_order() routines)
  has been relocated. Code that calls ::update_data, etc. should
  NOT break, because we still use the modules in the script.
  This caused the addition of Vend::Dispatch to hold many of
  the routines.

* Added new [deliver ....] tag that allows you to deliver some content
  without worrying about [tag op=header] and page spacing issues. Adds 
  new global variable $Vend::Sent which is authoritative notification
  that all content is sent and that all further parsing of ITL
  should stop.

* Add mv_source parameter which sets an affiliate program source
  and can be carried around in URLs when $Scratch->{mv_add_source}
  is set. This solves the problem of AOL caching the page with
  the source embedded, then forwarding the next request sans source.

  From a suggestion by Dan <ic@concolor.org>.

* Add new [menu ...] tag which can build simple, tree, and flyout
  menus from a menu specification. See the UI.

* Add robot tolerance facility, where mv_tmp_session is set when either
  a RobotUA, RobotIP or RobotHost wildcard matches.

  In interchange.cfg:

      RobotUA   Inktomi, Scooter, Site*Sucker
      RobotIP   209.135.65, 64.172.5.*
      RobotHost *.googlebot.com

  After that, it is all automatic. mv_tmp_session gets set to one, the
  Scratch values mv_no_session_id and mv_no_count are set to one, and
  normal pages don't get IDs put out by area.

  What this will do for the user:

        1. Allow those UAs to follow a URL.
        2. Prevent useless session files from cluttering disk
        3. Prevent session writes from inhibiting disk performance.

* Added a (global) HostnameLookups directive to specify whether Interchange
  should perform a DNS lookup to resolve the remote user's hostname from
  their IP address.  The default is 'No'.  Hostnames are required for
  facilities such as the RobotHost check to work.  If the web server is
  configured to perform hostname resolution then this directive should remain
  set to 'No'.

* Add the oft-requested DirectoryIndex feature. 

* Add new content management features. This allows Interchange to:

    -- Accept Apache error redirects, i.e. handle 404 errors
    -- Initially process page, process page after variables, and
       process page before image substitution with configurable subroutines
    -- Take puts for DAV-style publishing

*   New "AcceptRedirect" directive. If "Yes", will look for REDIRECT_URL,
    REDIRECT_QUERY_STRING, etc. and use those to provide the request.

    This allows:

        ErrorDocument 404 /cgi-bin/foundation

    At that point, a request for /index.html that is not found will
    be equivalent to /cgi-bin/foundation/index.html and will be
    indistinguishable from the real page by the client.

*   New Pragmas init_page, pre_page, post_page, which specify
    Sub/GlobalSub routines to run at various points in page build.

    init_page     Run before Variable substitution
    pre_page      Run after Variable substitution, before interpolation
    post_page     Run before Image substitution

* Allow PUT operations. Add

    [value-extended test=isput]       Check for a PUT
    [value-extended put_contents=1]   Return PUT string
    [value-extended put_ref=1]        Return ref to PUT string (scalar)

  Some more DAV-type features can be done, I think, but they are not yet
  scoped.

* Remove min_string test from Search.pm, where it never really was used
  or called due to mv_min_string default being 0.

* Place mv_min_string check back in Glimpse where it was intended in the first
  place.

* Convert Mac line endings to Unix (as well as DOS).

* Finally discovered what is going on with GPG and errors.

  -- If PGP fails due to a system problem, like out of memory or
     bad file permissions, it fails with a status that will cause
     a real error which is in the lower 8 bits.

  -- If PGP fails due to an internal problem like "key not found",
     or no secret key ring, it will fail with system status set to
     zero but the upper level status indicating its problem.

     So a failed key will turn up as "File not found" in the
     upper order bits, while a key *ring* not found will fail
     with the same error in the lower status bits.

  This patch is temporary, and at least tells you what $! is. I will
  examine GPG's error messages and provide some simple ones like "key
  not on keyring" and catch them to provide a better error.

* Add general multiple-table update feature to Vend::Data::update_data.

* Allow authoritative table name for constructed queries. Usage:

    my $db = database_exists_ref($table);
    my $tname = $db->name();

    my $query = "select * from $tname";
    $db->query($query);

  This should allow REAL_NAME many more places.

* New mv_cleanup operates like mv_click and mv_check, but operates
  after a form processing action is done.

* Added debug type to [log].

* [userdb function=logout clear=1] will now restore the appropriate
  ScratchDefault and ValuesDefault values instead of simply
  deleting the scratches and values under its control.

* Added check for no_increment so that mv_order_number can be set in
  a route.

* Fix bug where bad [nitems compare=...] could cause server error. Now
  just silently causes bad compare.

* Allow alternate values spaces with $CGI->{mv_values_space}. This allows
  fill-in wizards, surveys, and such to not pollute the user's normal
  values.

  Use with caution -- if someone is in the practice of using $Values
  to set catalog behavior (usually a poor idea) then it can cause
  anomalies.

* Clean up a few references to $Vend::Session->{values} which should
  never be done anymore -- we had handled almost all of this previously.
  It should always reference $::Values.

Installation
------------

* "you are now ready to run makecat" is no longer displayed on upgrades.

* Prevent test from failing on upgrades.

Payment
-------

* Patch from Mark Johnson to Vend::Payment::Signio module whose explanation
  we quote: 
  If you send a garbage ORIGID, as IC does by default, it will attempt to
  use that as the key for the transaction, without falling back on the data
  you sent with it. Thus, it must explicitly not be used unless you have a
  valid one which you want to use. This was why no credits were succeeding;
  even though we were sending explicit new data, it ignored it and cried 
  with the ever useful error "Not signed up for this tender type".

* Added a Vend::Payment::TestPayment module to allow developers to test
  their site's interaction with the Interchange Payment system, without
  actually being connected to a real Payment Services Provider. 

* Change AuthorizeNet.pm to more easily enable settlement of orders
  done via AUTH_ONLY.

* Prevent automatic try at credit card encryption if no EncryptKey
  is present.

Filters
-------

* Add new filter, "next_sequential". Allows selection of a next-sequential
  value based on a field (and qualified by a field).   

  [filter op="next_sequential.survey_q.sort"][cgi sort][/filter]

  will:   

    1. Return the existing value if present.
    2. If existing value is blank, return max + 1 in the sort field,
       i.e. equivalent to: 

           SELECT sort FROM survey_q
       ORDER BY sort DESC
       LIMIT 1   

  If another argument of a field name is passed, i.e. 

    filter => 'next_sequential.survey_q.sort.sel',   

  then you get: 

       SELECT sort FROM survey_q
       WHERE sel = '[cgi sel]'
       ORDER BY sort DESC
       LIMIT 1   

  This allows a next-sequential numbering for things that need it.
  Developed to support general-purpose survey UI for Ton's excellent
  product rating system.

* Fix bugs in option_format filter. It would turn commas into new options;
  and alternate delimiters had no hope of working.

* Add options2line and line2options filters, allowing you to specify
  options in a textarea without comma separators and instead with one
  option per line.

Profiles
--------

* Add "future" profile comparator so that you can do:

    appointment_date=future 1 day "Sorry, we need some lead time."

  That allows you to check that a date value (ala the date widget) is
  in the future.

* Added "luhn" profile check for "LUHN-10"-encoded numbers.

* Enhance unique profile check to allow specification of a foreign key
  for uniqueness check.

Foundation
----------

* Add several different color schemes instead of only the Foundation Red.
  "blueyellow" is the new default.

* Change logos and such to reflect ICDEVGROUP instead of Red Hat.

* Add product_tree and product_flyout components to work with new
  menu editor.

* Change checkout display to work easier for DHTML browsers, old
  browsers should see much the same thing.

* Change order profiles and etc/log_transaction to do a more reliable
  job of order checking. If your database has transactions (i.e. Postgres),
  a failure in the log_transaction can cause a failure of the order.

* Added auth_code and tracking_number to transactions table to support
  charge settlement and shipping_tracking in the UI.

* category_vert_toggle component reworked by Randy Moore.

* new category_vertical_tree component by Rene Hertell.

UserTags
--------

* Fixed problem in [button] tag to make sure that the current button being 
  pressed is the only one whose mv_click_map_* variable gets set.

  This works around the problem of a user clicking one button, using the
  browser's Back button, then clicking on a different button, and both
  mv_clicks execute instead of just the most recent one.

* [history-scan ...] now escapes form parameters properly.

* Extended stripping of line endings by [import-fields] to 
  help people who import using files generated on non-Unix
  operating systems.

* Add [jsq] [/jsq] .. and [jsqn] [/jsqn] tags that build properly
  JavaScript strings (jsq with variable substitution, jsqn without).

* Add [tabbed-display] tag that shows DHTML tabbed panels.

        [tabbed-display OPTIONS]
            [tabbed-panel The title of one]
            The contents of one
            [/tabbed-panel]
            [tabbed-panel The titel of two]
            The contents of two
            [/tabbed-panel]
        [/tabbed-display]

  It is pretty much that simple. It is documented, and an example is
  on the pages/admin/genconfig.html page.

* [table-editor ...] tag updated extensively. Added tabbed displays,
  full templating of the display, user-includeable forms, almost all
  features supported with metadata.

* Many minor changes in metadata and preferences. Changed default
  in some tables to tabbed display.

* [update-order-status] tag added for shipping products. Also does
  charge settlement if needed.

* [xml-generator] removed.

UI
----

* Extensive update to look and feel of the admin UI. The HTML design was
  done by David and Hamish, core members from Zeald, Ltd. in New Zealand.
  There are no more BGCOLOR references, and only a couple of <font ..>
  tags. All has been switched to CSS.

* Remove icmenu database. That work now done by lib/UI/pages/include/menus/*.

* Major update to [table-editor ...] which so much of the UI is based
  around. 

    -- Tabbed displays
    -- Insert spreadsheet linked via foreign key
    -- Insert custom form widgets for form processing use,
           a "recompute transaction" included for an example
    -- Control over styles and classes for table columns
        -- Completely templateable

* Add the suggested feature from Dan Browning -- a great idea --
  a spreadsheet of a linked table within the table editor.

  Adds the options:

    link_table               Table to link in

    link_key                 Key field to link to

    link_fields              Columns to display

    link_sort                How to order the linked rows
                             (probably should add link_query here)

    link_view                The view for spreasheet meta

    link_label               How to label the thing (default
                             is something like "Settings in
                             link_table linked by link_key"

    link_before              Where to plop the thing, input
                             a column name in the main table to
                             put it before

    link_extra               Class, style, or other data for
                             the table cells in the spreadsheet


   To make it even better, multiple link tables are allowed,
   so you could do:

       [table-editor
            link-table.0=options
            link-table.1=pricing
            link-key.0=sku
            link-key.1=price_group
        ]

   To test, try this little test-snippet in a default foundation
   from the latest CVS.

    [table-editor
        table=products
        item_id="os28004"
        link-table=options
        link-key=sku
        link-fields="sku price description"
        link-sort="price desc"
        link-before="weight"
    ]

* Complete rework of content editor. Improvements too many to name.

    - "Edit page", "Edit menu", even "edit component" links are inserted when
      you are logged in as admin.

    - Complete cleanup of page/template/component parsing code, now perhaps
      someone besides Mike could understand it. 8-)

    - File navigator only now used for pages, not for templates/components,
      retains context.

    - Hooks are there for doing an entire edit session then pushing new content all
      at once. Theoreticially, you could create an entire new site, browse it
      and test it without the public seeing it, and then push one button to
      publish it all. I say theoretically because I haven't done it yet, but
      it should be there soon.

    - Preview now holds true for browsing catalog.

    - Now can create and edit pages that have no template wrapper.

    - Add page to clone (push) sets of components to like sets of pages, i.e.
      edit one to get the components like you want them and then select the
      pages that that setup should be copied to.

    - Closed all Bugzillas relating to it.
       -- New pages not creating properly
       -- Unable to edit in subdirectories
       -- Templates not written properly

    - TODO:

        -- Allow alternate DSN for staging database tables.
        -- Document this puppy, finally.
        -- Change templates so that left-side/right-side components interchange,
           and so that most class=content components can go vertical.
        -- Vet the new [menu][/menu] component so that left-hand side
           menu can be directory/location sensitive.
        -- Build in the "use the index.html page in the current directory
           as the template" functionality.
 
* Improve spreadsheet.

    -- Any meta widget can be used.
    -- No possiblity of data crossover with embedded nulls.
    -- Remove need for "Change display" with improved meta edit (will
       add temporary view selector soon).
    -- Better display (I think).
    -- Better consistency of display for data and new record, etc.
    -- Fields can use meta, go to textarea, have text field all selectable
       from spreadsheet meta control.

* Add cheesy mail list manager, a common thing to ask. Supported by unsubscribe
  function and a batch download mode for large mailings....probably should
  create some online help.

* Ability to employ database entries in filters supported by profile 
  "process_filter" now.

* Major update to order status update program. Now can batch ship by
  checking boxes, sequence ship, settle transactions previously done
  via auth_only with realtime payment gateway, and more.

* Many, many, minor bug fixes and improvements.

Swish Search
------------

* Added module to search indexes with Swish.

* To use, you must add to interchange.cfg:

        Require module Vend::Swish
        AddDirective Swish hash
        Variable swish Vend::Swish

* The search is called with st=swish (same as mv_searchtype=swish).

* The fields to return are configurable, and default to;

        rf=code score title url mod_date filesize
        fn=code score title url mod_date filesize

  These correspond to:

                        code            swishreccount
                        score           swishrank
                        url                     swishdocpath
                        title           swishtitle
                        filesize        swishdocsize
                        mod_date        swishlastmodified

mod_interchange
---------------

* Implemented a proper (automatic) URILevels mechanism and removed
  the URILevels configuration directive.  This also fixes a bug,
  reported by Philip Hempel in the interchange-users mail list,
  where [PT] redirects were not being handled correctly.

Forum
-----

* Add "forum" feature to foundation. Allows commenting on products and
  also as a byproduct arbitrary blog-style forums.

  This is a complete forum display:

        [forum top=THREAD_ID /]

  You can get more complex than that. There is an illustration of the
  templated version in the pages/forum/display.html page.

  Disabled by default for DBM and Oracle. No database def is
  supplied for Oracle.

  With Postgres and MySQL, the forum is displayed in the flypage
  automatically by default. The thread doesn't exist until the
  first comment is made, at which time we create a top-level thread
  named for the SKU.

  An email notification goes out with new comments if that is
  enabled.

  There is some scoring logic for display, but no way to assign
  scores yet (except by editing the database directly).

  The reply and submit pages use include files from include/forum.

  Arbitrary forums need to be enabled by setting the artid equal
  to the code. If the artid is 0, as is the default on a random
  submit, no display will be done. (The enabling is done automatically
  for products by passing the product=1 parameter in the URL and
  finding the product in the database.)


------------------------------------------------------------------------------


Interchange 4.9.3 released only as nightly builds.


------------------------------------------------------------------------------


Interchange 4.9.2 released 2002-08-12.


Core
----

* New ability to run Interchange entirely inside Apache and mod_perl.
  See POD documentation inside scripts/ic_mod_perl.PL for details.

* Add new Jobs and Cron facility:

  - While we don't keep the time, and a scheduler will have to set the
    execution time, it allows ITL to be run without the hassles of having
    to deal with HTTP.
  - Use $Vend::Cfg->{Cron} for setup.
  - Emails either to command line address or $Vend::Cfg->{Cron}{email}
    (only if the cron job supplies output). Uses the $Vend::Cfg->{Cron}
    variables subject, from, reply_to and extra_headers.
  - Logs to $Vend::Cfg->{Cron}{log}
    (only if the cron job supplies output).
  - Can add session dump when $Vend::Cfg->{Cron}{add_session}.
  - Base directory set by $Vend::Cfg->{Cron}{base_directory}, defaults
    to etc/cron. If $Vend::Cfg->{Cron}{use_global} is set, 
    the same directory in $Global::ConfDir is scanned too.
  - The macros $Vend::Cfg->{initialize} and $Vend::Cfg->{autoload} are
    executed once resp. before each job.
 
* Add First and Last links to more-list, with ability to customize via
  [first-anchor] and [last-anchor] containers.

* Bye bye Wizard. Suggest anyone who wants it resurrect it and
  make it work properly...

* Add new menu editor and menu system. It is based around Vend::Menu
  and the new tag [menu ...], which builds various types of DHTMl and
  standard HTML menus based on browser type.

  The menu editor can edit simple menus or tree-based menus.
  All UI menus use this. A simple menu component (i.e. a link list)
  and a tree-based list are provided for Foundation.

* New support for database-native sequences for MySQL, PostgreSQL, and Oracle:

  - To do a minimal sequenced table, all you need to do is:

    Database  sequenced sequenced.txt __DBIDSN__
    Database  sequenced AUTO_SEQUENCE sequenced_seq

  - The parameter passed to AUTO_SEQUENCE (in the above, "sequenced") will
    be used as the sequence name for Postgres and Oracle (and presumably
    others that emulate them).

    For MySQL, the same technique that Stefan introduced is used, with an
    AUTO_INCREMENT field. The value in AUTO_SEQUENCE is just a non-false
    value. The behavior depends on the definition of
    $capability->{LAST_SEQUENCE_FUNCTION}.

    If MySQL is the DB in use,

    $key = $s->autonumber();

    returns nothing and the key will be later found with

    $key = $s->last_sequence_value($key);

    and returned in $db->set_slice, etc. ($db->set_row also uses this, but
    the key value is never returned. You can get it with
    $db->last_sequence_value if you need it.)

    If PostgreSQL/Oracle is used, the key is returned with

    $key = $s->autonumber();

    and is just parroted back with

    $key = $s->last_sequence_value($key);

    If the table is being created, the sequence will be created as well. If
    it exists, it will not be dropped. If the "code" or key field is not
    set with a COLUMN_DEF, the field type to be used will be found in
    $capability->{SEQUENCE_KEY}.

    Capablility entries used:

    SEQUENCE_CREATE         Query to create a sequence on table creation.
    SEQUENCE_QUERY          Query to get next value in sequence.
    SEQUENCE_KEY            Type definition for key field when AUTO_SEQUENCE
                            table is created.
    SEQUENCE_VALUE_FUNCTION Query to get current value of sequence.
    SEQUENCE_LAST_FUNCTION  Query to get key when MySQL behavior is wanted.

  - Can automatically drop existing sequence if:

    Database sometable AUTO_SEQUENCE_DROP 1

* Add BASE_CAPABILITY configuration parameter to allow testing of a new
  SQL database type with settings based on one of the known types. If
  behavior is different in particulars, that capability can be modified
  in the config file.

* In Vend::Config, fix incompatibility in Perl 5.005-style regex that
  causes rejection of certain Locale settings.

* Remove unnecessary CGI variable mappings at end of Vend::Config.

* Fix call to [item-tag object name].

* Add Filter alias e = encode_entites.


Extensions
----------

* Various Quickbooks updates:

  - Fixed: When an auto-created user orders from the same company as an
    existing Quickbooks customer, it overwrites the customer.

  - Save the auto-created user id (e.g. U00001) and use it in the Customer
    Name as a unique identifier, just as logged-in users.

  - New variables for easy customization of export features via Admin UI,
    documented via item-specific meta referenced in the documentation.

  - Fixed: "INTL" showing up without country (now matches US or USA).

  - Put the company name on a separate line in Ship-to and Bill-to
    addresses. Now utilizing all 5 lines.

  - Item name updates:
    - Length filter now customizable via QB_ITEM_LENGTH
    - Default is 30 (backwards compatible)
    - Item name taken from 'title' first, if any, then 'description' second.

  - Optionally cause Quickbooks invoice number to be blank, to keep
    Quickbook's invoice number progression unmodified.
  
  - Accompanying documentation.

Utilities/EG
-------------

* eg/te -- jon's great tabbed file editor.

    Add some new options:

    -f to handle files without field names on first line of file.
    -n to number rows in comments.

    -s for starting value support (really only vi).

        te -s os28004 <file>

        Jumps to first occurrence of "os28004" in <file>. Option -i ignores case
        in the search.

    Allow setting of persistent options in environment variable TE_OPTIONS.

    Handle -i and -s with mixed-case search term (lowercase it first).

    Don't escape " in search term, as it doesn't seem special.

Payment
-------

* Support for TrustCommerce added. Written, tested, and donated by
  Dan Helfman of TrustCommerce <dan@trustcommerce.com>. Thanks, Dan!

* Support for the Mainstreet Credit Verification Engine (MCVE) added.
  Written, tested, and donated by Tom Friedel <tom@readyink.com>.
  Thanks, Tom!
 
* Support for ECHO added. Written, tested, and donated by
  Michael Lehmkuhl <michael@electricpulp.com>.  Ported from globalsub to 
  Vend::Payment by Dan Browning <db@kavod.com>.  Thanks Michael!

UI
--

* [import_fields]: Performance enhancement: use set_slice() to update all 
  fields in a record at once when importing files.
  

------------------------------------------------------------------------------


Interchange 4.9.1 released 2002-07-22


Core
----

* The great tag breakout!

    - Almost all tags are now UserTag definitions. The exceptions are:

        and bounce goto if label or unless

    - New TagDir directive (default is VENDROOT/code) sets the
      directory (or directories) which are searched for code definitions
      set by UserTag and CodeDef.

    - New TagGroup directive establishes groups of ITL tags which can
      be included.

        TagGroup :crufty "banner default ecml html_table onfly sql"

      The default groups include :core, which contains all of the
      ITL tags defined in 4.8/early 4.9. The groups are defined
      in $Vend::Cfg::StdTags and can be undefined if desired
      with "TagGroup :group".

    - New TagInclude directive allows inclusion of tags (or groups
      of tags). If a tag is defined as a core tag (with a .coretag
      or .tag or .ct extension) and is not included, it will not
      be compiled and placed in the tag map. This is for all catalogs,
      so if *any* catalog uses a tag it must be included.

      Examples:

        # Include the base tags
        TagInclude :core

        # Not the commerce tags
        TagInclude !:commerce

        # But make sure item-list is included even though
        # it is in :commerce
        TagInclude item-list

        ## Double negatives are honored
        TagGroup    :foo "bar !baz buz"
        ## With the group above, the below is equivalent
        ## to TagInclude !bar baz !buz
        TagInclude !:foo

    - New CodeDef directive allows the setting of filters, order checks,
      FormAction, ActionMap, ItemAction, and LocaleChange.

            ## filters
            CodeDef  mixedcase Filter
            CodeDef  mixedcase Routine <<EOR
            sub {
                my $val = shift;
                ## [filter mixedcase]mixed case[/filter]
                ## outputs "MiXeD CaSe"
                $val =~ s/(.)(.)/\u$1\l$2/g;
                return $val;
            }
            EOR

            ## order checks
            CodeDef  mixedcase OrderCheck
            CodeDef  foo  Routine <<EOR
            sub {
                my ($ref, $var, $val) = @_;
                return (1,$var) if $val eq 'bar';
                return (0,$var, "foo must be bar");
            }
            EOR

       All work in catalog.cfg; LocaleChange and ItemAction are not
       global. FormAction, ActionMap, and ItemAction directives
       are equivalent to their CodeDef equivalents.

* New Vend::Form module implements display tag and widget creation.
  Passes all known tests, and runs accessories/widgets (apparently)
  flawlessly in foundation, barry, simple, and the UI.

* Add new HIDE_FIELD capability to DbSearch. It provides automatic
  hiding of records accessed via search (and NOT query).

 -When the following configuration is added:

    Database products HIDE_FIELD inactive

 -It adds automatically the qualification to every search:

    WHERE inactive != 1

 -To use, you should have a field of char(1) or int type.

    Database products COLUMN_DEF "inactive=int default 0"

 -This has the side-effect of hiding fields with NULL in the
  field, so be careful. You should probably set "default 0"
  as shown above.

 -Works for DBM types too.

 -Does NOT work for TextSearch.

 -If you want to show all records, you can pass mv_no_hide=1
  in the search parameters. Obviously, this makes this not a
  security feature.

* Clear the following intermittent error:

    CGI mapping error: multipart/form-data sent incorrectly

  Some browsers, like Opera, use non-word characters like '+' in
  form-data MIME boundaries, causing the regex matches to fail.

* New function Vend::Util::logOnce which ignores repeated identical
  log messages (works only in the scope of the current Interchange
  page)

* Remove last remnants of mv_raw_searchspec.

* Remove HTML-embedded tag syntax

* Remove Vend::ECML, move to extensions/ directory.

* Allow customization of links in more-list, like this:
  [link-template]<a href="$URL$" target="_top">$ANCHOR$</a>[/link-template]

* Add utility functions Vend::Data::product_row and product_row_hash,
  which do the same thing as product_field, but return the whole row
  instead of just one field.


UI
--

* Major changes to the content editing scheme.

    - Requires a CSS/Javascript 1.3 compliant browser. Tested on
      Mozilla 0.9.8, MSIE 5.51, Opera 6.0tp2. All work pretty well;
      Mozilla is a bit slow, Opera doesn't have CSS widths down.

    - Page editor has a quasi-visual layout that should be much more
      intuitive. Support for a "PAGE_PICTURE" file in the templates
      allows visual links to the editor page.

    - Components, templates, and pages are now all editable.
      Template and component editors need to be brought up to speed
      with the page editor, but work fairly well.

    - Added new lib/UI/ContentEditor.pm module which implements
      this stuff in conjunction with lib/UI/pages/include/*_editor.
      A bit of a JavaScript dependency nightmare on the generated
      attribute editors, but I may get this more canned as time goes on.

    - Let's get this on record -- this content editiing WILL NOT
      UNDER ANY CIRCUMSTANCES EVER WORK ON NETSCAPE 4. Do not ask,
      though I know the people who monitor this stuff won't.

* Added Mike's cool new "auto_wizard" which builds a wizard from a
  file like in the example. It will be the method to provide scripted
  content addition.

* More table-editor updates -- added notable option, and
  all_opts option which allows building the options in
  Perl and then doing:

        [table-editor all-opts=`\%opts`]

* Look for major updates on the table editor to make it
  completely templateable.

* Fix problem with $Tag->display() called with null table, affecting
  "wizard" mode.

* Add a "admin/test_code.html" page for testing short snippets
  of ITL without having to create a test page.

* Make the table populator JavaScript honor the db tables the
  particular admin user is supposed to see.

* [import-fields replace=1] -- added option to replace items in the database

* Add su facility for catalog superuser to switch users to another
  user id, using new UI_Tag su as follows:

    [su username=miltonbear]

    1. Stringifies current session after checking that su user is valid
    2. Writes a random string to "$Global::ConfDir/tmp/$Session->{id}"
    3. Issues a cookie hashing the above two
    4. Inits a new session, putting in the login info
    5. Writes $Session->{su} with session string

    [su exit=1]

    1. Reads random string from "$Global::ConfDir/tmp/$Session->{id}"
    2. Hashes that with session and verifies with cookie
    3. Safe evals session string
    4. Retrieves session username/admin info

    [su create_user=1 username=bobby password=howdy verify=howdy]

    Allows combined creation of new user and switching to that user. 
    Any options you would pass to userdb tag can be given to su usertag, 
    to tweak account creation. If user already exists, it's silently switched to.

  MMsu profile is called on admin/customer.html to run the switch.

  When you "log out", you are reverting to the previous user, and you
  can go no further back. So if you go from superuser->adminuser, then
  adminuser->regular user, there is no way back to superuser without
  logging in again.

* Continuing work on meta_display and Vend::Form.

    - Relocated date and option widgets
    - Prepared for breaking out image widgets to code/Widget
    - Fixed various bugs in widgets
    - Code simplification in Primitive.pm
    - Fix widget.coretag to not call UI::Primitive routine
    - Redo option_format filtering

* Display server hostname on the information page (genconfig).

* Unused usertags component, set-alias and set-click removed.


Payment
-------

* Support for Wells Fargo added


Accounting
----------

* Vend::Accounting module added, along with example module for SQL_Ledger.
  This is the basis for a start of a defined accounting system interface.

  Some intended functions:
    NOTE: AS = Accounting Software, i.e. SQL-Ledger, IC = Interchange

    1. Assign customer number
    2. Change customer information based on input, limit to fields customer
       should have control over
    3. Add sales transaction (IC)
    4. Feed back sales transaction from AS side for account status
    5. Enter payments (IC --> AS), with credit-cards used to pay invoices
    6. Reconcile AS account status with IC, i.e. ship status
    7. Cancel order (IC)
    8. Ship portion or all of order (IC)
    9. Mark order complete

    Input on other functions needed is appreciated.

PROPOSED:

* Set of modules selectable by route handle:

    Vend::Account::SQL_Ledger (exists)
    Vend::Account::QuickBooks (proposed)
    Vend::Account::Compiere (proposed)
    Vend::Account::[fill-in-the-blank]

* Use a usertag [account] (a la [charge]) to interface functions.

* Use a profile primitive, "&account=label function" ala "&charge="
  to do some accounting functions in profiles, notably getting an
  order number or customer number

* Allow either COMMIT or no-COMMIT operation, with tradeoffs

* Define accounting system parameters via Route, and build
  in accounting functions into Route so that they can be
  a predicate for order success.

* Define two transitional state tables for handshaking:

    orderstatus -- status of orders, i.e.
            pending,transmitted,received,shipped,complete

    accountstatus -- record of payments and orders for account statement


Foundation demo
---------------

* use [if variable MV_DEMO_MODE] instead of the more cumbersome
  [if type=explicit compare="__MV_DEMO_MODE__"].

* add global INTERCHANGE_URL and INTERCHANGE_EMAIL variables to be used
  for the Interchange developer website & email contact points, instead
  of hard-coded stuff

* standardize on the short form "Interchange" for the application name.

* update a few URLs, etc.

* Remove history-scan tag from catalog.cfg; it is now in code/UserTag.

* Remove no_html_parse pragma, for which code has already been deleted.

* Moved payment routes to the top of the Route stack. Technically they
  should not be below the default route, and though it works in the
  standard foundation setup, it caused lots of failures when people
  tried to customize their order routing.

* (Oracle) Add missing Database xxx UPPERCASE 1 settings. Thanks to
  Jonathan Lee <jonalee740304@yahoo.com> for reporting.

* Get rid of weird tax rate popup notice when updating account
  info, which is especially strange when you've never had anything
  in your cart ...

* Change catalog.cfg to highlight etc/after.cfg.


UserTags
--------

* [fedex-query] -- Stop dying if there's a problem with FedEx express
  lookups, which kept even ground rate lookups from being done during
  the first request when the Business::Fedex object is first created.

  Instead, just log the error but continue on with possible ground lookup.

  (This situation resulted in the oddity of the shipping rate displaying
  as $0.00 on the checkout page, but still getting added into the total cost
  and displaying in the shipping rate pulldown select box just fine.)
  
* interchange.cfg: Remove now-redundant include of usertag/*.tag.

* [db-columns] -- Add ability to get back an array instead of a joined string
  to $Tag->list_databases,$Tag->list_keys,$Tag->db_columns,

* [email] -- Add enhancement made by Jurgen Botz to use send_mail program
  so that Net::SMTP can send the email tag. Thanks Jurgen!

* [history_scan] -- Count option added, which guarantees that the
  returned link is at least count # of clicks back in the page history.

* [image] -- descriptionsfields and exists_only options added.


Build
-----

* Removed stale POD documentation from main interchange repository; for
  some time now, docs source has been in SDF format in docs repository
  and available in separate docs package.

* Keep test from giving warning about not being able to stat
  "code" directory.

* Big changes to RPM specfile:

  - Allow non-root RPM builds.
  - Don't add interch user on build machine.
  - Don't automatically start Interchange after installing RPM.
  - Remove unneeded .empty files used in CVS to avoid pruning
    important but empty directories.
  - Make admin UI images owned by root.
  - Don't allow Interchange RPMs to own /usr/share/man/man[18] system
    directories.
  - Start using RPM dependencies for Perl CPAN modules. Users who
    install directly from CPAN will have to use --nodeps.
  - Start daemon in UNIX mode only by default.
  - Build foundation-demo RPM with MV_DEMO_MODE set.
  - On uninstall, remove autogenerated /usr/lib/interchange/etc/varnames
  - Start using Red Hat standard /sbin/service instead of directly
    running /etc/rc.d/init.d/interchange.
  - Add standard 'reload' function as alias for restart.
  - Quell /sbin/service stop errors.
  - Let user see if we turn off old IC server before install/upgrade.
  - Make packages architecture-dependent, to save lots of hassles.
  - Stop checking for /home/httpd, but use a define for webdir
    that can easily be changed if needed.


------------------------------------------------------------------------------


Interchange 4.9.0 "released" only via CVS


------------------------------------------------------------------------------

(end)
