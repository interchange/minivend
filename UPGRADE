-----------------------------------------------------------------------------

                U P G R A D I N G     I N T E R C H A N G E


Interchange is designed to be drop-in compatible in its major version.

 5.0.x -- There should be few to no compatibility issues in
          upgrading from another 5.x version.

 4.8.x -- There should be only a few issues in upgrading from 4.8.x; known
          issues are shown below.
          
 4.6.x -- Upgrading from 4.6.x and before is problematic, and you would
          be well-advised to find a competent consultant to help you.
          interchange-biz@icdevgroup.org is a mail list designed to
          help Interchange users connect with consultants.

INSTALLING INTERCHANGE IN THE SAME LOCATION
--------------------------------------------

NOTE:    All below procedures assume you have installed in
         /usr/local/interchange -- substitute paths as appropriate.

WARNING: BACK UP EVERYTHING BEFORE YOU START!

    1. Make a tar backup of your Interchange software directory, i.e.
       
        tar czvf ~/ic_backup.tar.gz /usr/local/interchange 

    2. Unpack the new version of the software and change
       to that directory.

        tar xzf interchange-5.x.x.tar.gz
        cd interchange-5.x.x

    3. You can see the section below, "TO TEST BEFORE YOU UPGRADE", if
       you want to try it out before you switch your running catalog.

    4. Install it in the same location as your current software:

        ## Create the makefile
        perl Makefile.PL prefix=/usr/local/interchange

        ## Make the software
        make

        ## Test -- if this fails, don't worry too much.
        make test

        ## Install the software
        make install

    5. You don't need to run makecat again!!!

    6. Restart Interchange.

That's it. Verify your catalog's operation, and you are live.

---------------------------------------------------------------------------

                K N O W N   I S S U E S

KNOWN ISSUES UPGRADING FROM 5.0.x

	None.


KNOWN ISSUES UPGRADING FROM 4.8.x

Interchange is designed to be compatible between major versions, and
for the most part a catalog designed under Interchange 4.8 should
be compatible with 5.0.

More information on upgrades is available in the document icupgrade, part
of the Interchange documentation package.

UPGRADE NOTES FOR FOUNDATION-STYLE CATALOGS
-------------------------------------------

* Add a new columns "extended" products/mv_metadata.asc. This just involves
  adding a TAB and "extended" to the end of the first line of the file.

* Remove variables UI_IMAGE_DIR and UI_IMAGE_DIR_SECURE or point
  them to the new location, e.g. replace /interchange/
  with /interchange-5/.

* If you didn't follow Interchange's SKU naming convention for Matrix
  options, and assigned them arbitrary part numbers, or you hand-edited
  the options table, you may find that your product options don't work. 
  You should post the question to the user mail list or contact a
  competent Interchange consultant at interchange-biz@icdevgroup.org.

* You might receive a message about "history-scan tag overrides global
  definition". This is because that tag was moved into the Interchange
  global UserTag area.
  
  To stop this message, simply remove the history-scan
  UserTag from your catalog.cfg file. 
  
  If you customized that tag, you will have to either perform the
  customizations on the global tag or put up with the message.

* The static-page build capability is no longer supported in
  Interchange 5. You will receive warnings about "Directive StaticPath
  no longer supported at line XXX". 

  To stop these warnings, remove the NoCache directive and any
  directive beginning with "Static" from your catalog.cfg file.
  In the foundation-style catalog, these are all located near
  each other.

  If you use the static page build facility, there are other means of
  accomplishing the same thing with scripts. Contact a competent
  Interchange consultant at interchange-biz@icdevgroup.org to get help.

* See the section "PROBLEMS WITH USERTAGS" below.

---------------------------------------------------------------------------

TO TEST BEFORE YOU UPGRADE
--------------------------

YOU SHOULD STILL BACK UP, and in addition it is recommended you back
up your catalog. While the new server should not impact your running
catalog beyond normal catalog interaction for orders, statistics,
userdb, and such, it is not outside of the realm of possiblity that
something could happen. It should not happen in a catalog that is
based on Foundation and not heavily customized (i.e. using global UserTag
routines).

1. Install the new Interchange 5.x.x in /usr/lib/interchange-5.x.x
using the procedure from INSTALL.

2. Make /usr/lib/interchange-5.x.x/interchange.cfg match your
/usr/lib/interchange.cfg. Note that there may be new options; but the
existing one should work if you just copy it.

3. Run bin/compile_link:

    cd /usr/lib/interchange-5
    bin/compile_link -p 7787
    
NOTE: If you use the INET mode linking method, you have to run the
      test server on a different port. Assuming you use the standard
      7786 on your live catalog, you would add to interchange.cfg:

         TcpMap  localhost:7787

After running compile_link, you should see four new files in the
/usr/lib/interchange-5.x.x/src:

-rwxr-xr-x  1 root  root  8088 Oct  3 09:59 tlink
-rwxr-xr-x  1 root  root  8088 Oct  3 09:59 tlink.localhost.7787
-rwxr-xr-x  1 root  root  7704 Oct  3 09:59 vlink
-rwxr-xr-x  1 root  root  7704 Oct  3 09:59 vlink._usr_lib_interchange_5_etc_socket

4. Note the Catalog lines in your interchange.cfg:

  EXAMPLE:

    Catalog foundation /var/lib/interchange/foundation /cgi-bin/foundation

You should comment out all but the one you want to test.

5. Change the /cgi-bin/foundation script link name to /cgi-bin/test5.

  EXAMPLE:

    Catalog foundation /var/lib/interchange/foundation /cgi-bin/test5

6. Copy the src/vlink (UNIX mode) or src/tlink (INET mode) link executable
to your CGI directory and name it "test5", i.e.

  EXAMPLE:

    cp src/vlink /var/www/cgi-bin/test5

7. IMPORTANT: Make sure its permissions match the permissions on your
running 4.x catalog! You may have to make it SUID, i.e.:

  EXAMPLE:

    chmod u+s /var/www/cgi-bin/test5

That should only be done if you are in UNIX mode and your current 
link program is SUID.

8. Add this line to the /usr/lib/interchange-5/interchange.cfg file:

    Variable TEST_SERVER 1

9. Copy any *custom* global UserTag files to the usertag/ directory. Do not
copy any that were distributed with Interchange if you did not modify them.

10. Copy the new Interchange image and CSS files to the interchange-5
subdirectory in your document root, i.e.:

        EXAMPLE:

                cp -r /usr/lib/interchange-5/share/interchange \
                          /var/www/html/interchange-5

11. Modify your /var/lib/interchange/foundation/catalog.cfg file to
point the URLs to the test server if appropriate by placing at the
end:

   ifdef @TEST_SERVER
   Variable  CGI_URL             /cgi-bin/test5
   Variable  UI_IMAGE_DIR        /interchange-5/
   Variable  UI_IMAGE_DIR_SECURE /interchange-5/
   ## This ensures the UI image directory will be set properly
   Pragma    dynamic_variables_file_only
   VendURL   http://__SERVER_NAME____CGI_URL__
   SecureURL   https://__SERVER_NAME____CGI_URL__
   endif

12. Start the new interchange server:

    /usr/lib/interchange-5/bin/restart

At that point, your catalog should be running on both Interchange 5 and
Interchange 4. Test thoroughly and then upgrade. Note that the UI will
be significantly changed, and that all features of the UI may not be
supported by your old catalog. The customer-facing side should function
in much the same way.

------------------------------------------------------------------------

UPGRADING FROM 4.6.x

It is not recommended that you update your catalog from 4.6.x unless
you are very proficient in Perl and Interchange. It is usually better
to build a new catalog from scratch, and integrate your look and 
feel with that. Contact a competent Interchange consultant to help
(interchange-biz@icdevgroup.org).

That being said, here are some of the issues.

If you have this line in interchange.cfg:

        #include usertag/*

       You should change it to:

        include usertag/*.tag

       (The leading # sign is no longer needed).

       If you have created any other UserTag definitions you will need
       to either rename the file to add a .tag extension, or include
       them explicitly like:

          include usertag/my_tag

       See the "problems with UserTags" section, below.
  
If you use CyberCash, you should replace these lines in catalog.cfg
        
        Variable CYBER_MODE       mauthonly
        Variable CYBER_CONFIGFILE /path/to/your/merchant_conf

    with
        
        Variable MV_PAYMENT_MODE        cybercash
        Variable MV_PAYMENT_CONFIGFILE  /path/to/your/merchant_conf

There is one security change that can break constructs that ran under 4.6.x.

    safe_data=1

        If you had a database object which contained ITL tags and
        they now show up as [itl-tag arg=val], then you probably
        need to add the safe-data=1 parameter around your [loop ...]
        or [query ...] construct.

        The reason this change was made was the capability of Interchange
        to directly enter user submissions into a database. If the
        user put in something in [square brackets], knowingly or even
        unknowingly, it could cause anomalous or insecure behavior. 
        (There were no known exploits in the demo, but they could
        easily be constructed.


PROBLEMS WITH USERTAGS
----------------------

You may see the following error/warning messages when you (re)start
Interchange:

1. Duplicate usertag xxxx found.

    This message is most likely to mean that you have a global "usertags"
    directory included from your interchange.cfg file.  Interchange 4.9 has a
    new location (code/UserTag) for global UserTags.  Your old globals may
    "clash" with the new ones.  Delete the old usertags that are named in the
    error messages.  As always, it is recommended that you back up everything
    before you start.

    This message will also be raised if Interchange notices two local UserTags
    with the same name.  If this is detected then rename or delete one of the
    two UserTags.

2. Local usertag xxxx overrides global definition.

    This message is most likely to refer to your local history_scan UserTag.
    If you have this tag definition in your catalog.cfg file then you may
    safely delete it;  Interchange 4.9 includes this as a global UserTag.

    This message will also be raised if you have created a local UserTag
    and have given it a name identical to one of the global tags (SystemTag,
    UserTags, UI_Tag etc.)  The message is only a warning as your local UserTag
    will override the global one.  If you didn't mean to override the global
    tag of the same name then simply rename your tag and restart Interchange.
