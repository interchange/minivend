=head1 NAME

ictags - Interchange Tags Reference

=head1 DESCRIPTION

=head1 Interchange Tag Reference

Interchange functions are accessed via ITL, the Interchange Tag
Language. The pages in a catalog may be mostly HTML, but they will use
ITL tags to provide access to Interchange's functions. ITL is a
superset of MML, or Minivend Markup Language. Minivend was the
predecessor to Interchange.

These tags perform various display and modification operations for the
user session. There nearly 100 standard predefined tags, and the
UserTag facility allows you to create tags fully as powerful that
perform your own functions.

This document covers Interchange versions 4.7-4.8.

=head2 Tag Syntax

ITL tags are similar to HTML in syntax, in that they accept parameters
or attributes and that there are both I<standalone> and I<container>
tags.

We will call an attribute a I<parameter> if it may be called
positionally or if it must be included (see the I<parameter> and
I<attribute> sections below).

A standalone tag has no ending element, e.g.:

    [value name]

This tag will insert the user's name, providing they have given it to
you in a form. A container tag has both a beginning and an ending
element, as in:

    [if value name]
    You have a name. It is [value name].
    [/if]

We will usually call the ITL tags B<Interchange tags> or just B<tags>.

Standard Syntax

The most common syntax is to enclose the tag with its parameters and
attributes in [square brackets]. If the tag has an end tag, the tag
and its end tag will delimit contained body text:

  [tagname parameters attributes]Contained Body Text[/tagname]

B<Caveat - macros: >Some macros look like tags or end tags. For
example, [/page] is a macro for </A>. This allows you to
conveniently write [page I<href>]Target[/page], but 'Target' is
not treated as contained body text.



When using the [tagname ...] syntax, there must be no whitespace
between the left bracket ('[') and the tagname.

If a tag name includes an underscore or dash, as in I<item_list>, a
dash is just as appropriate (i.e. item-list). The two forms are
interchangeable, except that an ending tag must match the tag (i.e.,
don't use [item-list] list [/item_list]).

HTML-Comment

ITL also allows you to use '<!--[' and ']-->' as interchangeable
alternatives to plain square brackets: [tagname] and
C<<!--[tagname]--E<gt>> are equivalent.

This allows you make your raw tags appear as comments to HTML browsers
or editors. You might want to do this if your editor has trouble with
ITL tags when editing Interchange page templates, or alternatively, if
you want to use one .html file both as an Interchange template and as
a static page delivered directly by your web server, without
Interchange processing.

To properly HTML-comment contained body text, place your comment-style
brackets appropriately, for example:

 <!--[tagname] Contained Body Text [/tagname]-->

Note that you must include whitespace between the HTML comment
delimiters and the square brackets if you wish to actually comment out
tag output in the browser. For example, if [value name] expands to
'Bill':

 '<!--[value name]-->'  becomes  'Bill'
 '<!-- [value name] -->'  becomes  '<!-- Bill -->'

Technical notes

While '<!--[' and '[' are interchangeable, the Interchange parser does
not replace ']-->' with ']' unless it sees '<!--[' elsewhere in the
page.

See the I<Template Parsing Order> appendix if you are modifying the
special administrative interface pages and intend to use this syntax.

HTML-Embedded

As an alternative syntax, you can usually embed an Interchange tag as
an attribute within an HTML tag. This allows some HTML editors to work
more easily with Interchange templates (though you should consider the
above HTML-comment-style brackets first). The following is a basic
example of HTML-Embedded syntax:

  <HTMLtag MV="tagname positional parameters" other HTML attributes>

The following examples will each loop over any items in the shopping
cart, displaying their part number, description, and price, but only
IF there are items in the cart.

=over 4

=item

HTML syntax:

    <TABLE MV="if items">

=back
    <TR MV="item-list">
    <TD> [item-code] </TD>
    <TD> [item-description] </TD>
    <TD> [item-price] </TD>
    </TR></TABLE>

=over 4

=item

Standard syntax:

    [if items]

=back
    <TABLE>
    [item-list]
    <TR>
    <TD> [item-code] </TD>
    <TD> [item-description] </TD>
    <TD> [item-price] </TD>
    </TR>
    [/item-list]</TABLE>
    [/if]

B<Note - Disabling HTML-embedded tags for performance: >

Avoid the HTML-embedded usage if you can.

The foundation catalog included with interchange disables parsing of
the HTML-embedded syntax. This is for better performance, since it
saves the server from checking every HTML tag for interchange tag
calls. This is done in the catalog by setting the pragma
no_html_parse in catalog.cfg.



I<Named vs. Positional Parameters>

There are two styles of supplying parameters to a tag - named and
positional.

In the named style you supply a parameter/value pair just as most HTML
tags use:

    [value name="foo"]

The same thing can be accomplished for the [I<value>] tag with

    [value foo]

The parameter name is the first positional parameter for the
[I<value>] tag. Some people find positional usage simpler for
common tags, and Interchange interprets them somewhat faster. If you
wish to avoid ambiguity you can always use named calling.

In most cases, tags specified in the positional fashion will work the
same as named parameters. The only time you will need to modify them
is when there is some ambiguity as to which parameter is which
(usually due to whitespace), or when you need to use the output of a
tag as the parameter or attribute for another tag.

Interpolating parameters

If you wish to use the value of a tag within a parameter of another
tag, you cannot use a positional call. You must also double-quote the
argument containing the tag you wish to have expanded. For example,
this will not work:

    [page scan se=[scratch somevar]]

To get the output of the [scratch somevar] interpreted, you must
place it within a named and quoted attribute:

    [page href=scan arg="se=[scratch somevar]"]

Note that the argument to B<href> ('scan') did not need to be quoted;
only the argument to B<arg>, which contained a tag, needed the quotes.

I<Universal Attributes>

Universal attributes apply to all tags, though each tag specifies its
own default for the attribute. The code implementing universal
attributes is external to the core routines that implement specific
tags.

I<interpolate>

This attribute behaves differently depending on whether the tag is a
I<container> or I<standalone> tag. A container tag is one which has an
end tag, i.e. [tag] stuff [/tag]. A standalone tag has no end tag,
as in [I<area> href=somepage]. (Note that [I<page> ...] and [I<order>
..] are B<not> container tags.)

I<For container tags (interpolated)>

=over 4

=item *

If true ("interpolate=1"), the interchange server will first process
any tags within the body text before passing it to the enclosing tag.

=item *

If false ("interpolate=0"), the enclosing tag will receive the raw
body text.

=back

I<For standalone tags (reparsed)>

=over 4

=item *

If true, the server will process the I<output> of the tag. This is
identical to the behavior of the I<reparse> attribute (see below for
explanation and examples).

=back

(Note: The mixing of 'interpolate' and 'reparse' logic occurred
because 'interpolate' already worked this way when 'reparse' was added
to interchange. This may be fixed in a later release...)

Most standalone tags are not reparsed by default (i.e., interpolate=0
by default). There are some exceptions, such as the [I<include>] tag.

Interpolation example:

Assuming that name is 'Kilroy',

   [log interpolate=1][value name] was here[/log]
   [log interpolate=0][value name] was here[/log]

the first line logs 'Kilroy was here' to I<catalog_root>/etc/log,
while the second logs '[value name] was here'.

Reparsing example:

Suppose we set a scratch variable called 'now' as follows:

   [set name=now interpolate=0][time]%A, %B %d, %Y[/time][/set]

If today is Monday, January 1, 2001,

   [scratch name=now interpolate=0]
   [scratch name=now interpolate=1]

the first line yields

   [time]%A, %B %d, %Y[/time]

while the second yields

   Monday, January 1, 2001

I<reparse>

If true ("reparse=1"), the server will process any tags in the text
output by the reparsed tag.

Reparse applies only to container tags (those with an end tag). The
interpolate attribute controls reparsing of the output of
standalone tags (see above).

Most container tags will have their output re-parsed for more
Interchange tags by default. If you wish to inhibit this behavior, you
must explicitly set the attribute B<reparse> to 0. Note that you will
almost always want the default action. The only container ITL tag that
doesn't have reparse set by default is [I<mvasp>].

Example:

Assuming that name is 'Kilroy',

  1.   [perl reparse=0]
          my $tagname = 'value';
          return "[$tagname name] was here\n"
       [/perl]

  2.   [perl reparse=1]
          my $tagname = 'value';
          return "[$tagname name] was here\n"
       [/perl]

expands to

  1.   [value name] was here

  2.   Kilroy was here

I<send>

Deprecated

Tag-specific Attributes

Each tag may accept additional named attributes which vary from tag to
tag. Please see the entry for the tag in question for details about
tag-specific attributes.

I<Attribute Arrays and Hashes>

Some tags allow you to pass an array or hash as the value of an
attribute. For an ordinary tag, the syntax is as follows:

    attribute.n=value

    attribute.hashkey=value

where I<n> is an integer array index. Note that you cannot use both an
array and a hash with the same attribute - if you use
B<attribute.I<n>>, you cannot also use B<attribute.key> for the same
attribute.

Here is an example of an attribute array:

    search.0="se=hammer
              fi=products
              sf=description"
    search.1="se=plutonium
              fi=products
              sf=comment"

The [page] tag, for example, treats a search specification array as
a joined search, automatically adding the other relevant search
fields, including the 'co=yes' to indicate a combined search (I<joined
searches> are described in the Interchange database documentation).

Note that it is up to the tag to handle an array or hash value
properly. See the documentation for the specific tag before passing it
an attribute array or hash value.

Perl calls

Before passing attributes to a tag, the interchange parser would
convert the above example to an anonymous array reference. It would
use the resulting arrayref as the value for the 'search' attribute in
this example.

If you were passing the above example directly to a tag routine within
a [perl] block or a usertag, you must actually pass an anonymous
array as the value of the attribute as S<follows:>

    my $arrayref = [ "se=hammer/fi=products/sf=description",
                     "se=plutonium/fi=products/sf=description", ];

    $Tag->routine( { search => $arrayref, } );

Similarly to use a hash reference for the 'entry' attribute:

    my $hashref = { name   => "required",
                    date   => 'default="%B %d, %Y"', };

    $Tag->routine( { entry => $hashref } );

=head2 Looping tags and Sub-tags

I<>Certain tags are not standalone; these are the ones that are
interpreted as part of a surrounding looping tag like [loop],
[item-list], [query], or [region].

=over 4

=item

[PREFIX-accessories]

[PREFIX-alternate]

[PREFIX-calc]

[PREFIX-change]

[PREFIX-code]

[PREFIX-data]

[PREFIX-description] (Note safe-data and ed( ) escape)

[PREFIX-discount]

[PREFIX-discount_subtotal]

[PREFIX-exec]

[PREFIX-field] (Optimization note-- one query per field if you use
this; we optimize around this if only one products table)

[PREFIX-filter] (like filter tag but doesn't interpolate)

[PREFIX-increment]

[PREFIX-last]

[PREFIX-line] (tab-delimited list of parameters returned, can do
tail-slice)

[PREFIX-match]

[PREFIX-modifier]

[PREFIX-next]

[PREFIX-param]

[PREFIX-options]

[PREFIX-price]

[PREFIX-quantity]

[PREFIX-sub]

[PREFIX-subtotal]

[if-PREFIX-data]

[if-PREFIX-field]

[if-PREFIX-param]

[if-PREFIX-modifier] (hash list only)

[if-PREFIX-pos]

[modifier-name]

[quantity-name]

=back

PREFIX represents the prefix that is used in that looping tag. They
are only interpreted within their container and only accept positional
parameters. The default prefixes:

 Tag                   Prefix                  Examples
 [loop]                loop                    [loop-code], [loop-field price], [loop-increment]
 [item-list]           item                    [item-code], [item-field price], [item-increment]
 [search-list]         item                    [item-code], [item-field price], [item-increment]
 [query]               sql                     [sql-code], [sql-field price], [sql-increment]

Sub-tag behavior is consistent among the looping tags.

There are two types of looping lists; ARRAY and HASH.

An array list is the normal output of a [query], a search, or a
[loop] tag. It returns from 1 to N return fields, defined in the
mv_return_fields or rf variable or implicitly by means of a SQL
field list. The two queries below are essentially identical:

    [query sql="select foo, bar from products"]
    [/query]

    [loop search="
                    ra=yes
                    fi=products
                    rf=foo,bar
    "]

Both will return an array of arrays consisting of the foo column
and the bar column. The Perl data structure would look like:

    [
        ['foo0', 'bar0'],
        ['foo1', 'bar1'],
        ['foo2', 'bar2'],
        ['fooN', 'barN'],
    ]

A hash list is the normal output of the [item-list] tag. It returns
the value of all return fields in an array of hashes. A normal
[item-list] return might look like:

    [
        {
            code     => '99-102',
            quantity => 1,
            size     => 'XL',
            color    => 'blue',
            mv_ib    => 'products',
        },
        {
            code     => '00-341',
            quantity => 2,
            size     => undef,
            color    => undef,
            mv_ib    => 'products',
        },

    ]

You can also return hash lists in queries:

    [query sql="select foo, bar from products" type=hashref]
    [/query]

Now the data structure will look like:

    [
        { foo => 'foo0', bar => 'bar0' },
        { foo => 'foo1', bar => 'bar1' },
        { foo => 'foo2', bar => 'bar2' },
        { foo => 'fooN', bar => 'barN' },
    ]

Parse Order

Subtags are parsed during evaluation of the enclosing loop, I<before>
any regular tags within the loop

[I<PREFIX-accessories> arglist]

Except for the usual differences that apply to all subtags (such as
parsing order), these are more or less equivalent for an array-type
S<list:>

   [accessories code=current_item_code arg=arglist]
   [item-accessories arglist]

See the accessories tag for more detail. Note that you must use the
comma-delimited list to set attributes - you cannot set named
attributes with the usual 'attribute=value' syntax.

If the list is a hash list, i.e. an [item-list], then the value of the
current item hash is passed so that a value default can be
established.

[I<PREFIX-alternate> N] DIVISIBLE [else] NOT DIVISIBLE
[/else][/PREFIX-alternate]

Set up an alternation sequence. If the item-increment is divisible by
`N', the text will be displayed. If an `[else]NOT DIVISIBLE
TEXT[/else]' is present, then the NOT DIVISIBLE TEXT will be
displayed.

For example:

    [item-alternate 2]EVEN[else]ODD[/else][/item-alternate]
    [item-alternate 3]BY 3[else]NOT by 3[/else][/item-alternate]

[I<PREFIX-calc>] 2 + [item-field price] [/PREFIX-calc]

Calls perl via the equivalent of the [calc] [/calc] tag pair. Much
faster to execute.

[I<PREFIX-change>][condition] ... [/condition] TEXT [/PREFIX-change]

Sets up a breaking sequence that occurs when the contents of
[condition] [/condition] change. The most common one is a category
break to nest or place headers.

The region is only output when a field or other repeating value
between [condition] and [/condition] changes its value. This allows
indented lists similar to database reports to be easily formatted. The
repeating value must be a tag interpolated in the search process, such
as [PREFIX-field field] or [PREFIX-data database field]. If you
need access to ITL tags, you can use [PREFIX-calc] with a $Tag->foo()
call.

Of course, this will only work as you expect when the search results
are properly sorted.

The value to be tested is contained within a
[condition]value[/condition] tag pair. The [PREFIX-change] tag
also processes an [else] [/else] pair for output when the value
does not change.

Here is a simple example for a search list that has a field
category and subcategory associated with each item:

 <TABLE>
 <TR><TH>Category</TH><TH>Subcategory</TH><TH>Product</TH></TR>
 [search-list]
 <TR>
    <TD>
         [item-change cat]

         [condition][item-field category][/condition]

                 [item-field category]
         [else]
                 &nbsp;
         [/else]
         [/item-change cat]
    </TD>
    <TD>
         [item-change sub]

         [condition][item-field subcategory][/condition]

                 [item-field subcategory]
         [else]
                 &nbsp;
         [/else]
         [/item-change sub]
    </TD>
    <TD> [item-field name] </TD>
 [/search-list]
 </TABLE>

The above should put out a table that only shows the category and
subcategory once, while showing the name for every product. (The
&nbsp; will prevent blanked table cells if you use a border.)

[I<PREFIX-code>]

The key or code of the current loop. In an [item-list] this is always
the product code; in a loop list it is the value of the current
argument; in a search it is whatever you have defined as the first
mv_return_field (rf).

[I<PREFIX-data> table field]

Calls the column field in database table table for the current
[PREFIX-code]. This may or may not be equivalent to [PREFIX-field
field] depending on whether your search table is defined as one of
the ProductFiles.

[I<PREFIX-description>]

The description of the current item, as defined in the catalog.cfg
directive DescriptionField. In the demo, it would be the value of
the field description in the table products.

If the list is a hash list, and the lookup of DescriptionField
fails, then the attribute description will be substituted. This is
useful to supply shopping cart descriptions for on-the-fly items.

[I<PREFIX-discount>]

The price of the current item is calculated, and the difference
between that price and the list price (quantity one) price is output.
This may have different behavior than you expect if you set the
[discount] [/discount] tag along with quantity pricing.

[I<PREFIX-discount_subtotal>]

Inserts the discounted subtotal of the ordered items.

[I<PREFIX-field>]

Looks up a field value for the current item in one of several places,
in this order:

    1. The first ProductFiles entry.
    2. Additional ProductFiles in the order they occur.
    3. The attribute value for the item in a hash list.
    4. Blank

A common user error is to do this:

    [loop search="
                    fi=foo
                    se=bar
                "]

    [loop-field foo_field]
    [/loop]

In this case, you are searching the table foo for a string of
bar. When it is found, you wish to display the value of
foo_field. Unless foo is in ProductFiles and the code is not
present in a previous product file, you will get a blank or some value
you don't want. What you really want is [loop-data foo foo_field],
which specifically addresses the table foo.

[I<PREFIX-increment>]

The current count on the list, starting from either 1 in a
zero-anchored list like [loop] or [item-list], or from the match
count in a search list.

If you skip items with [PREFIX-last] or [PREFIX-next], the count is
NOT adjusted.

[I<PREFIX-last>] CONDITION [/PREFIX-last]

If CONDITION evaluates true (a non-whitespace value that is not
specifically zero) then this will be the last item displayed.

[I<PREFIX-modifier> attribute]

If the item is a hash list (i.e. [item-list]), this will return the
value of the attribute.

[I<PREFIX-next>] CONDITION [/PREFIX-next]

If CONDITION evaluates true (a non-whitespace value that is not
specifically zero) then this item is skipped.

[I<PREFIX-param> name]

[I<PREFIX-pos> N]

Returns the array parameter associated with the looping tag row. Each
looping list returns an array of return fields, set in searches
with mv_return_field or rf. The default is only to return the
code of the search result, but by setting those parameters you can
return more than one item.

In a [query ...] ITL tag you can select multiple return fields with
something like:

    [query prefix=prefix sql="select foo, bar from baz where foo=buz"]
        [prefix-code]  [prefix-param foo]  [prefix-param bar]
    [/query]

In this case, [prefix-code] and [prefix-param foo] are synonymns, for
foo is the first returned parameter and becomes the code for this
row. Another synonym is [prefix-param 0]; and [prefix-param 1] is the
same as [prefix-param bar].

[I<PREFIX-price>]

The price of the current code, formatted for currency. If
Interchange's pricing routines cannot determine the price (i.e. it is
not a valid product or on-the-fly item) then zero is returned. If the
list is a hash list, the price will be modified by its quantity or
other applicable attributes (like size in the demo).

[I<PREFIX-quantity>]

The value of the quantity attribute in a hash list. Most commonly
used to display the quantity of an item in a shopping cart
[item-list].

[I<PREFIX-subtotal>]

The [PREFIX-quantity] times the [PREFIX-price]. This does take
discounts into effect.

[I<if-PREFIX-data> table field] IF text [else] ELSE text [/else]
[/if-PREFIX-data]

Examines the data field, i.e. [PREFIX-data table field], and if it is
non-blank and non-zero then the IF text will be returned. If it is
false, i.e. blank or zero, the ELSE text will be returned to the
page.

This is much more efficient than the otherwise equivalent [if
type=data term=table::field::[PREFIX-code]].

You cannot place a condition; i.e. [if-PREFIX-data table field eq
'something']. Use [if type=data ...] for that.

Careful, a space is not a false value!

[I<if-PREFIX-field> field] IF text [else] ELSE text [/else]
[/if-PREFIX-field]

Same as [if-PREFIX-data ...] except uses the same data rules as
[PREFIX-field].

[I<modifier-name> attribute]

Outputs a variable name which will set an appropriate variable name
for setting the attribute in a form (usually a shopping cart). Outputs
for successive items in the list:

    1. attribute0
    2. attribute1
    3. attribute2

etc.

[I<quantity-name>]

Outputs for successive items in the list:

    1. quantity0
    2. quantity1
    3. quantity2

etc. [modifier-name quantity] would be the same as
[quantity-name].

=head1 Tags

Each ITL tag is show below. Calling information is defined for the
main tag, sub-tags are described in Sub-tags.

=head2 accessories

A swiss-army-knife widget builder, this provides access to
Interchange's product option attributes (e.g., to choose or access
product options such as a shirt's size or color).

Can build selection objects (radio, check, select boxes, etc), forms
or hyperlinks, or can simply return a value.

Or more - see also I<Looping tags and Sub-tags>.

Summary

    [accessories code arg other_named_attributes]
    [accessories code=os28044 arg="size, radio, ... " other_named_attributes] deprecated
    [accessories code=os28044 attribute=size type=radio ... other_named_attributes]

 Parameters   Description                               Default
 code         Value of the master key in the product (or specified other) tablenone
 arg          Positionally interpreted comma-delimited list of values for the following attributes:"attribute, type, column, table, name, outboard, passed"none

 Attributes                        Default
 attribute                         none
 typeOne of select, value, text, textarea, hidden, password, combo, move_combo, reverse_combo, show, options, labels, checkbox, radio, linksselect
 column                            attribute
 table                             products
 name                              mv_order_attribute
 outboard                          none
 passed                            none
 key (alias for code)              none
 row (alias for code)              none
 base (alias for table)            products
 database (alias for table)        products
 db (alias for table)              products
 col (alias for column             attribute
 field (alias for column           attribute
 delimiter                         comma (',')
 prepend                           none
 append                            none
 extra                             none
 js                                none
 rows                              varies with type; often 4
 cols                              varies with type; often 40
 width                             none
 default                           none
 price                             none
 price_data                        none
 contains (type=radio or check)    none
 joiner (type=links)               none
 href (type=links)                 none
 template (type=links)             none
 form (type=links)                 mv_action=return
 empty (type=links)                none
 secure (type=links)               none
 new                               none
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 No
 Container tag                     No
 Has Subtags                       No

B<Tag expansion example:>

    [accessories os28044 size]
---------------------------------------------------------------
    <SELECT NAME="mv_order_size"><OPTION VALUE="10oz">10oz\
    <OPTION VALUE="15oz">15oz<OPTION VALUE="20oz">20oz</SELECT>

B<ASP-like Perl call:>

    $Tag->accessories(  { code   => '[[EXAMPLE_SKU]]',
                          arg    => 'color, radio'
                          table  => 'special_products', }  );

or similarly with positional parameters,

    $Tag->accessories($code, $arg, $attribute_hash_reference);

See Also

I<Looping tags and Sub-tags>.

Description

This is the swiss-army-knife widget builder for providing access to
Interchange's product option attributes (e.g., to choose or access
product options such as a shirt's size or color).

Interchange allows you to choose item attribute values for each
ordered item - you can attach a size, color, or other modifier to a
line item in the shopping cart. You can also resubmit previous
attribute values via hidden fields on a form.

The catalog.cfg file directive I<UseModifier> is used to set the
name of the modifier or modifiers. For example

    UseModifier        size color

will attach both a size and color attribute to each item code that is
ordered.

B<Important Note -- >You may not use the following names for
attributes:

item  group  quantity  code  mv_ib  mv_mi  mv_si



You can also set modifier names with the mv_UseModifier scratch
variable - [set mv_UseModifier]size color[/set] has the same effect
as above. This allows multiple options to be set for products.
Whichever one is in effect at order time will be used. Be careful; you
cannot set it more than once on the same page. Setting the
mv_separate_items or global directive I<SeparateItems> places each
ordered item on a separate line, simplifying attribute handling. The
scratch setting for mv_separate_items has the same effect.

The modifier value is accessed in the [item-list] loop with the
[item-param attribute] tag, and form input fields are placed with
the [modifier-name attribute] tag. This is similar to the way that
quantity is handled.

B<Note: >You must be sure that no fields in your forms have digits
appended to their names if the variable is the same name as the
attribute name you select, as the [modifier-name size] variables
will be placed in the user session as the form variables size0, size1,
size2, etc.



Interchange will automatically generate the select boxes when the
[accessories code=os28044 attribute=size] or [item-accessories
size] tags are called. They have the syntax:

   [item-accessories attribute, type, column, table, name, outboard, passed]

   [accessories code=sku
                attribute=modifier
                type=select
                column=db_table_column_name
                table=db_table
                name=varname
                outboard=key
                passed="value=label, value2*, value3=label 3" ]

   [accessories js=| onChange="set_description(simple_options, variant)"; |
                type=select
                name="[item-param o_group]"
                passed="=--choose--,[item-param o_value]" ]

B<Notes: >

=over 4

=item 1.

The 'attribute' attribute is required.

=item 2.

See the type attribute for a list of types.

=item 3.

The trailing '*' in value2 will mark it as the default ('SELECTED')
value in the select widget (see below).

=back



When called with an attribute, the database is consulted and looks for
a comma-separated list of item attribute options. They take the form:

   name_a=Label Text1, default_name=Default Label Text*, name_b, etc.

The label text is optional - if none is given, the B<name> will be
used (as in 'name_b' above).

If an asterisk is the last character of the label text, the item is
the default selection. If no default is specified, the first will be
the default. An example:

    [item-accessories color]

This will search the product database for a field named "color". If an
entry "beige=Almond, gold=Harvest Gold, White*, green=Avocado" is
found, a select box like this will be built:

    <SELECT NAME="mv_order_color">
    <OPTION VALUE="beige">Almond
    <OPTION VALUE="gold">Harvest Gold
    <OPTION SELECTED>White
    <OPTION VALUE="green">Avocado
    </SELECT>

In combination with the mv_order_item and mv_order_quantity
session variables, you can use this to allow a customer to enter an
item attribute during an order.

If used in an item list, and the user has changed the value, the
generated select box will automatically retain the current value the
user has selected.

The value can then be displayed with [item-modifier color] on the
order report, order receipt, or any other page containing an
[item-list].

Emulating with a loop

You can also build widgets directly, without using the accessories
tag. You may have to do so if you need more control of the content
than the tag offers. Below is a fragment from a shopping basket
display form which shows a selectable size with "sticky" setting and a
price that changes based upon the modifier setting. (Note that this
example would normally be contained within the
[item_list][/item-list] pair.)

    <SELECT NAME="[modifier-name size]">
    [loop option="[modifier-name size]" list="S, M, L, XL"]
    <OPTION> [loop-code] -- [price code="[item-code]" size="[loop-code]"]
    [/loop]
    </SELECT>

The output of the above would be similar to the output of
[item-accessories size, select] if the product database field size
contained the value S, M, L, XL. The difference is that the options
in the loop emulation show the adjusted price in addition to the size
within each option value.

I<Hash Lists> - Technical Note

As a technical note, some of the features of this tag work differently
depending on whether it was called with an '$item' hash reference, for
example, as [item-accessories] within an [item-list].

In this context, the tag will have access to ancillary data from the
item (including, perhaps, a user's chosen item attribute value). For
example, if building a TEXTAREA widget within an [item-list], the
widget will show the chosen item attribute value. On the other hand,
within an array list such as a [search-list] in a
[search-region], the widget would be empty.

If you really know what you're doing, you can pass it the item hash
reference within a perl tag like this:

   $Tag->accessories( $code,
                      undef,              # 'arg' parameter value
                      $named_attribute_hashref,
                      $item_hashref );

See also Looping tags and Sub-tags for information about hash- and
array-context in looping tags.

I<code>

This is the master key of the specified table (commonly sku in a
product table). If no table is specified, the tag uses the products
table by default.

You should not specify a code when looping on [item_accessories]
because it internally sets 'code' to the key for the current item
in the loop.

I<arg>

B<Deprecated after Interchange 4.6>

This allows you to pass values for some of the more commonly used
attributes in the manner of the [PREFIX-accessories] tag, as a
comma-delimited positional S<list:>

  arg="attribute, type, column, table, name, outboard, passed"

Whitespace within the list is optional.

If you leave out one or more of the above attributes, be sure to keep
the comma(s) if you are setting anything after it in the S<list:>

  arg="attribute, type, , table"

The above examples show the attribute names for clarity; you would
actually use the values. Hence, the previous example might actually be
something like the S<following:>

  arg="color, radio, , products"

Although you must use such a comma-delimited list to pass attributes
to the [PREFIX-accessories] tag, please use named attributes
instead for the [accessories] tag. The 'arg' attribute is
deprecated.

For detail about a specific attribute, please see its subheading
below.

I<attribute>

Despite the name, this has nothing to do with tag attributes. You can
set attributes for I<items> in a database table (typically the
products table) with the UseModifier configuration directive.
Typical are size or color.

This selects the item attribute the tag will work with.

I<type>

This determines the action to be taken. One of:

 Action                            Description
 select                            Builds a dropdown <SELECT> menu for the item attribute, with the default item attribute value SELECTED. The accessories tag builds a select widget by default if type is not set.
 display                           Shows the label text for *only the selected option* if called in Hash List context (e.g., within an [item-list]). Ignored otherwise (i.e., the tag will build the default <SELECT> menu).
 show                              Returns the list of possible attributes for the item (without labels or any HTML widget). For example, if sku os28044 is available in several sizes:[accessories os28044 size,show]-----------------------------------------Sm=10oz, Med=15oz*, Lg=20oz
 options                           This shows the attribute options as a newline delimimited list:[accessories os28044 size,options]-----------------------------------------SmMedLg
 labels                            This shows the attribute option labels:[accessories os28044 size,options]-----------------------------------------10oz15oz*20oz
 radio                             Builds a radio box group for the item, with spaces separating the elements.
 radio nbsp                        Builds a radio box group for the item, with &nbsp; separating the elements.
 radio break                       Builds a radio box group for the item, with '<br>' separating the radio button/label pairs from one another.
 radio left n                      Builds a radio box group for the item, inside a table, with the checkbox on the left side. If "n" is present and is a digit from 2 to 9, it will align the options in that many columns.You can also set FONT SIZE like this:  type="radio left n fontsizem"where -9 <= m <= 9
 radio right n                     Builds a radio box group for the item, inside a table, with the checkbox on the right side. If "n" is present and is a digit from 2 to 9, it will align the options in that many columns.You can also set FONT SIZE like this:  type="radio right n fontsizem"where -9 <= m <= 9
 check                             Builds a checkbox group for the item, with spaces separating the elements.
 check nbsp                        Builds a checkbox group for the item, with '&nbsp;' separating the checkbox/label pairs from one another.
 check break                       Builds a checkbox group for the item, with '<br>' separating the checkbox/label pairs from one another.
 check left n                      Builds a checkbox group for the item, inside a table, with the checkbox on the left side. If "n" is present and is a digit from 2 to 9, it will align the options in that many columns.You can also set FONT SIZE like this:  type="check left n fontsizem"where -9 <= m <= 9
 check right n                     Builds a checkbox group for the item, inside a table, with the checkbox on the right side. If "n" is present and is a digit from 2 to 9, it will align the options in that many columns.You can also set FONT SIZE like this:  type="check right n fontsizem"where -9 <= m <= 9
 textarea_XX_YY                    A textarea with XX columns and YY rows. The textarea will contain the selected item attribute value if used in Hash List context (e.g., within an [item-list]).If you simply use 'type=textarea', the size will default to 4 rows by 40 columns, unless you have set the rows or cols tag attributes.
 text_YY                           A text box with YY width in characters. The HTML tag's VALUE will be set to the selected item attribute value if used in Hash List context (e.g., within an [item-list]).If you simply use 'type=text', the width will default to 60, unless you have set the cols tag attribute.
 combo                             Special type, used with nullselect filter, for selecting from a list or inputting a new value
 reverse_combo                     Special type, used with last_non_null filter, for selecting from a list or inputting a new value - differs from combo in order of presentation
 move_combo                        Special type, used with null_to_space or null_to_comma filter, for selecting multiple non-ordered values from a list or inputting into a textarea
 links                             Produces a series of links based on the option values. The base form value is passed via the form parameter, just like in an [area ...] or [page ...] tag, and the value is named with the passed NAME attribute.
 value                             Returns the selected value if called in Hash List context (e.g., within an [item-list]), or nothing otherwise.
 hidden                            Creates a hidden form field. The hidden field's VALUE will be set to the selected item attribute value if used in Hash List context (e.g., within an [item-list]).
 password_YY                       A password box with YY width in characters. The HTML tag's VALUE will be set to the selected item attribute value if used in Hash List context (e.g., within an [item-list]).If you simply use 'type=password', the width will default to 12, unless you have set the cols tag attribute.

The default is 'select', which builds an HTML select form entry for
the attribute.

Some types build widgets that use the ROWS=I<m>, COLS=I<n>, or certain
other HTML attributes. For these, you can define widget rows and
columns within the string that sets the type; for example,
type="textarea_6_33_wrap=virtual" specifies a TEXTAREA widget with
ROWS=6, COLS=33, and WRAP=virtual. You should resort to this only when
you cannot use the named parameters, for example within an
[item-accessories] tag. Otherwise, use the rows=I<m> and
cols=I<n> tag attributes instead.

The result of setting conflicting values in the type string and the
rows or cols attributes is undefined.

The following list shows syntax for type strings, where I<rows> is the
number of rows and I<cols> is the number of columns.

=over 4

=item *

B<text>

=over 8

=item *

textarea   I<(default is 4 rows, 40 columns, like 'textarea_4_40')>

=item *

textarea_I<rows>_I<cols>

=item *

text_I<cols>

=item *

textarea rows=I<rows> cols=I<cols> wrap=I<WRAP value>

=back

=item *

B<password>

=over 8

=item *

password   I<(default is 12 columns, like 'password_12')>

=item *

password_I<cols>

=back

=item *

B<combo> (similarly for B<reverse_combo> and B<move_combo>)

=over 8

=item *

combo   I<(default is 1 row, 16 columns, like 'combo_1_16')>

=back

=back

I<column>

The column of the table corresponding to the attribute will
traditionally have the same name as the attribute, though it need not.

This specifies the table column that contains an item's attribute
values. The tag will find item attribute names and values in a
comma-delimited list of name=value pairs stored in this field of an
item's table entry. If unspecified, the column name will default to
the name given for the 'attribute' attribute.

For example, if an item in the products table has a 'size'
attribute, and each item's comma-delimited list of available sizes is
stored in the 'how_big' column, then you would need to specify
"column=how_big" because the tag's default column choice (size)
would be missing or used for some other purpose.

I<table>

This is the database table containing the item's attribute values. It
defaults to the first products file where the item code is found.

If you have configured your database so that the attributes are kept
in a different table from other item data, 'code' should be set to
the master key in this table. See 'outboard') if you are using
[item-accessories ...] and cannot specify code=key.

I<name>

This sets the name of the form variable to use if appropriate for the
widget being built. Defaults to 'mv_order_B<attribute>' - i.e. if the
attribute is B<size>, the form variable will be named
B<mv_order_size>.

If the variable is set in the user session, the widget will "remember"
its previous setting. In other words, [value I<name>] will contain
the previous setting, which the widget will use as its default
setting. See also the default attribute.

I<outboard>

If calling the item-accessories tag, and you wish to select from an
outboard database table whose master key is different from the item
code, you can pass the key the tag should use to find the accessory
data.

I<passed>

You can use this to pass your own values to the widget the tag will
build. If you have set passed to a list of widget options, then the
tag will simply build a widget of the specified I<type> with your
values instead of fetching an attribute value list from the database.

For example, to generate a select box with a blank option (perhaps
forcing a select), the value of blue with a label of B<Blue>, and
the value of green with a label of B<Sea Green>, do:

    [accessories type=select
                 name=color
               passed="=--select--*, blue=Blue, green=Sea Green" ]

This will generate:

    <SELECT NAME="color"><OPTION VALUE="" SELECTED>--select--\
    <OPTION VALUE="blue">Blue\
    <OPTION VALUE="green">Sea Green</SELECT>

Note: trailing backslashes ('\') in the above example indicate line
continuation and are not part of the tag output.

I<delimiter>

The list of attribute values will be a delimited string. This allows
you to specify an alternative delimiter if the list is not
comma-delimited (the default).

I<prepend>

You can set a string to prepend to the returned output of the tag.
Note that this is I<not> a list to prepend to the fetched attribute
value list, which is treated within the tag.

For example,

   [accessories code=os28044
                type=select
           attribute=size
              append="Append Me<br>"
             prepend="Prepend Me"]
------------------------------------------------------
   Prepend Me<SELECT NAME="mv_order_size">\
   <OPTION VALUE="10oz">10oz\
   <OPTION VALUE="15oz">15oz\
   <OPTION VALUE="20oz">20oz</SELECT>Append Me<br>

I<append>

You can set a string to append to the returned output of the tag. Note
that this is I<not> a list to append to the fetched attribute value
list, which is treated within the tag.

I<extra>

Setting the 'extra' attribute appends its value as the last
attribute of the HTML output tag. The following example illustrates
the append, extra and js S<options:>

   [accessories code=os28044
                type=select
           attribute=size
              append="Append Me<br>"
               extra="Last=Extra"
                  js="javascript_here"]
------------------------------------------------------
   <SELECT NAME="mv_order_size" javascript_here Last=Extra>\
   <OPTION VALUE="10oz">10oz\
   <OPTION VALUE="15oz">15oz\
   <OPTION VALUE="20oz">20oz</SELECT>Append Me<br>

I<js>

This allows you to place javascript within the start tag of the HTML
output. See the example given above for extra.

js has no default, except when 'type=move_combo', where the
default S<is:>

  onChange="addItem(this.form.Xname,this.form.name)"

I<rows>

The tag will pass the number you choose through to the HTML
'ROWS=I<n>' attribute in HTML widgets that accept it.

For some types, you can also define widget rows and columns within the
string that sets the type; for example,
type="textarea_6_33_wrap=virtual" specifies a TEXTAREA widget with
ROWS=6, COLS=33, and WRAP=virtual. You should resort to this only when
you cannot use the named parameters, for example within an
[item-accessories] tag.

The result of setting conflicting values in the type string and the
rows=I<n> attribute is undefined.

I<cols>

The tag will pass the number you choose through to the HTML
'COLS=I<n>' attribute in HTML widgets that accept it.

See also 'rows' above.

I<width>

This is a quasi-alias for 'cols' that only works with the 'text'
and '<password>' types. Use 'cols' instead.

I<default>

Sets the default attribute option in the widget returned by the tag.
This will override a default indicated with a trailing '*' in the
database or 'passed' string. This will also override the default of
a user's previous selection when the tag would otherwise have
preserved it.

For example the following selects blue by default rather than green as
it would otherwise have done,

  [accessories type=select
               name=color
             passed="blue=blue, green=Sea Green*"
            default="blue"]
------------------------
  <SELECT NAME="color"><OPTION VALUE="blue" SELECTED>blue\
  <OPTION VALUE="green">Sea Green</SELECT>
------------------------

Obscure technical note: the tag ignores the 'default' attribute if
it has an item hash reference - see Hash Lists above.

I<price>

When combined with the price_data tag attribute, this allows you to
force prices for item attributes. You probably do not want to use
this; just let the tag pick pu prices from your database table(s) when
appropriate.

If you are passing attribute values, you can use this to control the
displayed price in the widget.

  [accessories type=check
               name=color
              price=1
         price_data="blue=20, green=50"
             passed="blue=Blue, green=Sea Green*" ]
---------------------------------------------------
  <INPUT TYPE="checkbox" NAME="color" VALUE="blue" >&nbsp;Blue&nbsp;($20.00)
  <INPUT TYPE="checkbox" NAME="color" VALUE="green" CHECKED>&nbsp;Sea Green&nbsp;($50.00)

I<contains>

Requires 'type=radio' or 'type=check'.

Used to determine whether a substring match of the value will cause a
radio box or check box to be selected. If true, the match will happen
whether the value is on a word boundary or not -- if false, the value
must be on a word boundary. (When we speak of a word boundary, it is
in the Perl sense -- a word character [A-Za-z0-9_] followed or
preceded by a non-word character, or beginning or end of the string.)

I<joiner>

Requires 'I<type>=links'.

With type=links, the accessories tag returns a link for each
option. This allows you to override the default string ('<BR>') that
joins these links. You can use Perl's metacharacter escapes, such as
'\n' for newline or '\t' for tab.

I<href>

Requires 'I<type>=links'.

This sets the base HREF for the link in a links type. Default is
the current page.

I<template>

Requires 'I<type>=links'.

Allows you to override the standard Interchange template for a
hyperlink. You probably don't need to use this - grep the code to grok
it if you do (see 'sub build_accessory_links').

I<form>

Requires 'I<type>=links'.

This sets the base value for the form in a links type. Default is
mv_action=return, which will simply set the variable value in the
link.

For example, to generate a series of links - one per item attribute
value passed - that set the variable "color" to the corresponding
passed value (blank, blue, or green), do S<this:>

   [accessories type=links
                name=color
              passed="=--select--, blue=Blue, green=Sea Green"]

This will generate something like the following:

    <A HREF="VENDURL/MV_PAGE?mv_action=return&color=blue">Blue</A><BR>
    <A HREF="VENDURL/MV_PAGE?mv_action=return&color=green">Sea Green</A>

where VENDURL is your Interchange URL for the catalog MV_PAGE is the
current page.

If you want the empty "--select--" option to show up, pass an empty=1
parameter.

I<empty>

Requires 'I<type>=links'.

Setting 'empty=1' includes a hyperlink for the empty "--select--"
option. See the example in form above.

I<secure>

Requires 'I<type>=links'.

Setting secure=1 causes the generated link(s) to point to your
secure Interchange URL.

I<new>

Requires 'I<type>=combo' or 'reverse_combo'.

You can use this to set a value in place of the 'New' or 'Current'
option in a combo box. For example, if item 'os28044' has size
attribute values of "Sm=10oz, Med=15oz, Lg=20oz"S<:>

  [accessories code=os28044 attribute=size type=combo new="my_new_value"]
------------------------------------------------------
  <INPUT TYPE=text NAME="mv_order_size" SIZE=16 VALUE="">
  <SELECT NAME="mv_order_size" SIZE="1">
  <OPTION VALUE="my_new_value">my_new_value
  <OPTION VALUE="Sm">10oz
  <OPTION VALUE="Med">15oz
  <OPTION VALUE="Lg">20oz</SELECT>

Or, with the default new value:

  [accessories code=os28044 attribute=size type=combo]
------------------------------------------------------
  <INPUT TYPE=text NAME="mv_order_size" SIZE=16 VALUE="">
  <SELECT NAME="mv_order_size" SIZE="1">
  <OPTION VALUE="">&lt;-- New
  <OPTION VALUE="Sm">10oz
  <OPTION VALUE="Med">15oz
  <OPTION VALUE="Lg">20oz</SELECT>

Default is no VALUE with option text set to '&lt;-- New' for a combo
box or 'Current --&gt;' for a reverse_combo box.

=head2 and

Summary

Parameters: B<type term op compare>

THIS TAG HAS SPECIAL POSITIONAL PARAMETER HANDLING.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

Called Routine for positonal:

B<ASP-like Perl call:>

    $Tag->and(
        {
         type => VALUE,
         term => VALUE,
         op => VALUE,
         compare => VALUE,
        }
    )

 OR

    $Tag->and($type, $term, $op, $compare);

Attribute aliases

            base ==> type
            comp ==> compare
            operator ==> op

Description

The [and ...] tag is only used in conjunction with [if ...]. Example:

        [if value fname]
        [and value lname]
        Both first and last name are present.
        [else]
        Missing one of "fname" and "lname" from $Values.
        [/else]
        [/if]

See [if ...].

=head2 area

Alias:  B<href>

Expands to the URL for an Interchange page or action, including the
Interchange session ID and supplied arguments. This is very similar to
the I<page> tag - these are equivalent:

    [page href=dir/page arg=mv_arg]TargetName[/page]
    <A HREF="[area href=dir/page arg=mv_arg]">TargetName</A>

Summary

    [area href arg other_named_attributes]
    [area href=dir/page arg=page_arguments other_named_attributes]

 Parameters   Description                               Default
 href         Path to Interchange page or actionSpecial arguments'scan' links to a search (using search arguments in arg)'http://...' external link (requires form attribute)process
 arg          Interchange arguments to page or action   none

 Attributes                        Default
 form                              none
 search                            No
 secure                            No
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 No
 Macro                             No
 Has end tag                       No

B<Tag expansion example:>

   [area href=dir/page.html arg="arg1=AA/arg2=BB"]

   www.here.com/cgi-bin/mycatalog/page.html?mv_session_id=6CZ2whqo&\
   mv_pc=1&mv_arg=arg1%3dAA/arg2%3dBB

B<ASP-like Perl call:>

    $Tag->area(  { href => "dir/page",
                   arg  => "arguments", }  );

or similarly with positional parameters,

    $Tag->area($href, $arg, $attribute_hash_reference);

See Also

I<page>

Description

The area tag is very similar to the I<page> tag. It produces the
URL to call an Interchange page, but it differs from page in that
it does not supply the surrounding <A HREF ...> notation. This can be
used to get control of your HREF items, perhaps to place an ALT string
or a Javascript construct.

It was originally named area because it also can be used in a
client-side image map.

The area tag has an alias of href. The two links below are
identical in operation:

   <A HREF="[area href=catalog]" ALT="Main catalog page">Catalog Home</A>
   <A HREF="[href href=catalog]" ALT="Main catalog page">Catalog Home</A>

The optional I<arg> is used just as in the I<page> tag.

I<form>

The optional form argument allows you to encode a form in the link.

   <A HREF="[area form="mv_order_item=os28044
                        mv_order_size=15oz
                        mv_order_quantity=1
                        mv_separate_items=1
                        mv_todo=refresh"]"> Order 15oz Framing Hammer</A>

See the description of the I<page> tag for more detail.

I<search>

Interchange allows you to pass a search in a URL. There are two ways
to do this:

=over 4

=item 1.

Place the search specification in the named search attribute.

=over 8

=item *

Interchange will ignore the href parameter (the link will be set to
'scan'.

=item *

If you give the arg parameter a value, that value will be available
as [value mv_arg] within the search display page.

=back

=item 2.

Set the href parameter to 'scan' and set arg to the search
specification.

=over 8

=item *

Note that you can use this form positionally - the values go into
href and arg, so you do not have to name parameters.

=back

=back

These are identical:

   <A HREF="[area scan
                  se=Impressionists
                  sf=category]">Impressionist Paintings</A>

   <A HREF="[area href=scan
                   arg="se=Impressionists
                        sf=category"]">Impressionist Paintings</A>

   <A HREF="[area search="se=Impressionists
                          sf=category"]">Impressionist Paintings</A>


See the description of the I<page> tag for more detail.

Examples

B<Tag expansion example:>

   [area href=dir/page.html arg="arg1=AA/arg2=BB"]

   www.here.com/cgi-bin/mycatalog/page.html?mv_session_id=6CZ2whqo&\
   mv_pc=1&mv_arg=arg1%3dAA/arg2%3dBB

Positional call example:

    <A HREF="[area ord/basket]">Check basket</A>

Named call example:

    <A HREF="[area ord/basket]">Check basket</A>

HTML-embedded example (disabled if no_html_parse I<Pragma> active):

    <A MV="area dir/page" HREF="dir/page.html">

=head2 assign

Allows you to assign numeric values to preempt calculation of one or
more of the following S<tags:>

=over 4

=item *

[handling], [salestax], [shipping], and [subtotal]

=back

The assignment is persistent within a user's session until you clear
it, an assigned tag will return your value instead of calculating a
value.

Warning - please be sure you understand the dependencies within the
pricing system before using the assign tag.

Summary

    [assign tag_name=value tag_name=value ...]
    [assign clear=1]

 Attributes   Description                               Default
 clear        Clears all pending 'assign' tag assignmentsnone
 handling     Assigns an override value for [handling] tagsnone
 salestax     Assigns an override value for [salestax] tagsnone
 shipping     Assigns an override value for [shipping] tagsnone
 subtotal     Assigns an override value for [subtotal] tagsnone

 Other_Charactreristics            
 Invalidates cache                 No
 Container tag                     No

B<ASP-like Perl call:>

    $Tag->assign(  { shipping => 2.99, }  );

See Also

[handling], [salestax], [shipping], [subtotal],
[Shipping]

Description

The assign tag allows you to assign numeric override values to one
or more of the following S<tags:>

=over 4

=item *

[handling], [salestax], [shipping], and [subtotal]

=back

An assigned tag will return your value rather than calculating its own
until you clear the assignment.

Assignment is persistent within the user's session (unless cleared)
and affects only that user.

Assigning an empty string clears the tag's assignment. You can also
clear all pending assignments at once with the clear attribute.

For example, the following eliminates salestax and sets shipping to
$4.99 regardless of weight and S<destination:>

  [assign salestax=0 shipping=4.99]

This restores the [salestax] tag and eliminates handling
S<charges:>

  [assign salestax="" handling=0]

This restores the normal behavior to the [shipping] and
[handling] S<tags:>

  [assign clear=1]

Assignment affects only the value returned by a tag. Other behavior,
such as formatting for the local currency, is not affected by the
assignment.

Note - you will get an error in the error log (and any pending
assignment for the specified tag will be cleared) if you try to assign
a value other than a number or the empty string ("").

I<clear>

Setting this to a true value clears all pending assignments (i.e., all
assignable tags return to normal behavior).

I<shipping>

This sets the total value of shipping, rounded to locale-specific
fractional digits. Always active if assigned a numeric value. See the
[shipping] tag for detail about rounding, etc.

I<handling>

This option sets the total value of handling, rounded to fractional
digits.

B<Important note>

The [handling] tag is unlike the others in that it will be inactive
(despite your assignment) unless the [value B<mv_handling>]
variable is true (i.e., a nonzero, non-blank value).



I<salestax>

This preempts the salestax calculation. The assigned value is not
rounded.

I<subtotal>

This preempts the cart subtotal derived from prices. The assigned
value is not rounded.

Note that you cannot assign to [total-cost] - it will always be the
sum of the four above.

Before using the assign tag, please be sure you understand the
dependencies within the pricing system, such as the relationship
between [total-cost] and assigned tags.

=head2 attr_list

Summary

Parameters: B<hash>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [attr_list] FOO [/attr_list]. Nesting:
NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->attr_list(
        {
         hash => VALUE,
        },
        BODY
    )

 OR

    $Tag->attr_list($hash, $BODY);

Description

Tags an attribute list with values from a hash. Designed for use in
embedded Perl.

Example:

        [perl tables=products]
                my %opt = (
                        hashref => 1,
                        sql => 'select * from  products',
                );
                my $ary_of_hash = $Db{products}->query(\%opt);
                my $template = <<EOF;
{sku} - {description} - {price|Call for price}
        {image?}<IMG SRC="{image}">{/image?}
        {image:}No image available{/image:}
EOF
                foreach my $ref (@$ary_of_hash) {
                        $out .= $Tag->attr_list($template, $ref);
                }
                return $out;
        [/perl]

Tags according to the following rules:

{key}

Inserts the value of the key for the reference. In a database query,
this is the column name.

{key|fallback string}

Displays the value of {key} or if it is zero or blank, the fallback
string.

{key true string}

Displays true string if the value of {key} is non-blank, non-zero,
or displays nothing if the key is false.

{key?} true text {/key?}

Displays true text if the value of {key} is non-blank, non-zero,
and nothing otherwise.

{key:} false text {/key:}

Displays false text if the value of {key} is blank or zero, and
nothing otherwise.

=head2 banner

Implements random or rotating banner ads. See also I<Banner/Ad
rotation>.

Summary

    [banner category other_named_attributes]
    [banner category=my_category other_named_attributes]

 Parameters   Description                               Default
 category                                               default

 Attributes                        Default
 table                             banner
 r_field (unweighted)              rotate
 b_field                           banner
 separator (unweighted)            ':'
 delimiter (unweighted)            '{or}'
 weighted                          No
 once (weighted)                   No
 c_field (weighted)                category
 w_field (weighted)                weight
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 No
 Container tag                     No

B<Tag expansion example:>

   [banner category=]

B<ASP-like Perl call:>

    $Tag->banner(  { category => $key, } );

or similarly with positional parameters,

    $Tag->banner($category, $attribute_hash_reference);

See Also

I<Banner/Ad rotation>

Description

Implements random or rotating banner ads. See I<Banner/Ad rotation> in
the Interchange Template documentation.

You will need a banner ad table (typically called 'banner') which
contains banner data. The following is an S<example:>

 code         category      weight        rotate        banner
 m_3          cat1          7             0             my banner 3
 m_1          cat1          1             0             my banner 1
 default                                  1             Default 1{or}Default 2{or}Default 3
 m_2          cat1          2             0             my banner 2
 t_1          cat2          4             0             their banner 1
 t_2          cat2          1             0             their banner 2

I<category>

S<Default:> category="default"

This specifies the category for weighted ad, or the table row (i.e.,
code value) for an unweighted ad.

I<table>

S<Default:> table="banner"

Setting 'table="my_banner_table"' forces the tag to refer to
'my_banner_table' rather than the default 'banner' table for banner ad
information.

I<r_field>

S<Default:> r_field="rotate"

Unweighted ads only.

A table row may include multiple banners in the 'banner' column. The
column specified by r_field contains a boolean that determines whether
to rotate banners. In the above table example, 'Default 1', 'Default
2' and 'Default 3' would rotate.

I<b_field>

S<Default:> b_field="banner"

This specifies the column containing the banner descriptor(s). The
default is 'banner'. Note that an entry might be a delimited list of
banner descriptors to rotate (see I<delimiter> below).

I<separator>

S<Default:> separator=":"

Unweighted ads only.

This sets the separator within the table key (i.e., code) for
multi-level categorized ads. See I<Banner/Ad rotation>.

I<delimiter>

S<Default:> delimiter="{or}"

Unweighted ads only.

This specifies the delimiter between rotating banner descriptors in
the 'banner' column.

I<weighted>

The banner tag will not apply weighting from the table unless you
set weighted=1. Note that the tag will behave as if you gave it a
standard unweighted entry - it will look for a matching row rather
than a matching category.

I<once>

Weighted ads only.

If the option once is passed (i.e., [banner once=1 weighted=1], then
the banners will not be rebuilt until the total_weight file is
removed. See I<Banner/Ad rotation>.

I<c_field>

S<Default:> c_field="category"

Weighted ads only.

This specifies the column containing the banner category for weighted
ads. The banner tag will display ads from rows in the table whose
category matches the category given in the tag, with frequency
corresponding to the weights in the table.

I<w_field>

S<Default:> w_field="weight"

Weighted ads only.

This specifies the column containing the banner weight.

=head2 bounce

Summary

Parameters: B<href if>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->bounce(
        {
         href => VALUE,
         if => VALUE,
        }
    )

 OR

    $Tag->bounce($href, $if);

Description

The [bounce ...] tag is designed to send an HTTP redirect (302 status
code) to the browser and redirect it to another (possibly
Interchange-parsed) page.

It will stop ITL code execution at that point; further tags will not
be run through the parser. Bear in mind that if you are inside a
looping list, that list will run to completion and the [bounce] tag
will not be seen until the loop is complete.

Example of bouncing to an Interchange parsed page:

        [if !scratch real_user]
        [bounce href="[area violation]"]
        [/if]

Note the URL is produced by the [area ...] ITL tag.

Since the HTTP says the URL needs to be absolute, this one might cause
a browser warning:

        [if value go_home]
        [bounce href="/"]
        [/if]

But running something like one of the Interchange demos you can do:

        [if value go_home]
        [bounce href="__SERVER_NAME__/"]
        [/if]

        [if value go_home]
        [bounce href="/"]
        [/if]

=head2 calc

Calculates the value of the enclosed arithmetic expression.

Summary

    [calc] Expression [/calc]

B<No parameters>

B<No attributes> (though you can break it if you set
'interpolate=0')

 Other_Charactreristics            
 Invalidates cache                 No
 Has Subtags                       No
 Container tag                     Yes
 Nests                             No

B<ASP-like Perl call:>

There is never a reason to call this tag from within perl or ASP code.
Simply do the calculation directly.

Description

Calculates the value of the enclosed arithmetic expression.

Use it as follows: [calc] I<Expression> [/calc]

The enclosed region where the arguments are calculated according to
normal arithmetic symbols. For instance:

    [calc] 2 + 2 [/calc]

will expand to:

    4

The [calc] tag is really the same as the [perl] tag, except that it
doesn't accept arguments, interpolates surrounded Interchange tags by
default, and is slightly more efficient to parse.

Tip: The [calc] tag will remember variable values inside one page, so
you can do the equivalent of a memory store and memory recall for a
loop.

ASP Note: There is never a reason to use this tag in a [perl] or ASP
section.

=head2 cart

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->cart(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->cart($name);

Description

Sets the name of the current shopping cart for display of shipping,
price, total, subtotal, shipping, and nitems tags.

=head2 catch

See also [try.

Process body text if the  [try block generates an error.

Summary

Parameters: B<label>

=over 4

=item *

label

=over 8

=item *

The label specifying the corresponding [try block. Defaults to
'default'.

=back

=back

ONLY THE B<> PARAMETERS ARE POSITIONAL.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [catch] FOO [/catch]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->catch(
        {
         label => VALUE,
        },
        BODY
    )

 OR

    $Tag->catch($label, $ATTRHASH, $BODY);

Description

Process body text if the  [try block generates an error.

See also [try.

=head2 cgi

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->cgi(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->cgi($name);

Description

Displays the value of a CGI variable B<submitted to the current page>.
This is similar to [value ...], except it displays the transitory
values that are submitted with every request.

For instance, if you access the following URL:

        http://VENDURL/pagename?foo=bar

bar will be substituted for [cgi foo].

This is the same as $CGI->{foo} in embedded Perl.

=head2 checked

Summary

Parameters: B<name value>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->checked(
        {
         name => VALUE,
         value => VALUE,
        }
    )

 OR

    $Tag->checked($name, $value, $ATTRHASH);

Description

You can provide a "memory" for drop-down menus, radio buttons, and
checkboxes with the [checked] and [selected] tags.

    <INPUT TYPE=radio NAME=foo
            VALUE=on [checked name=foo value=on default=1]>
    <INPUT TYPE=radio NAME=foo
            VALUE=off [checked name=foo value=off]>

This will output CHECKED if the variable var_name is equal to
value. Not case sensitive unless the optional case=1 parameter
is used.

The default parameter, if true (non-zero and non-blank), will cause
the box to be checked if the variable has never been defined.

Note that CHECKBOX items will never submit their value if not checked,
so the box will not be reset. You must do something like:

    <INPUT TYPE=checkbox NAME=foo
            VALUE=1 [checked name=foo value=1 default=1]>
    [value name=foo set=""]

By default, the Values space (i.e. [value foo]) is checked - if you
want to use the volatile CGI space (i.e. [cgi foo]) use the option
cgi=1.

=head2 control

Returns named scratchpad field or copies named scratch variable to
scratchpad. Returns value specified by 'default' attribute if
scratchpad variable is undefined or empty. Calling without a name
moves to next scratchpad. Calling without a name and 'reset=1' returns
to first scratchpad page.

Summary

Parameters: B<name default>

=over 4

=item *

name

=over 8

=item *

Name of scratchpad variable to set or return

=back

=item *

default

=over 8

=item *

Value to return if scratchpad variable missing or empty

=back

=back

Attributes

=over 4

=item *

reset (must not specify name; may specify default)

=over 8

=item *

Resets scratchpad (i.e. $::Control array) by setting special scratch
variable 'control_index' to 0. Control_index is an index into the
$::Control == $Vend::Session->{control} array of hashrefs.

=back

=item *

set

=over 8

=item *

Copies named scratch variable (i.e., from $::Scratch) to scratchpad
with current control index.

=back

=back

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->control(
        {
         name => VALUE,
         default => VALUE,
        }
    )

 OR

    $Tag->control($name, $default, $ATTRHASH);

Description

Returns named scratchpad field or copies named scratch variable to
scratchpad. Returns value specified by 'default' attribute if
scratchpad variable is undefined or empty. Calling without a name
moves to next scratchpad. Calling without a name and 'reset=1' returns
to first scratchpad page.

=head2 control_set

Bulk-sets scratchpad variables on the scratchpad page specified by
'index'. Note that, unlike [control], this does not copy values from
scratch.

Summary

This example sets var_one, var_two and var_three in the scratchpad on
page 5 (index begins with 0).

  [control_set index=4]
    [var_one]var_one_value[/var_one]
    [var_two]var_two_value[/var_two]
    [var_three]var_three_value[/var_three]
  [/control_set]

Parameters: B<index>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [control_set] FOO [/control_set].
Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->control_set(
        {
         index => VALUE,
        },
        BODY
    )

 OR

    $Tag->control_set($index, $ATTRHASH, $BODY);

Description

Bulk-sets scratchpad variables on the scratchpad page specified by
'index'. Note that, unlike [control], this does not copy values from
scratch.

=head2 counter

Summary

Parameters: B<file>

Positional parameters in same order.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->counter(
        {
         file => VALUE,
        }
    )

 OR

    $Tag->counter($file, $ATTRHASH);

Attribute aliases

            name ==> file

Description

Manipulates a persistent counter, by default incrementing it and
returning the new value.

The counter value is stored in the specified file. If the file name
begins with a "/" then it is an absolute path. Otherwise, it is
relative to VendRoot. The default file is etc/counter. If the file
does not exist, it is created and initialized to the value of the
start parameter.

The counter is implemented using Perl's File::Counter module, which
protects the file against simultaneous access by multiple processes.

WARNING: This tag will not work under Safe, i.e. in embedded Perl.

Additional parameters:

I<decrement=1>

Causes the counter to count down instead of up.

I<start=50>

Causes a new counter to be created and to start from 50 (for example)
if it did not exist before.

I<value=1>

Shows the value of the counter without incrementing or decrementing
it.

=head2 currency

Summary

Parameters: B<convert noformat>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Interpolates B<container text> by default>.

This is a container tag, i.e. [currency] FOO [/currency]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->currency(
        {
         convert => VALUE,
         noformat => VALUE,
        },
        BODY
    )

 OR

    $Tag->currency($convert, $noformat, $BODY);

Description

When passed a value of a single number, formats it according to the
currency specification. For instance:

    [currency]4[/currency]

will display:

    4.00

or something else depending on the I<Locale> and PriceCommas settings.
It can contain a [calc] region. If the optional "convert" parameter is
set, it will convert the value according to PriceDivide> for the
current locale. If Locale is set to fr_FR, and F<PriceDivide> for
fr_FR is 0.167, the following sequence

    [currency convert=1] [calc] 500.00 + 1000.00 [/calc] [/currency]

will cause the number 8.982,04 to be displayed.

=head2 data

Summary

Parameters: B<table field key>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->data(
        {
         table => VALUE,
         field => VALUE,
         key => VALUE,
        }
    )

 OR

    $Tag->data($table, $field, $key, $ATTRHASH);

Attribute aliases

            base ==> table
            code ==> key
            col ==> field
            column ==> field
            database ==> table
            name ==> field
            row ==> key

Description

Syntax:             [data table=db_table column=column_name key=key
filter="uc|lc|name|namecase|no_white|etc."* append=1* value="value to
set to"* increment=1*                         ]

Returns the value of the field in a database table, or (DEPRECATED)
from the session namespace. If the optional B<value> is supplied,
the entry will be changed to that value. If the option increment* is
present, the field will be atomically incremented with the value in
B<value>. Use negative numbers in value to decrement. The append
attribute causes the value to be appended; and finally, the filter
attribute is a set of Interchange filters that are applied to the data
1) after it is read; or 2)before it is placed in the table.

If a DBM-based database is to be modified, it must be flagged writable
on the page calling the write tag. Use [tag flag write]products[/tag]
to mark the products database writable, for example. B<This must be
done before ANY access to that table.>

Deprecated Behavior: (replace with session tag). In addition, the
[data ...] tag can access a number of elements in the Interchange
session database:

    accesses           Accesses within the last 30 seconds
    arg                The argument passed in a [page ...] or [area ...] tag
    browser            The user browser string
    cybercash_error    Error from last CyberCash operation
    cybercash_result   Hash of results from CyberCash (access with usertag)
    host               Interchange's idea of the host (modified by DomainTail)
    last_error         The last error from the error logging
    last_url           The current Interchange path_info
    logged_in          Whether the user is logged in (add-on UserDB feature)
    pageCount          Number of unique URLs generated
    prev_url           The previous path_info
    referer            HTTP_REFERER string
    ship_message       The last error messages from shipping
    source             Source of original entry to Interchange
    time               Time (seconds since Jan 1, 1970) of last access
    user               The REMOTE_USER string
    username           User name logged in as (UserDB feature)

NOTE: Databases will hide session values, so don't name a database
"session". or you won't be able to use the [data ...] tag to read
them. Case is sensitive, so in a pinch you could call the database
"Session", but it would be better not to use that name at all.

=head2 default

Summary

Parameters: B<name default>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->default(
        {
         name => VALUE,
         default => VALUE,
        }
    )

 OR

    $Tag->default($name, $default, $ATTRHASH);

Description

Returns the value of the user form variable variable if it is
non-empty. Otherwise returns default, which is the string "default"
if there is no default supplied. Got that? This tag is DEPRECATED
anyway.

=head2 description

Summary

Parameters: B<code base>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->description(
        {
         code => VALUE,
         base => VALUE,
        }
    )

 OR

    $Tag->description($code, $base);

Description

Expands into the description of the product identified by code as
found in the products database. This is the value of the database
field that corresponds to the catalog.cfg directive
DescriptionField. If there is more than one products file defined,
they will be searched in order unless constrained by the optional
argument B<base>.

This tag is especially useful for multi-language catalogs. The
DescriptionField directive can be set for each locale and point to
a different database field; for example desc_en for English,
desc_fr for French, etc.

=head2 discount

Summary

Parameters: B<code>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [discount] FOO [/discount]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->discount(
        {
         code => VALUE,
        },
        BODY
    )

 OR

    $Tag->discount($code, $BODY);

Description

Product discounts can be set upon display of any page. The discounts
apply only to the customer receiving them, and are of one of three
types:

    1. A discount for one particular item code (code/key is the item-code)
    2. A discount applying to all item codes (code/key is ALL_ITEMS)
    3. A discount applied after all items are totaled
       (code/key is ENTIRE_ORDER)

The discounts are specified via a formula. The formula is scanned for
the variables $q and $s, which are substituted for with the item
I<quantity> and I<subtotal> respectively. In the case of the item and
all items discount, the formula must evaluate to a new subtotal for
all items I<of that code> that are ordered. The discount for the
entire order is applied to the entire order, and would normally be a
monetary amount to subtract or a flat percentage discount.

Discounts are applied to the effective price of the product, including
any quantity discounts.

To apply a straight 20% discount to all items:

    [discount ALL_ITEMS] $s * .8 [/discount]

or with named attributes:

    [discount code=ALL_ITEMS] $s * .8 [/discount]

To take 25% off of only item 00-342:

    [discount 00-342] $s * .75 [/discount]

To subtract $5.00 from the customer's order:

    [discount ENTIRE_ORDER] $s - 5 [/discount]

To reset a discount, set it to the empty string:

    [discount ALL_ITEMS][/discount]

Perl code can be used to apply the discounts. Here is an example of a
discount for item code 00-343 which prices the I<second> one ordered
at 1 cent:

    [discount 00-343]
    return $s if $q == 1;
    my $p = $s/$q;
    my $t = ($q - 1) * $p;
    $t .= 0.01;
    return $t;
    [/discount]

If you want to display the discount amount, use the [item-discount]
tag.

    [item-list]
    Discount for [item-code]: [item-discount]
    [/item-list]

Finally, if you want to display the discounted subtotal in a way that
doesn't correspond to a standard Interchange tag, you can use the
[calc] tag:

    [item-list]
    Discounted subtotal for [item-code]: [currency][calc]
                                            [item-price noformat] * [item-quantity]
                                            [/calc][/currency]
    [/item-list]

%% dump %% Prints a dump of the current user session as expanded by
Data::Dumper. Includes any CGI environment passed from the server.

For an example, create a page containing <XMP>[dump]</XMP> and see
what it displays.

%% either %% The [either]this[or]that[/either] implements a
check for the first non-zero, non-blank value. It splits on [or], and
then parses each piece in turn. If a value returns true (in the Perl
sense - non-zero, non-blank) then subsequent pieces will be discarded
without interpolation.

Example:

  [either][value must_be_here][or][bounce href="[area incomplete]"][/either]

Always strips leading and trailing whitespace.

=head2 dump

Dumps client connection information, cart contents, query value,
contents of environment, session, and CGI with Data::Dumper to the
page. This is useful for debugging.

Summary

No parameters.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->dump(
        {
        }
    )

 OR

    $Tag->dump($);

Description

Dumps client connection information, cart contents, query value,
contents of environment, session, and CGI with Data::Dumper to the
page. This is useful for debugging.

=head2 ecml

Uses ECML (Electronic Commerce Markup Language) module to map
Interchange forms/userdb to ECML checkout

Summary

Parameters: B<name function>

=over 4

=item *

function (default = 'widget')

Place form boxes on page:

=back

         [ecml name]
         [ecml address]

Magic database entry from country database:

        [ecml country]

Map values back to Interchange variables for saving in UserDB:

        <INPUT TYPE=hidden NAME=mv_click CHECKED VALUE="ECML_map">
        [set ECML_map]
        [ecml function=mapback]
        [/set]

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->ecml(
        {
         name => VALUE,
         function => VALUE,
        }
    )

 OR

    $Tag->ecml($name, $function, $ATTRHASH);

Description

This package implements the ECML standard for the Interchange demo.
ECML stands for "Electronic Commerce Modeling Language", but at this
writing it is a simple standard for naming variables so that
"electronic wallets" can pre-fill-in your checkout form based on users
past purchase from other companies.

It translates into ECML from the following Interchange variables:

Ecom_BillTo_Online_Email            b_email Ecom_BillTo_Postal_City   
         b_city Ecom_BillTo_Postal_CountryCode      b_country
Ecom_BillTo_Postal_Name_First       b_fname
Ecom_BillTo_Postal_Name_Last        b_lname
Ecom_BillTo_Postal_Name_Middle      b_mname
Ecom_BillTo_Postal_Name_Prefix      b_title
Ecom_BillTo_Postal_Name_Suffix      b_name_suffix
Ecom_BillTo_Postal_PostalCode       b_zip Ecom_BillTo_Postal_StateProv
       b_state Ecom_BillTo_Postal_Street_Line1     b_address1
Ecom_BillTo_Postal_Street_Line2     b_address2
Ecom_BillTo_Postal_Street_Line3     b_address3
Ecom_BillTo_Telecom_Phone_Number    b_phone_day Ecom_ConsumerOrderID  
             mv_order_number Ecom_Payment_Card_ExpDate_Day      
mv_credit_card_exp_day Ecom_Payment_Card_ExpDate_Month    
mv_credit_card_exp_month Ecom_Payment_Card_ExpDate_Year     
mv_credit_card_exp_year Ecom_Payment_Card_Name              c_name
Ecom_Payment_Card_Number            mv_credit_card_number
Ecom_Payment_Card_Protocol          payment_protocols_available
Ecom_Payment_Card_Type              mv_credit_card_type
Ecom_Payment_Card_Verification      mv_credit_card_verify
Ecom_ReceiptTo_Online_Email         r_email Ecom_ReceiptTo_Postal_City
         r_city Ecom_ReceiptTo_Postal_CountryCode   r_country
Ecom_ReceiptTo_Postal_Name_First    r_fname
Ecom_ReceiptTo_Postal_Name_Last     r_lname
Ecom_ReceiptTo_Postal_Name_Middle   r_mname
Ecom_ReceiptTo_Postal_Name_Prefix   r_title
Ecom_ReceiptTo_Postal_Name_Suffix   r_name_suffix
Ecom_ReceiptTo_Postal_PostalCode    r_zip
Ecom_ReceiptTo_Postal_StateProv     r_state
Ecom_ReceiptTo_Postal_Street_Line1  r_address1
Ecom_ReceiptTo_Postal_Street_Line2  r_address2
Ecom_ReceiptTo_Postal_Street_Line3  r_address3
Ecom_ReceiptTo_Telecom_Phone_Number r_phone Ecom_SchemaVersion        
         ecml_version Ecom_ShipTo_Online_Email            email
Ecom_ShipTo_Postal_City             city
Ecom_ShipTo_Postal_CountryCode      country
Ecom_ShipTo_Postal_Name_Combined    name Ecom_ShipTo_Postal_Name_First
      fname Ecom_ShipTo_Postal_Name_Last        lname
Ecom_ShipTo_Postal_Name_Middle      mname
Ecom_ShipTo_Postal_Name_Prefix      title
Ecom_ShipTo_Postal_Name_Suffix      name_suffix
Ecom_ShipTo_Postal_PostalCode       zip Ecom_ShipTo_Postal_StateProv  
     state Ecom_ShipTo_Postal_Street_Line1     address1
Ecom_ShipTo_Postal_Street_Line2     address2
Ecom_ShipTo_Postal_Street_Line3     address3
Ecom_ShipTo_Telecom_Phone_Number    phone Ecom_TransactionComplete    
       end_transaction_flag

Once the form variables are input and sent to Interchange, the [ecml
function=mapback] tag will cause the input results to be mapped back
from the ECML names to the Interchange names.

If you only have a name variable in your UserDB, the module will
attempt to split it into first name and last name for ECML purposes
and map the results back. If you have fname and lname, then it
will not.

=head2 either

Summary

  [either]
    This
  [or]
    That
  [or]
    The other
  [/either]

No parameters.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [either] FOO [/either]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->either(
        {
        },
        BODY
    )

 OR

    $Tag->either($BODY);

Description

B<NO Description>

=head2 error

Summary

Parameters: B<name>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->error(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->error($name, $ATTRHASH);

Description

    [error var options]
        var is the error name, e.g. "session"

The [error ...] tag is designed to manage form variable checking for
the Interchange submit form processing action. It works in
conjunction with the definition set in mv_order_profile, and can
generate error messages in any format you desire.

If the variable in question passes order profile checking, it will
output a label, by default B<bold> text if the item is required, or
normal text if not (controlled by the <require> parameter. If the
variable fails one or more order checks, the error message will be
substituted into a template and the error cleared from the user's
session.

(Below is as of 4.03, the equivalent in 4.02 is [if type=explicit
compare="[error all=1 keep=1]"] ... [/if].)

To check errors without clearing them, you can use the idiom:

    [if errors]
    <FONT SIZE="+1" COLOR=RED>
        There were errors in your form submission.
    </FONT>
    <BLOCKQUOTE>
        [error all=1 show_error=1 joiner="<BR>"]
    </BLOCKQUOTE>
    [/if]

The options are:

I<all=1>

Display all error messages, not just the one refered to by <var>. The
default is only display the error message assigned to <var>.

text=<optional string to embed the error message(s) in>

place a "%s" somewhere in 'text' to mark where you want the error
message placed, otherwise it's appended on the end. This option also
implies show_error.

I<joiner=I<char>>

Character used to join multiple error messages. Default is '\n', a
newline.

I<keep=1>

keep=1 means don't delete the error messages after copy; anything else
deletes them.

I<show_error=1>

show_error=1 means return the error message text; otherwise just the
number of errors found is returned.

I<show_label=1>

show_label=1 causes the field label set by a previous [error] tag's
std_label attribute (see below) to be included as part of the error
message, like this:

 First Name: blank

If no std_label was set, the variable name will be used instead. This
can also be used in combination with show_var to show both the label
and the variable name.

show_label was added in 4.7.0.

I<show_var=1>

show_var=1 includes the name of the variable the error was found in as
part of the error message, like this:

 email: 'bob#nothing,net' not a valid email address

I<std_label>

std_label=<label string for error message>

used with 'required' to display a standardized error format. The HTML
formating can bet set via the global variable MV_ERROR_STD_LABEL with
the default being:

        <FONT COLOR=RED>label_str<SMALL><I>(%s)</I></SMALL></FONT>

where <label_str> is what you set std_label to and %s is substituted
with the error message. This option can not be used with the text=
option.

I<required=1>

Specifies that this is a required field for formatting purposes. In
the std_label format, it means the field will be bolded. If you
specify your own label string, it will insert HTML anywhere you have
{REQUIRED: HTML}, but only when the field is required.

=head2 export

Exports a database to a delimited text file (see also import).

Summary

Parameters: B<table>

Positional parameters in same order.

=over 4

=item *

table

=over 8

=item *

The table to export

=back

=item *

file

=item *

Filename to export to. Note that the NoAbsolute directive and other
conditions may affect actual location of the output file.

=item *

type

=over 8

=item *

Specifies the [line, record] delimiter types. Either NOTES or one of
the following:

  my %Delimiter = (

=back

=back
        2 => ["\n", "\n\n"],
        3 => ["\n%%\n", "\n%%%\n"],
        4 => ["CSV","\n"],
        5 => ['|', "\n"],
        6 => ["\t", "\n"],
        7 => ["\t", "\n"],
        8 => ["\t", "\n"],
        LINE => ["\n", "\n\n"],
        '%%%' => ["\n%%\n", "\n%%%\n"],
        '%%' => ["\n%%\n", "\n%%%\n"],
        CSV => ["CSV","\n"],
        PIPE => ['|', "\n"],
        TAB => ["\t", "\n"],
        );

=over 4

=over 8

=item *

If using NOTES

=over 12

=item *

notes_separator (defaults to "\f")


=item *

notes_field (defaults to "notes_field")

=back

=back

=item *

field

=over 8

=item *

The column to add (or delete if delete and verify are true)

=back

=item *

delete

=over 8

=item *

If 'verify' attribute also set, deletes column specified by 'field'
attribute rather than adding a column.

=back

=item *

verify

=over 8

=item *

must be true when deleting a column

=back

=item *

sort

=over 8

=item *

Output sorted rows (S<usage:> sort="I<sort_field>:I<sort_option>")
(see search/form variable 'mv_sort_option' for sort options)

=back

=back

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->export(
        {
         table => VALUE,
        }
    )

 OR

    $Tag->export($table, $ATTRHASH);

Attribute aliases

            base ==> table
            database ==> table

Description

Exports 'table' to a delimited text file. See also import tag which
imports files into databases.

=head2 field

Summary

Parameters: B<name code>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->field(
        {
         name => VALUE,
         code => VALUE,
        }
    )

 OR

    $Tag->field($name, $code);

Attribute aliases

            col ==> name
            column ==> name
            field ==> name
            key ==> code
            row ==> code

Description

HTML example: <PARAM MV=field MV.COL=column MV.ROW=key>

Expands into the value of the field I<name> for the product identified
by I<code> as found by searching the products database. It will return
the first entry found in the series of I<Product Files>. the products
database. If you want to constrain it to a particular database, use
the [data base name code] tag.

Note that if you only have one ProductFile products, which is the
default, [field column key] is the same as [data products column
key].

=head2 file

Summary

Parameters: B<name type>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->file(
        {
         name => VALUE,
         type => VALUE,
        }
    )

 OR

    $Tag->file($name, $type);

Description

Inserts the contents of the named file. The file should normally be
relative to the catalog directory - file names beginning with / or ..
are not allowed if the Interchange server administrator has set
I<NoAbsolute> to Yes.

The optional type parameter will do an appropriate ASCII
translation on the file before it is sent.

=head2 filter

Summary

Parameters: B<op>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [filter] FOO [/filter]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->filter(
        {
         op => VALUE,
        },
        BODY
    )

 OR

    $Tag->filter($op, $BODY);

Description

Applies any of Interchange's standard filters to an arbitrary value,
or you may define your own. The filters are also available as
parameters to the cgi, data, and value tags.

Filters can be applied in sequence and as many as needed can be
applied.

Here is an example. If you store your author or artist names in the
database "LAST, First" so that they sort properly, you still might
want to display them normally as "First Last". This call

    [filter op="name namecase"]WOOD, Grant[/filter]

will display as

    Grant Wood

Another way to do this would be:

    [data table=products column=artist key=99-102 filter="name namecase"]

Filters available include:

I<cgi>

Returns the value of the CGI variable. Useful for starting a filter
sequence with a seed value.

    'cgi' =>    sub {
                    return $CGI::values(shift);
                },

I<digits>

Returns only digits.

    'digits' => sub {
                    my $val = shift;
                    $val =~ s/\D+//g;
                    return $val;
                },

I<digits_dot>

Returns only digits and periods, i.e. [.0-9]. Useful for decommifying
numbers.

    'digits_dot' => sub {
                    my $val = shift;
                    $val =~ s/[^\d.]+//g;
                    return $val;
                },

I<dos>

Turns linefeeds into carriage-return / linefeed pairs.

    'dos' =>    sub {
                    my $val = shift;
                    $val =~ s/\r?\n/\r\n/g;
                    return $val;
                },

I<entities>

Changes C<<> to &lt;, " to &quot;, etc.

    'entities' => sub {
                    return HTML::Entities::encode(shift);
                },

I<gate>

Performs a security screening by testing to make sure a corresponding
scratch variable has been set.

    'gate' =>   sub {
                    my ($val, $var) = @_;
                    return '' unless $::Scratch->{$var};
                    return $val;
                },

I<lc>

Lowercases the text.

    'lc' =>     sub {
                    return lc(shift);
                },

I<lookup>

Looks up an item in a database based on the passed table and column.
Call would be:

    [filter op="uc lookup.country.name"]us[/filter]

This would be the equivalent of [data table=country column=name
key=US].

    'lookup' => sub {
                        my ($val, $tag, $table, $column) = @_;
                        return tag_data($table, $column, $val) || $val;
                },

I<mac>

Changes newlines to carriage returns.

    'mac' =>    sub {
                    my $val = shift;
                    $val =~ s/\r?\n|\r\n?/\r/g;
                    return $val;
                },

I<name>

Transposes a LAST, First name pair.

    'name' => sub {
                    my $val = shift;
                    return $val unless $val =~ /,/;
                    my($last, $first) = split /\s*,\s*/, $val, 2;
                    return "$first $last";
                },

I<namecase>

Namecases the text. Only works on values that are uppercase in the
first letter, i.e. [filter op=namecase]LEONARDO da Vinci[/filter] will
return "Leonardo da Vinci".

    'namecase' => sub {
                    my $val = shift;
                    $val =~ s/([A-Z]\w+)/\L\u$1/g;
                    return $val;
                },

I<no_white>

Strips all whitespace.

    'no_white' =>   sub {
                    my $val = shift;
                    $val =~ s/\s+//g;
                    return $val;
                },

I<pagefile>

Strips leading slashes and dots.

    'pagefile' => sub {
                    $_[0] =~ s:^[./]+::;
                    return $_[0];
                },

I<sql>

Change single-quote characters into doubled versions, i.e. ' becomes
''.

    'sql'       => sub {
                    my $val = shift;
                    $val =~ s:':'':g; # '
                    return $val;
                },

I<strip>

Strips leading and trailing whitespace.

    'strip' =>  sub {
                    my $val = shift;
                    $val =~ s/^\s+//;
                    $val =~ s/\s+$//;
                    return $val;
                },

I<text2html>

Rudimentary HTMLizing of text.

    'text2html' => sub {
                    my $val = shift;
                    $val =~ s|\r?\n\r?\n|<P>|;
                    $val =~ s|\r?\n|<BR>|;
                    return $val;
                },

I<uc>

Uppercases the text.

    'uc' =>     sub {
                    return uc(shift);
                },

I<unix>

Removes those crufty carriage returns.

    'unix' =>   sub {
                    my $val = shift;
                    $val =~ s/\r?\n/\n/g;
                    return $val;
                },

I<urlencode>

Changes non-word characters (except colon) to %3c notation.

    'urlencode' => sub {
                    my $val = shift;
                    $val =~ s|[^\w:]|sprintf "%%%02x", ord $1|eg;
                    return $val;
                },

I<value>

Returns the value of the user session variable. Useful for starting a
filter sequence with a seed value.

    'value' =>  sub {
                    return $::Values->(shift);
                },

I<word>

Only returns word characters. Locale does apply if collation is
properly set.

    'word' =>   sub {
                    my $val = shift;
                    $val =~ s/\W+//g;
                    return $val;
                },

You can define your own filters in a I<GlobalSub> (or Sub or
ActionMap):

    package Vend::Interpolate;

    $Filter{reverse} = sub { $val = shift; return scalar reverse $val  };

That filter will reverse the characters sent.

The arguments sent to the subroutine are the value to be filtered, any
associated variable or tag name, and any arguments appended to the
filter name with periods as the separator.

A [filter op=lookup.products.price]99-102[/filter] will send
('99-102', undef, 'products', 'price') as the parameters. Assuming the
value of the user variable foo is bar, the call [value
name=foo filter="lookup.products.price.extra"] will send ('bar',
'foo', 'products', 'price', 'extra').

=head2 flag

Controls interchange flags. For example, flags affect database access
and transactions for those databases able to support these features.
See also the [tag] tag.

Summary

Parameters: B<type>

type may be one of the following

=over 4

=item *

read

=over 8

=item *

Flags the table read-only

=back

=item *

write

=over 8

=item *

Flags the table writeable by default (or read-only if you also set the
value=0 attribute)

=back

=item *

transactions

=over 8

=item *

Reopens the database in transactions mode if Safe.pm is not active
(e.g., in a global subroutine, usertag or [perl global=1] tag). The
limitation exists because it is not possible to reopen a database
within Safe.pm.

=back

=item *

commit

=over 8

=item *

Attempts to commit transactions

=back

=item *

rollback

=over 8

=item *

Attempts to rollback transactions

=back

=item *

build

=over 8

=item *

Forces build of static Interchange page specified by the name
attribute

=back

=item *

checkhtml

=back

Attributes

=over 4

=item *

'flag' and 'name'

=over 8

=item *

Aliases for 'type' (except for 'type=build')

=back

=item *

tables

=over 8

=item *

The name of the table to flag

=item *

'table' is an alias

=back

=item *

value

=over 8

=item *

The boolean value of the flag

=back

=item *

name

=over 8

=item *

Name of page to build or alias for 'type'

=back

=item *

show

=over 8

=item *

Normally, the [flag] tag returns nothing to the page. Setting
'show=1' causes the tag to return status, if any.

=back

=back

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->flag(
        {
         type => VALUE,
        }
    )

 OR

    $Tag->flag($type, $ATTRHASH);

Attribute aliases

            flag ==> type
            name ==> type
           table ==> tables

Description

The flag tag controls database access and transactions.

If a DBM-based database is to be modified, it must be flagged writable
on the page calling the write tag.

For example, you can call

  [flag type=write value=1 table=products]

to mark the products DBM database writable. B<This must be done
before ANY access to that table.>

Note that SQL databases are always writable if allowed by the SQL
database itself, and in-memory databases will never be written.

Using [flag build] forces static build of a page, even if it
contains dynamic elements.

=head2 fly_list

Summary

Parameters: B<code base>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [fly_list] FOO [/fly_list]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->fly_list(
        {
         code => VALUE,
         base => VALUE,
        },
        BODY
    )

 OR

    $Tag->fly_list($code, $base, $BODY);

Description

Syntax: [fly-list prefix=tag_prefix* code=code*]

Defines an area in a random page which performs the flypage lookup
function, implementing the tags below.

   [fly-list]
    (contents of flypage.html)
   [/fly-list]

If you place the above around the contents of the demo flypage, in a
file named flypage2.html, it will make these two calls display
identical pages:

    [page 00-0011] One way to display the Mona Lisa [/page]
    [page flypage2 00-0011] Another way to display the Mona Lisa [/page]

If you place a [fly-list] tag alone at the top of the page, it will
cause any page to act as a flypage.

By default, the prefix is item, meaning the [item-code] tag will
display the code of the item, the [item-price] tag will display
price, etc. But if you use the prefix, i.e. [fly-list prefix=fly],
then it will be [fly-code]; prefix=foo would cause [foo-code],
etc.

=head2 fly_tax

Summary

Parameters: B<area>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->fly_tax(
        {
         area => VALUE,
        }
    )

 OR

    $Tag->fly_tax($area);

Description

Builds a tax rate from taxarea, taxrate, taxshipping,
variable values, and the SalesTax directive value.

=head2 goto

(I think this is deprecated, but I'm not sure)

Summary

Parameters: B<name if>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->goto(
        {
         name => VALUE,
         if => VALUE,
        }
    )

 OR

    $Tag->goto($name, $if);

Description

B<NO Description>

=head2 handling

Summary

Parameters: B<mode>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->handling(
        {
         mode => VALUE,
        }
    )

 OR

    $Tag->handling($mode, $ATTRHASH);

Attribute aliases

            carts ==> cart
            modes ==> mode
            name ==> mode
            tables ==> table

Description

Calculates and inserts handling costs. Accepts the same noformat and
convert arguments as the shipping tag.

=head2 harness

Test harness block. Similar to try/catch. Interprets the body text and
checks the return value against expected and explicitly bad cases.

Returns DIED, OK, or NOT OK message along with your result if not the
expected value.

Summary

  [harness expected="good" name=my_test_number_1]
    [good]The Expected Return Value[/good]
    [not]Some Specifically Bad Return Value[/not]
    Tags and code to test here
  [/harness]

No parameters.

=over 4

=item *

expected (default "OK")

=over 8

=item *

Tagname for delimiting your expected return value

=back

=item *

name (default "testI<nnn>")

=over 8

=item *

This will appear in your output message (useful for distinguishing
harness tags from one another)

=back

=back

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [harness] FOO [/harness]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->harness(
        {
        },
        BODY
    )

 OR

    $Tag->harness($ATTRHASH, $BODY);

Description

Test harness block. Similar to try/catch. Interprets the body text and
checks the return value against expected and explicitly bad cases.

Returns DIED, OK, or NOT OK message along with the harness name and
your result if not the expected value.

=head2 href

Alias for [I<area>] tag.

=head2 html_table

Builds an HTML table

Summary

=over 4

=item *

columns

=over 8

=item *

Whitespace-delimited list of columns

=back

=item *

delimiter (default "\t")

=over 8

=item *

Line delimiter to use if tag body is delimited text rather than an
array reference

=back

=item *

record_delim (default "\n")

=over 8

=item *

Record delimiter to use if tag body is delimited text rather than an
array reference

=back

=item *

tr

=over 8

=item *

HTML attributes for <TR>

=back

=item *

td

=over 8

=item *

HTML attributes for <TD>

=back

=item *

th

=over 8

=item *

HTML attributes for <TH>

=back

=item *

fc

=over 8

=item *

HTML attributes for <TD> in the first cell

=back

=item *

fr

=over 8

=item *

HTML attributes for <TR> in the first row

=back

=back

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [html_table] FOO [/html_table]. Nesting:
NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->html_table(
        {
        },
        BODY
    )

 OR

    $Tag->html_table($ATTRHASH, $BODY);

Description

Builds an HTML table

=head2 if

Summary

Parameters: B<type term op compare>

THIS TAG HAS SPECIAL POSITIONAL PARAMETER HANDLING.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [if] FOO [/if]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

Called Routine for positonal:

B<ASP-like Perl call:>

    $Tag->if(
        {
         type => VALUE,
         term => VALUE,
         op => VALUE,
         compare => VALUE,
        },
        BODY
    )

 OR

    $Tag->if($type, $term, $op, $compare, $BODY);

Attribute aliases

            base ==> type
            comp ==> compare
            condition ==> compare
            operator ==> op

Description

Named call example: [if type="type" term="field" op="op"
compare="compare"]

Positional call example: [if type field op compare]

negated: [if type="!type" term="field" op="op" compare="compare"]

Positional call example: [if !type field op compare]

Allows conditional building of HTML based on the setting of various
Interchange session and database values. The general form is:

    [if type term op compare]
    [then]
                                If true, this is printed on the document.
                                The [then] [/then] is optional in most
                                cases. If ! is prepended to the type
                                setting, the sense is reversed and
                                this will be output for a false condition.
    [/then]
    [elsif type term op compare]
                                Optional, tested when if fails
    [/elsif]
    [else]
                                Optional, printed when all above fail
    [/else]
    [/if]

The [if] tag can also have some variants:

    [if type=explicit compare=`$perl_code`]
        Displayed if valid Perl CODE returns a true value.
    [/if]

You can do some Perl-style regular expressions:

    [if value name =~ /^mike/]
                                This is the if with Mike.
    [elsif value name =~ /^sally/]
                                This is an elsif with Sally.
    [/elsif]
    [elsif value name =~ /^pat/]
                                This is an elsif with Pat.
    [/elsif]
    [else]
                                This is the else, no name I know.
    [/else]
    [/if]

While named parameter tag syntax works for [if ...], it is more
convenient to use positional calls in most cases. The only exception
is if you are planning on doing a test on the results of another tag
sequence:

    [if value name =~ /[value b_name]/]
        Shipping name matches billing name.
    [/if]

Oops!  This will not work. You must do instead

    [if base=value field=name op="=~" compare="/[value b_name]/"]
        Shipping name matches billing name.
    [/if]

or better yet

    [if type=explicit compare=`
                        $Value->{name} =~ /$Value->{b_name}/
                        `]
        Shipping name matches billing name.
    [/if]

Interchange also supports a limited [and ...] and [or ...] capability:

    [if value name =~ /Mike/]
    [or value name =~ /Jean/]
    Your name is Mike or Jean.
    [/if]

    [if value name =~ /Mike/]
    [and value state =~ /OH/]
    Your name is Mike and you live in Ohio.
    [/if]

If you wish to do very complex AND and OR operations, you will have to
use [if explicit] or better yet embedded Perl/ASP. This allows
complex testing and parsing of values.

There are many test targets available:

I<config Directive>

The Interchange configuration variables. These are set by the
directives in your Interchange configuration file (or the defaults).

    [if config CreditCardAuto]
    Auto credit card validation is enabled.
    [/if]

I<data  database::field::key>

The Interchange databases. Retrieves a field in the database and
returns true or false based on the value.

    [if data products::size::99-102]
    There is size information.
    [else]
    No size information.
    [/else]
    [/if]

    [if data products::size::99-102 =~ /small/i]
    There is a small size available.
    [else]
    No small size available.
    [/else]
    [/if]

I<discount>

Checks to see if a discount is present for an item.

    [if discount 99-102]
    Item is discounted.
    [/if]

I<explicit>

A test for an explicit value. If perl code is placed between a
[condition] [/condition] tag pair, it will be used to make the
comparison. Arguments can be passed to import data from user space,
just as with the [perl] tag.

    [if explicit]
    [condition]
        $country = '[value country]';
        return 1 if $country =~ /u\.?s\.?a?/i;
        return 0;
    [/condition]
    You have indicated a US address.
    [else]
    You have indicated a non-US address.
    [/else]
    [/if]

This example is a bit contrived, as the same thing could be
accomplished with [if value country =~ /u\.?s\.?a?/i], but you will
run into many situations where it is useful.

This will work for I<Variable> values:

    [if type=explicit compare="__MYVAR__"] .. [/if]

I<file>

Tests for existence of a file. Useful for placing image tags only if
the image is present.

    [if file /home/user/www/images/[item-code].gif]
    <IMG SRC="[item-code].gif">
    [/if]

The file test requires that the I<SafeUntrap> directive contains
ftfile (which is the default).

I<items>

The Interchange shopping carts. If not specified, the cart used is the
main cart. Usually used as a litmus test to see if anything is in the
cart, for example:

  [if items]You have items in your shopping cart.[/if]

  [if items layaway]You have items on layaway.[/if]

I<ordered>

Order status of individual items in the Interchange shopping carts. If
not specified, the cart used is the main cart. The following items
refer to a part number of 99-102.

  [if ordered 99-102] Item 99-102 is in your cart. [/if]
    Checks the status of an item on order, true if item
    99-102 is in the main cart.

  [if ordered 99-102 layaway] ... [/if]
    Checks the status of an item on order, true if item
    99-102 is in the layaway cart.

  [if ordered 99-102 main size] ... [/if]
    Checks the status of an item on order in the main cart,
    true if it has a size attribute.

  [if ordered 99-102 main size =~ /large/i] ... [/if]
    Checks the status of an item on order in the main cart,
    true if it has a size attribute containing 'large'.

    To make sure it is exactly large, you could use:

  [if ordered 99-102 main size eq 'large'] ... [/if]

I<scratch>

The Interchange scratchpad variables, which can be set with the [set
name]value[/set] element.

    [if scratch mv_separate_items]
    ordered items will be placed on a separate line.
    [else]
    ordered items will be placed on the same line.
    [/else]
    [/if]

I<session>

the interchange session variables. of particular interest are
i<login>, i<frames>, i<secure>, and i<browser>.

I<validcc>

a special case, takes the form [if validcc no type exp_date].
evaluates to true if the supplied credit card number, type of card,
and expiration date pass a validity test. does a luhn-10 calculation
to weed out typos or phony card numbers. Uses the standard
CreditCardAuto variables for targets if nothing else is passed.

I<value>

the interchange user variables, typically set in search, control, or
order forms. variables beginning with c<mv_> are interchange special
values, and should be tested/used with caution.

The I<field> term is the specifier for that area. For example, [if
session logged_in] would return true if the logged_in session
parameter was set.

As an example, consider buttonbars for frame-based setups. It would be
nice to display a different buttonbar (with no frame targets) for
sessions that are not using frames:

    [if scratch frames]
        __BUTTONBAR_FRAMES__
    [else]
        __BUTTONBAR__
    [/else]
    [/if]

Another example might be the when search matches are displayed. If you
use the string '[value mv_match_count] titles found', it will display
a plural for only one match. Use:

    [if value mv_match_count != 1]
        [value mv_match_count] matches found.
    [else]
        Only one match was found.
    [/else]
    [/if]

The I<op> term is the compare operation to be used. Compare operations
are as in Perl:

    ==  numeric equivalence
    eq  string equivalence
    >   numeric greater-than
    gt  string greater-than
    <   numeric less-than
    lt  string less-than
    !=  numeric non-equivalence
    ne  string equivalence

Any simple perl test can be used, including some limited regex
matching. More complex tests are best done with [if explicit].

[then] text [/then]

This is optional if you are not nesting if conditions, as the text
immediately following the [if ..] tag is used as the conditionally
substituted text. If nesting [if ...] tags you should use a
[then][/then] on any outside conditions to ensure proper
interpolation.

[elsif type field op* compare*]

named attributes: [elsif type="type" term="field" op="op"
compare="compare"]

Additional conditions for test, applied if the initial [if ..] test
fails.

[else] text [/else]

The optional else-text for an if or if_field conditional.

[condition] text [/condition]

Only used with the [if explicit] tag. Allows an arbitrary expression
B<in Perl> to be placed inside, with its return value interpreted as
the result of the test. If arguments are added to [if explicit args],
those will be passed as arguments are in the [I<per>l] construct.

=head2 import

Summary

Parameters: B<table type>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Interpolates B<container text> by default>.

This is a container tag, i.e. [import] FOO [/import]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->import(
        {
         table => VALUE,
         type => VALUE,
        },
        BODY
    )

 OR

    $Tag->import($table, $type, $ATTRHASH, $BODY);

Attribute aliases

            base ==> table
            database ==> table

Description

Named attributes:

    [import table=table_name
            type=(TAB|PIPE|CSV|%%|LINE)
            continue=(NOTES|UNIX|DITTO)
            separator=c]

Import one or more records into a database. The type is any of the
valid Interchange delimiter types, with the default being defined by
the setting of the database I<DELIMITER>. The table must already be a
defined Interchange database table; it cannot be created on the fly.
(If you need that, it is time to use SQL.)

The type of LINE and continue setting of NOTES is
particularly useful, for it allows you to name your fields and not
have to remember the order in which they appear in the database. The
following two imports are identical in effect:

    [import table=orders]
    code: [value mv_order_number]
    shipping_mode: [shipping-description]
    status: pending
    [/import]

    [import table=orders]
    shipping_mode: [shipping-description]
    status: pending
    code: [value mv_order_number]
    [/import]

The code or key must always be present, and is always named
code.

If you do not use NOTES mode, you must import the fields in the
same order as they appear in the ASCII source file.

The [import ....] TEXT [/import] region may contain multiple
records. If using NOTES mode, you must use a separator, which by
default is a form-feed character (^L).

=head2 include

Summary

Parameters: B<file locale>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->include(
        {
         file => VALUE,
         locale => VALUE,
        }
    )

 OR

    $Tag->include($file, $locale);

Description

Same as [file name] except interpolates for all Interchange tags
and variables. Does NOT do locale translations.

=head2 index

Creates an index for the specified table.

Summary

Parameters: B<table>

Positional parameters in same order.

=over 4

=item *

extension (default "idx")

=over 8

=item *

Index file extension

=back

=item *

basefile

=over 8

=item *

Database filename. Exports the table to this filename if old or
missing before indexing. See also the export tag for additional
relevent attributes such as delimiter type, etc.

=back

=item *

export_only

=over 8

=item *

Just do the export if necessary (not the index).

=back

=item *

spec

=over 8

=item *

The index specification

=back

=item *

fn or fields or col or columns

=over 8

=item *

field(s) to index

=back

=item *

show_status

=over 8

=item *

Return '1' to the page if successful

=back

=back

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->index(
        {
         table => VALUE,
        }
    )

 OR

    $Tag->index($table, $ATTRHASH);

Attribute aliases

            base ==> table
            database ==> table

Description

Creates an index for the specified table.

=head2 input_filter

Summary

Parameters: B<name>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [input_filter] FOO [/input_filter].
Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->input_filter(
        {
         name => VALUE,
        },
        BODY
    )

 OR

    $Tag->input_filter($name, $ATTRHASH, $BODY);

Attribute aliases

            ops ==> op
            var ==> name
            variable ==> name

Description

B<NO Description>

=head2 item_list

Summary

Parameters: B<name>

ONLY THE B<> PARAMETERS ARE POSITIONAL.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [item_list] FOO [/item_list]. Nesting:
NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->item_list(
        {
         name => VALUE,
        },
        BODY
    )

 OR

    $Tag->item_list($name, $ATTRHASH, $BODY);

Attribute aliases

            cart ==> name

Description

Within any page, the [item_list cart*] element shows a list of all the
items ordered by the customer so far. It works by repeating the source
between [item_list] and [/item_list] once for each item ordered.

NOTE: The special tags that reference item within the list are not
normal Interchange tags, do not take named attributes, and cannot be
contained in an HTML tag (other than to substitute for one of its
values or provide a conditional container). They are interpreted only
inside their corresponding list container. Normal Interchange tags can
be interspersed, though they will be interpreted I<after> all of the
list-specific tags.

Between the item_list markers the following elements will return
information for the current item:

[if-data table column]

If the database field column in table I<table> is non-blank, the
following text up to the [/if_data] tag is substituted. This can be
used to substitute IMG or other tags only if the corresponding source
item is present. Also accepts a [else]else text[/else] pair for the
opposite condition.

[if-data ! table column]

Reverses sense for [if-data].

[/if-data]

Terminates an [if_data table column] element.

[if-field fieldname]

If the products database field I<fieldname> is non-blank, the
following text up to the [/if_field] tag is substituted. If you have
more than one products database table (see I<ProductFiles>), it will
check them in order until a matching key is found. This can be used to
substitute IMG or other tags only if the corresponding source item is
present. Also accepts a [else]else text[/else] pair for the opposite
condition.

[if-field ! fieldname]

Reverses sense for [if-field].

[/if-field]

Terminates an [if_field fieldname] element.

[item-accessories attribute*, type*, field*, database*, name*]

Evaluates to the value of the Accessories database entry for the item.
If passed any of the optional arguments, initiates special processing
of item attributes based on entries in the product database.

[item-code]

Evaluates to the product code for the current item.

[item-data database fieldname]

Evaluates to the field name I<fieldname> in the arbitrary database
table I<database>, for the current item.

[item-description]

Evaluates to the product description (from the products file) for the
current item.

In support of OnFly, if the description field is not found in the
database, the description setting in the shopping cart will be used
instead.

[item-field fieldname]

Evaluates to the field name I<fieldname> in the products database, for
the current item. If the item is not found in the first of the
I<ProductFiles>, all will be searched in sequence.

[item-increment]

Evaluates to the number of the item in the match list. Used for
numbering search matches or order items in the list.

[item-last]tags[/item-last]

Evaluates the output of the Interchange tags encased inside the tags,
and if it evaluates to a numerical non-zero number (i.e. 1, 23, or -1)
then the list iteration will terminate. If the evaluated number is
B<negative>, then the item itself will be skipped. If the evaluated
number is B<positive>, then the item itself will be shown but will be
last on the list.

      [item-last][calc]
        return -1 if '[item-field weight]' eq '';
        return 1 if '[item-field weight]' < 1;
        return 0;
        [/calc][/item-last]

If this is contained in your [item-list] (or [search-list] or
flypage) and the weight field is empty, then a numerical -1 will be
output from the [calc][/calc] tags; the list will end and the item
will B<not> be shown. If the product's weight field is less than 1, a
numerical 1 is output. The item will be shown, but will be the last
item shown. (If it is an [item-list], any price for the item will
still be added to the subtotal.) NOTE: no HTML style.

[item-modifier attribute]

Evaluates to the modifier value of attribute for the current item.

[item-next]tags[/item_next]

Evaluates the output of the Interchange tags encased inside, and if it
evaluates to a numerical non-zero number (i.e. 1, 23, or -1) then the
item will be skipped with no output. Example:

      [item-next][calc][item-field weight] < 1[/calc][/item-next]

If this is contained in your [item-list] (or [search-list] or
flypage) and the product's weight field is less than 1, then a
numerical 1 will be output from the [calc][/calc] operation. The
item will not be shown. (If it is an [item-list], any price for the
item will still be added to the subtotal.)

[item-price n* noformat*]

Evaluates to the price for quantity n (from the products file) of
the current item, with currency formatting. If the optional "noformat"
is set, then currency formatting will not be applied.

[discount-price n* noformat*]

Evaluates to the discount price for quantity n (from the products
file) of the current item, with currency formatting. If the optional
"noformat" is set, then currency formatting will not be applied.
Returns regular price if not discounted.

[item-discount]

Returns the difference between the regular price and the discounted
price.

[item-discount_subtotal]

Inserts the discounted subtotal of the ordered items.

[item-quantity]

Evaluates to the quantity ordered for the current item.

[item-subtotal]

Evaluates to the subtotal (quantity * price) for the current item.
Quantity price breaks are taken into account.

[modifier-name attribute]

Evaluates to the name to give an input box in which the customer can
specify the modifier to the ordered item.

[quantity-name]

Evaluates to the name to give an input box in which the customer can
enter the quantity to order.

=head2 label

The page label for goto. I believe this is deprecated.

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->label(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->label($name);

Description

The page label for goto. I believe this is deprecated.

=head2 log

Log contained text to specified file.

Summary

Parameters: B<file>

=over 4

=item *

file

=over 8

=item *

name of file to log to. 'file=">I<filename>"' also sets 'create'
attribute.

=back

=item *

create

=over 8

=item *

Set create=1 to create the file if not present

=back

=item *

process

=over 8

=item *

Processing (if any) to apply to the content while logging

=over 12

=item *

nostrip (don't strip leading/trailing whitespace and convert "\r\n" to
"\n"

=back

=back

=item *

delim and record_delim

=over 8

=item *

Line and record delimiters, respectively

=back

=item *

type

=over 8

=item *

Log type

=over 12

=item *

text (ordinary text file)


=item *

quot (delimited entries)


=item *

error (add interchange error formatting and time/location stamps)

=back

=back

=item *

hide

=over 8

=item *

Suppress status otherwise returned by tag to the page.

=back

=back

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [log] FOO [/log]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->log(
        {
         file => VALUE,
        },
        BODY
    )

 OR

    $Tag->log($file, $ATTRHASH, $BODY);

Attribute aliases

            arg ==> file

Description

Log contained text to specified file.

=head2 loop

Summary

Parameters: B<list>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [loop] FOO [/loop]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->loop(
        {
         list => VALUE,
        },
        BODY
    )

 OR

    $Tag->loop($list, $ATTRHASH, $BODY);

Attribute aliases

            arg ==> list
            args ==> list

Description

HTML example:

    <TABLE><TR MV="loop 1 2 3"><TD>[loop-code]</TD></TR></TABLE>

Returns a string consisting of the LIST, repeated for every item in a
comma-separated or space-separated list. Operates in the same fashion
as the [item-list] tag, except for order-item-specific values.
Intended to pull multiple attributes from an item modifier - but can
be useful for other things, like building a pre-ordained product list
on a page.

Loop lists can be nested reliably in Interchange by using the
prefix="tag" parameter. New syntax:

    [loop arg="A B C"]
        [loop prefix=mid arg="[loop-code]1 [loop-code]2 [loop-code]3"]
            [loop prefix=inner arg="X Y Z"]
                [mid-code]-[inner-code]
            [/loop]
        [/loop]
    [/loop]

You can do an arbitrary search with the search="args" parameter, just
as in a one-click search:

    [loop search="se=Americana/sf=category"]
        [loop-code] [loop-field title]
    [/loop]

The above will show all items with a category containing the whole
world "Americana", and will work the same in both old and new syntax.

[if-loop-data table column] IF [else] ELSE [/else][/if-loop-field]

Outputs the IF if the column in table is non-empty, and the ELSE
(if any) otherwise.

See [if-PREFIX-data].

[if-loop-field column] IF [else] ELSE [/else][/if-loop-field]

Outputs the B<IF> if the column in the products table is
non-empty, and the B<ELSE> (if any) otherwise. Will fall through to
the first non-empty field if there are multiple ProductFiles.

See [if-PREFIX-field].

[if-loop-param param] IF [else] ELSE [/else][/if-loop-param]

Only works if you have named return fields from a search (or from a
passed list with the lr=1 parameter).

Outputs the B<IF> if the returned param is non-empty, and the
B<ELSE> (if any) otherwise.

See [if-PREFIX-param].

[if-loop-pos N] IF [else] ELSE [/else][/if-loop-param]

Only works if you have multiple return fields from a search (or from a
passed list with the lr=1 parameter).

Parameters are numbered from ordinal 0, with [loop-pos 0] being the
equivalent of [loop-code].

Outputs the B<IF> if the returned positional parmeter N is
non-empty, and the B<ELSE> (if any) otherwise.

See [if-PREFIX-pos].

[loop-accessories]

Outputs an [accessories ...] item.

See [PREFIX-accessories].

[loop-change marker]

See [PREFIX-change].

[loop-code]

Evaluates to the code for the current item.

See [PREFIX-code].

[loop-data database fieldname]

Evaluates to the field name I<fieldname> in the arbitrary database
table I<database>, for the current item.

See [PREFIX-data].

[loop-description]

Evaluates to the product description (from the products file, passed
description in on-fly item, or description attribute in cart) for the
current item.

See [PREFIX-description].

[loop-field fieldname]

Evaluates to the field name I<fieldname> in the database,  for the
current item.

See [PREFIX-field].

[loop-increment]

Evaluates to the number of the item in the list. Used for numbering
items in the list.

Starts from integer 1.

See [PREFIX-increment].

[loop-last]tags[/loop-last]

Evaluates the output of the Interchange tags encased inside, and if it
evaluates to a numerical non-zero number (i.e. 1, 23, or -1) then the
loop iteration will terminate. If the evaluated number is B<negative>,
then the item itself will be skipped. If the evaluated number is
B<positive>, then the item itself will be shown but will be last on
the list.

      [loop-last][calc]
        return -1 if '[loop-field weight]' eq '';
        return 1 if '[loop-field weight]' < 1;
        return 0;
        [/calc][/loop-last]

If this is contained in your [loop list] and the weight field is
empty, then a numerical -1 will be output from the [calc][/calc]
tags; the list will end and the item will B<not> be shown. If the
product's weight field is less than 1, a numerical 1 is output. The
item will be shown, but will be the last item shown.

[loop-next]tags[/loop-next]

Evaluates the output of the Interchange tags encased inside, and if it
evaluates to a numerical non-zero number (i.e. 1, 23, or -1) then the
loop will be skipped with no output. Example:

      [loop-next][calc][loop-field weight] < 1[/calc][/loop-next]

If this is contained in your [loop list] and the product's weight
field is less than 1, then a numerical 1 will be output from the
[calc][/calc] operation. The item will not be shown.

[loop-price n* noformat*]

Evaluates to the price for optional quantity n (from the products
file) of the current item, with currency formatting. If the optional
"noformat" is set, then currency formatting will not be applied.

=head2 mail

Mail contained text to recipient specified by 'to' using the program
specified with the SendMailProgram catalog directive.

Summary

Parameters: B<to>

Positional parameters in same order.

=over 4

=item *

raw

=over 8

=item *

Send it raw without creating headers and checking content, recipient,
subject, etc.

=back

=item *

extra

=over 8

=item *

Additional headers (these will also be added to 'raw' messages)

=back

=item *

success

=over 8

=item *

Tag return value if successful (default is 1).

=back

=item *

hide

=over 8

=item *

Suppress tag return value. This would otherwise be the 'success'
attribute setting.

=back

=item *

show

=over 8

=item *

The tag will return the final message with headers in the page

=back

=back

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [mail] FOO [/mail]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->mail(
        {
         to => VALUE,
        },
        BODY
    )

 OR

    $Tag->mail($to, $ATTRHASH, $BODY);

Description

Mail contained text to recipient specified by 'to' using the program
specified with the SendMailProgram catalog directive.

=head2 mvasp

Executes the ASP-style perl code contained by the tag. The code will
run under the restrictions of the I<Safe> module. This is very similar
to the [perl] tag, except that the standard '<%' and '%>' ASP
delimiters allow you to mix HTML and perl code.

Summary

    [mvasp tables other_named_attributes] ASP here [/mvasp]
    [mvasp tables="db1 db2 ..." other_named_attributes] ASP here [/mvasp]

 Parameters   Description                               Default
 tables       Database tables to be made available to ASP Perl codenone
 table        Alias for tables                          none

 Attributes                        Default
 failure                           none
 no_return                         Always true
 subs                              No
 arg="subs"                        Same as subs
 global                            No
 file                              none
 interpolate                       No
 reparse                           No

 Other_Charactreristics            
 Invalidates cache                 Yes
 Has Subtags                       <% and %>
 Container tag                     Yes
 Nests                             No

B<Tag expansion example:>

   [mvasp tables="products" failure="ASP Broke <BR>"]
      <P>This is HTML</p>
      <% my $sku = $Values->{code}; %>
      <P>More HTML</p>
      <% my $result = "Looked up SKU $sku. It is a ";
         $result .= $Tag->data('products', 'description', $sku );
         $Document->write( "$result <br>\n" ); %>
      <P>Still more HTML</p>
   [/mvasp]
------------------------------------------------------
      <P>This is HTML</p>

      <P>More HTML</p>
      Looked up SKU os28044. It is a Framing Hammer <br>

      <P>Still more HTML</p>

See Also

I<perl>, I<Interchange Programming>

Description

Executes the ASP-style perl code contained by the tag. The code will
run under the restrictions of the I<Safe> module. This is very similar
to the [perl no_return=1] tag, except that the standard '<%' and
'%>' ASP delimiters allow you to mix HTML and perl code.

See the perl tag and I<ASP-Like Perl> sections for more detail.

I<tables>

Whitespace-separated list of database tables to make available within
the ASP-Perl code. See perl tag.

I<failure>

The value the tag should return in case the perl code fails the eval.
See perl tag.

I<no_return>

The return value of the perl code is always suppressed. If you want
output from the ASP code sections, you must explicitly write it with
the &HTML or $Document->write() functions.

You can also retrieve the return value of the perl code from the
session hash via [I<data> session mv_perl_result]. See perl tag.

I<subs>

Enable I<GlobalSub> routines (requires catalog directive
AllowGlobal). See perl tag.

I<global>

Turn off I<Safe> protection (requires catalog directive
AllowGlobal). See perl tag.

I<file>

Prepend the contents of the specified file or FileDatabase entry to
the perl code before eval'ing it. See perl tag.

Examples

See the I<ASP-Like Perl> section of I<Interchange Programming>.

=head2 nitems

Summary

Parameters: B<name>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->nitems(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->nitems($name, $ATTRHASH);

Description

Expands into the total number of items ordered so far. Takes an
optional cart name as a parameter.

=head2 onfly

Summary

Parameters: B<code quantity>

Positional parameters in same order.

=over 4

=item *

code

=over 8

=item *

Unique key (typically sku) if not already set

=back

=item *

quantity

=over 8

=item *

How many (if not already set)

=back

=item *

text

=over 8

=item *

Delimited list of additional item fields and values to set. Default
delimiter is the pipe ('|') character.

=over 12

=item *

text="field1=val1|field2=val2|field3=val3"

=back

=back

=back

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->onfly(
        {
         code => VALUE,
         quantity => VALUE,
        }
    )

 OR

    $Tag->onfly($code, $quantity, $ATTRHASH);

Description

B<NO Description>

=head2 options

Summary

Parameters: B<code>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->options(
        {
         code => VALUE,
        }
    )

 OR

    $Tag->options($code, $ATTRHASH);

Description

B<NO Description>

=head2 or

Summary

Parameters: B<type term op compare>

THIS TAG HAS SPECIAL POSITIONAL PARAMETER HANDLING.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

Called Routine for positonal:

B<ASP-like Perl call:>

    $Tag->or(
        {
         type => VALUE,
         term => VALUE,
         op => VALUE,
         compare => VALUE,
        }
    )

 OR

    $Tag->or($type, $term, $op, $compare);

Attribute aliases

            base ==> type
            comp ==> compare
            operator ==> op

Description

B<NO Description>

=head2 order

Expands into a hypertext link which will include the specified item in
the list of products to order and display the order page.

Summary

    [order code quantity]Link Text[/order]
    [order code=os28044 quantity=2]Link Text</A>

 Parameters   Description                               Default
 code         This is the unique identifier for the item, typically the SKU in the products tablenone
 quantity     Quantity to order                         1

 Attributes                        Default
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 No
 Container tag                     No
 Has end tag                       No ([/order] is a macro for </A>)

B<Tag expansion example:>

   [order os28044 2]Buy Framing Hammer[/order]
---
   <A HREF="http://localhost.localdomain/cgi-bin/tag72/ord/basket?\
   mv_session_id=6CZ2whqo&mv_pc=1&mv_action=refresh&\
   mv_order_item=os28044&mv_order_quantity=3">Buy Framing Hammer</A>

B<ASP-like Perl call:>

    $Tag->order($code, $quantity);

Description

Expands into a hypertext link which will include the specified code in
the list of products to order and display the order page. B<code>
should be a product code listed in one of the "products" databases.

How to Order an Item

Interchange can either use a form-based order or a link-based order to
place an item in the shopping cart. The order tag creates a
link-based order.

You can use the area tag with form variables if you need more
control, for example, to change frames for the S<order:>

   <A HREF="[area href=ord/basket
                  form="mv_order_item=os28044
                        mv_order_quantity=2
                        mv_action=refresh"]"
    TARGET=newframe> Order Framing Hammer</A>

To order with a form, you set the form variable mv_order_item to
the item-code/SKU and use the refresh S<action:>

   <FORM ACTION="[process-target]" METHOD=POST>
   <INPUT TYPE=hidden  NAME="mv_todo"        VALUE="refresh">
   <INPUT TYPE=hidden  NAME="mv_order_item"  VALUE="os28044">

   Order <INPUT NAME="mv_order_quantity" SIZE=3 VALUE=1> Framing Hammer

   <INPUT TYPE=submit VALUE="Order!">
   </FORM>

Groups of items may be batched:

   <FORM ACTION="[process-target]" METHOD=POST>
   <INPUT TYPE=hidden  NAME="mv_todo"        VALUE="refresh">

   <INPUT TYPE=hidden  NAME="mv_order_item"  VALUE="TK112">
   <INPUT NAME="mv_order_quantity" SIZE=3> Standard Toaster

   <INPUT TYPE=hidden  NAME="mv_order_item"  VALUE="TK200">
   <INPUT NAME="mv_order_quantity" SIZE=3> Super Toaster

   <INPUT TYPE=submit VALUE="Order!">
   </FORM>

Items that have a quantity of zero (or blank) will be skipped. Only
items with a positive quantity will be placed in the basket.

Attributes like size or color may be specified at time of order. See
the accessories tag for detail.

=head2 page

Expands to a hyperlink to an Interchange page or action, including
surrounding <A HREF ...>. The URL within the link includes the
Interchange session ID and supplied arguments. The optional [/page] is
simply a macro for </A>.

If you do not want the <A HREF ...>, use the I<area> tag instead -
these are equivalent:

    [page href=dir/page arg=mv_arg]TargetName[/page]
    <A HREF="[area href=dir/page arg=mv_arg]">TargetName</A>

Summary

    [page href arg other_named_attributes]
    [page href=dir/page arg=page_arguments other_named_attributes]

 Parameters   Description                               Default
 href         Path to Interchange page or actionSpecial arguments'scan' treats arg as a search argument'http://...' external link (requires form attribute)process
 arg          Interchange arguments to page or action   none
 base         alias for arg                             none

 Attributes                        Default
 extra                             none
 form                              none
 search                            No
 secure                            No
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 No
 Macro                             No
 Has end tag                       No ([/page] is a macro for </A>)

B<Tag expansion example:>

   [page href=dir/page.html arg="arg1=AA/arg2=BB"]

   <a href="www.here.com/cgi-bin/mycatalog/page.html?mv_session_id=6CZ2whqo&\
   mv_pc=1&mv_arg=arg1%3dAA/arg2%3dBB">

B<ASP-like Perl call:>

    $Tag->page(  { href => "dir/page",
                   arg  => "arguments", }  );

or similarly with positional parameters,

    $Tag->page($href, $arg, $attribute_hash_reference);

Using arrayref for joined search (see also I<Attribute Arrays and
Hashes>)

    my $searchref = [ "se=hammer/fi=products/sf=description",
                      "se=plutonium/fi=products/sf=description", ];

    $Tag->page( { href   => 'scan',
                  search => $searchref, } );

See Also

I<area>

Description

The page tag inserts a hyperlink to the specified Interchange page
or action. For example, [page shirts] will expand into

   <a href="http://www.here.com/cgi-bin/mycatalog/shirts?mv_session_id=6CZ2whqo&mv_pc=1">

The catalog page displayed will come from "shirts.html" in the pages
directory.

The additional argument will be passed to Interchange and placed in
the {arg} session parameter. This allows programming of a conditional
page display based on where the link came from. The argument is then
available with the tag [data session arg], or the embedded Perl
session variable $Session->{arg}. Spaces and some other characters
will be escaped with the %NN HTTP-style notation and unescaped when
the argument is read back into the session.

For better performance, Interchange can prebuild and cache pages that
would otherwise be generated dynamically. If Interchange has built
such a static page for the target, the page tag produces a link to
the cached page whenever the user has accepted and sent back a cookie
with the session ID. If the user did not accept the cookie,
Interchange cannot use the cache, since the link must then include the
I<mv_session_id> argument in order to preserve session.

I<form>

The optional form argument allows you to encode a form in the link.

        [page form="mv_order_item=os28044
                    mv_order_size=15oz
                    mv_order_quantity=1
                    mv_separate_items=1
                    mv_todo=refresh"] Order 15oz Framing Hammer</A>

The two form values I<mv_session_id> and I<mv_arg> are automatically
added when appropriate. The form value I<mv_arg> receives the value of
the tag's arg parameter.

This would generate a form that ordered quantity one of item number
os28044 with size 15oz. The item would appear on a separate line
in the shopping cart, since mv_separate_items is set. Since the
href is not set, you will go to the default shopping cart page -
alternatively, you could have set mv_orderpage=yourpage to go to
yourpage.

All normal Interchange form caveats apply - you must have an action,
you must supply a page if you don't want to go to the default, etc.

You can theoretically submit any form with this, though none of the
included values can have newlines or trailing whitespace. If you want
to do something like that you will have to write a UserTag.

If the parameter href is not supplied, I<process> is used, causing
normal Interchange form processing.

If the href points to an http:// link, then no Interchange URL
processing will be done, but the URL will include mv_session_id,
mv_pc, and any arguments supplied with the arg attribute:

       [page  href="http://www.elsewhere.net/cgi/script"
              form="cgi_1=ONE
                    cgi_2=TWO"
               arg="interchange argument"]External link</A>

       <A HREF="http://www.elsewhere.net/cgi/script?\
        mv_session_id=6CZ2whqo&mv_pc=1&mv_arg=interchange%20argument&\
        cgi_1=ONE&cgi_2=TWO">External link</A>

I<search>

Interchange allows you to pass a search in a URL. There are two ways
to do this:

=over 4

=item 1.

Place the search specification in the named search attribute.

=over 8

=item *

Interchange will ignore the href parameter (the link will be set to
'scan'.

=item *

If you give the arg parameter a value, that value will be available
as [value mv_arg] within the search display page.

=back

=item 2.

Set the href parameter to 'scan' and set arg to the search
specification.

=over 8

=item *

Note that you can use this form positionally - the values go into
href and arg, so you do not have to name parameters.

=back

=back

These are identical:

   [page scan
         se=Impressionists
         sf=category]
      Impressionist Paintings
   [/page]

   [page href=scan
          arg="se=Impressionists
               sf=category"]
      Impressionist Paintings
   </A>

   [page search="se=Impressionists
                 sf=category"]
      Impressionist Paintings
   [/page]


Here is the same thing from a non-interchange page (e.g., a home
page), assuming '/cgi-bin/mycatalog' is the CGI path to Interchange's
vlink):

     <A HREF="/cgi-bin/mycatalog/scan/se=Impressionists/sf=category">
        Impressionist Paintings
     </A>

Sometimes, you will find that you need to pass characters that will
not be interpreted positionally. In that case, you should quote the
arguments:

    [page href=scan
          arg=|
                se="Something with spaces"
          |]

See the I<Search and Form Variables> appendix for a listing of the
form variables along with two-letter abbreviations and descriptions.

They can be treated just the same as form variables on the page,
except that they can't contain spaces, '/' in a file name, or quote
marks. These characters can be used in URL hex encoding, i.e. %20 is a
space, %2F is a /, etc. - &sp; or &#32; will not be
recognized. If you use one of the methods below to escape these
"unsafe" characters, you won't have to worry about this.

You may specify a one-click search in three different ways. The first
is as used in previous versions, with the scan URL being specified
completely as the page name. The second two use the "argument"
parameter to the [page ...] or [area ...]> tags to specify the
search (an argument to a scan is never valid anyway).

Original syntax

If you wish to do an OR search on the fields category and artist for
the strings "Surreal" and "Gogh", while matching substrings, you would
do:

 [page scan se=Surreal/se=Gogh/os=yes/su=yes/sf=artist/sf=category]
    Van Gogh -- compare to surrealists
 [/page]

In this method of specification, to replace a / (slash) in a file name
(for the sp, bd, or fi parameter) you must use the shorthand of ::,
i.e. sp=results::standard. (This may not work for some browsers, so
you should probably either put the page in the main pages directory or
define the page in a search profile.)

Ampersand syntax

You can substitute & for / in the specification and be able to use /
and quotes and spaces in the specification.

 [page scan se="Van Gogh"&sp=lists/surreal&os=yes&su=yes&sf=artist&sf=category]
    Van Gogh -- compare to surrealists
 [/page]

Any "unsafe" characters will be escaped.

Multi-line syntax

You can specify parameters one to a line, as well.

    [page scan
        se="Van Gogh"
        sp=lists/surreal
        os=yes
        su=yes
        sf=artist
        sf=category
    ] Van Gogh -- compare to surrealists [/page]

Any "unsafe" characters will be escaped. You may not search for
trailing spaces in this method; it is allowed in the other notations.

Joined searches

You can also specify a joined search using an attribute array (see
S<I<Attribute Arrays and Hashes>):>

    [page href=scan
      search.0="se=fragrant
                fi=products
                sf=smell"
      search.1="se=purple
                sf=color"
      search.2="se=perennial
                sf=type"]

The search routine called by the page tag automatically adds the other
relevant search specification elements, including the 'co=yes' to
indicate a combined search (I<joined searches> are described in the
Interchange database documentation).

[/page]

This is not an actual end tag, but simply a macro that expands to
</A>. The following two lines are equivalent:

  [page shirts]Our shirt collection[/page]
  [page shirts]Our shirt collection</A>

Tip: In large pages, just use the </A> tag for a small performance
improvement.

=head2 perl

Executes the perl code contained by the tag. The code will run under
the restrictions of Perl's I<Safe> module by default. The tag expands
to the value returned by the enclosed code (i.e., printing to STDOUT
or STDERR is useless).

See also I<Interchange Programming>.

Summary

    [perl tables other_named_attributes] Code here [/perl]
    [perl tables="db1 db2 ..." other_named_attributes] Code here [/perl]

 Parameters   Description                               Default
 tables       Database tables to be made available to ASP Perl codenone
 table        Alias for tables                          none

 Attributes                        Default
 failure                           none
 no_return                         No
 subs                              No
 arg="subs"                        Same as subs
 global                            No
 file                              none
 interpolate                       No
 reparse                           Yes

 Other_Charactreristics            
 Invalidates cache                 Yes
 Has Subtags                       No
 Container tag                     Yes

B<Tag expansion example:>

   [perl tables="products" failure="Perl code error <BR>"]
      my $result = "Looked up SKU $Values->{code}. It is a ";
      $result .= $Tag->data('products', 'description', $Values->{code} );
      return ("$result <br>\n");
   [/perl]
------------------------------------------------------
   Looked up SKU os28044. It is a Framing Hammer <br>

B<ASP-like Perl call:> (e.g., to use it like a runtime eval() within
your code)

    $Tag->perl(  { tables  => "products", },
                 $code  );

or similarly with positional parameters,

    $Tag->perl( $tables, $attribute_hash_reference );

See Also

See also I<Interchange Programming>, [calc], and [mvasp].

Description

This tag allows you to embed perl code within an Interchange page. The
code will run under the restrictions of Perl's I<Safe> module by
default. Perl's 'warnings' and 'strict' pragmas are both turned
off, and Safe will block you from turning them on, since it blocks
Perl's 'use' command. (This is not usually a problem, since you
should probably use an alternative such as a usertag if your code is
complex enough to need strict.)

The tag expands to the value returned by the enclosed code (i.e.,
printing to STDOUT or STDERR is useless).

    [perl]
        $name    = $Values->{name};
        $browser = $Session->{browser};
        return "Hi, $name! How do you like your $browser?
    [/perl]

HTML example:

    <PRE mv=perl>
        $name    = $Values->{name};
        $browser = $Session->{browser};
        return "Hi, $name! How do you like your $browser?
    </PRE>

Object references are available for most Interchange tags and
functions, as well as direct references to Interchange session and
configuration values.

 Object                            Description
 $CGI->{key}                       Hash reference to raw submitted values
 $CGI_array->{key}                 Arrays of submitted values
 $Carts->{cartname}                Direct reference to shopping carts
 $Config->{key}                    Direct reference to $Vend::Cfg
 $DbSearch->array(@args)           Do a DB search and get results
 $Document->header()               Writes header lines
 $Document->send()                 Writes to output
 $Document->write()                Writes to page
 $Scratch->{key}                   Direct reference to scratch area
 $Session->{key}                   Direct reference to session area
 $Tag->tagname(@args)              Call a tag as a routine (UserTag too!)
 $TextSearch->array(@args)         Do a text search and get results
 $Values->{key}                    Direct reference to user form values
 $Variable->{key}                  Config variables (same as $Config->{Variable});
 &HTML($html)                      Same as $Document->write($html);
 &Log($msg)                        Log to the error log

For full descriptions of these objects, see I<Interchange Perl
Objects>.

I<tables>

This should ba a whitespace-separated list of database tables you want
to make available within the Perl code.

If you wish to use database values in your Perl code, the tag must
pre-open the table(s) you will be using. Here is an example using the
products S<table:>

    [perl tables=products]
        my $cost = $Tag->data('products', 'our_cost', $Values->{code});
        $min_price = $cost * ( 1 + $min_margin );
        return ($min_price > $sale_price) ? $min_price : $sale_price;
    [/perl]

If you do not do this, your code will fail with a runtime Safe error
when it tries to look up 'our_cost' in the products database with the
data tag.

Even if you properly specify the tables to pre-open, some database
operations will still be restricted because Safe mode prohibits
creation of new objects. For SQL, most operations can be performed if
the Safe::Hole module is installed. Otherwise, you may have to set
the global=1 attribute to use data from SQL tables.

Interchange databases can always be accessed as long as they are
pre-opened by using an item first.

Technical note:

Safe objects (including database handles) may persist within a page,
and the perl tag does not necessarily destroy objects created
earlier in the page. As a result, your code may work even though you
did not set 'tables' properly, only to break later when you change
something elsewhere on the page.

For example, this will work because the first call to [accessories
...] opens the (default) products table:

  [accessories code=os28044 attribute=size]

  [perl]
    return $Tag->accessories( { attribute => 'size',
                                code      => 'os28085' } );
  [/perl]

If you remove the first [accessories ...] tag, then the
$Tag->accessories call will fail with a Safe error unless you also set
'tables=products' in the perl tag.

The moral of this story is to ensure that you pass all necessary
tables in the perl tag.

I<failure>

If your code contains a compile or runtime error and fails to evaluate
(i.e., eval($code) would set $@), the tag will return the value set
for the failure attribute. The error will be logged as usual.

For example,

    [perl failure="It Broke"]
        my $cost = $Tag->data('products', 'our_cost', $Values->{code});
        $min_price = $cost * ( 1 + $min_margin );
        return ($min_price > $sale_price) ? $min_price : $sale_price;
    [/perl]

will return 'It Broke' because the $Tag->Data(...) call will fail
under the Safe module (see I<tables> above).

I<no_return>

If no_return=1, this attribute suppresses the return value of the
perl code.

You can retrieve the return value from the session hash via [I<data>
session mv_perl_result] until it gets overwritten by another perl
tag.

If no_return is set, the perl tag I<will> return any output
explicitly written with the &HTML or $Document->write() functions.

B<Note: >

If no_return is I<not> set, then the $Document->write() buffer is
not returned (unless you use $Document->hot(1) or $Document->send(),
in which case the contents of the write buffer will probably appear
before anything else on the page). See I<Interchange Perl Objects> for
more detail.



Here is an example:

    [perl tables=products no_return=1]
        my $cost = $Tag->data('products', 'our_cost', $Values->{code});
        $min_price = $cost * ( 1 + $min_margin );
        &HTML( ($min_price > $sale_price) ? $min_price : $sale_price );
        return ($min_price > $sale_price) ? 'too low' : 'ok';
    [/perl]

This will put the same price on the page as our earlier example, but

$Session-E<gt>{mv_perl_result} will be either 'too low' or 'ok'.

The [mvasp] tag is very similar to [perl no_return=1].

I<subs>

If you have set the AllowGlobal catalog directive, setting
subs=1 will enable you to call I<GlobalSub> routines within the
enclosed perl code. Note that this can compromise security.

I<global>

If you have set the AllowGlobal catalog directive, setting
global=1 will turn off I<Safe> protection within the tag.

The code within the tag will then be able to do anything the user ID
running interchange can. This seriously compromises security, and you
should know what you are doing before using it in a public site. It is
especially dangerous if a single Interchange server is shared by
multiple companies or user IDs.

Also, full 'use strict' checking is turned on by default when in
global mode. You can turn it off by using 'no strict;' within your
code. Note that any strict errors will go to the interchange error
logs, and the tag itself will fail silently within the page.

I<file>

This prepends the contents of the specified file or FileDatabase entry
to the enclosed perl code (if any), then executes as usual.

For example,

    [perl file="my_script.pl"][/perl]

would execute myscript.pl and expand to its return value.

Absolute filenames (or filenames containing '../') are prohibited by
the NoAbsolute catalog directive.

If the filename is not absolute, interchange first looks for a file in
the current directory, then in the list set with the TemplateDir
catalog directive. If it fails to find a file by that name, it then
looks for an entry by that name in the database specified with the
FileDatabase catalog directive.

=head2 price

Summary

Parameters: B<code>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->price(
        {
         code => VALUE,
        }
    )

 OR

    $Tag->price($code, $ATTRHASH);

Attribute aliases

            base ==> mv_ib

Description

Arguments:

        code       Product code/SKU
        base       Only search in product table *base*
        quantity   Price for a quantity
        discount   If true(1), check discount coupons and apply
        noformat   If true(1), don't apply currency formatting

Expands into the price of the product identified by code as found in
the products database. If there is more than one products file
defined, they will be searched in order unless constrained by the
optional argument B<base>. The optional argument B<quantity> selects
an entry from the quantity price list. To receive a raw number, with
no currency formatting, use the option noformat=1.

Interchange maintains a price in its database for every product. The
price field is the one required field in the product database - it is
necessary to build the price routines.

For speed, Interchange builds the code that is used to determine a
product's price at catalog configuration time. If you choose to change
a directive that affects product pricing you must reconfigure the
catalog.

Quantity price breaks are configured by means of the I<CommonAdjust>
directive. There are a number of CommonAdjust recipes which can be
used; the standard example in the demo calls for a separate pricing
table called pricing. Observe the following:

   CommonAdjust  pricing:q2,q5,q10,q25, ;products:price, ==size:pricing

This says to check quantity and find the applicable column in the
pricing database and apply it. In this case, it would be:

    2-4      Column *q2*
    5-9      Column *q5*
    10-24    Column *q10*
    25 up    Column *q25*

What happens if quantity is one? It "falls back" to the price that is
in the table products, column price.

After that, if there is a size attribute for the product, the column
in the pricing database corresponding to that column is checked for
additions or subtractions (or even percentage changes).

If you use this tag in the demo:

    [price code=99-102 quantity=10 size=XL]

the price will be according to the q10 column, adjusted by what is
in the XL column. (The row is of course 99-102.) The following entry
in pricing:

  code    q2   q5   q10  q25  XL
  99-102  10   9    8    7    .50

Would yield 8.50 for the price. Quantity of 10 in the q10 column,
with 50 cents added for extra large (XL).

Following are several examples based on the above entry as well as
this the entry in the products table:

  code    description   price    size
  99-102  T-Shirt       10.00    S=Small, M=Medium, L=Large*, XL=Extra Large

NOTE: The examples below assume a US locale with 2 decimal places, use
of commas to separate, and a dollar sign ($) as the currency
formatting.

  TAG                                          DISPLAYS
  ----------------------------------------     --------
  [price 99-102]                               $10.00
  [price code="99-102"]                        $10.00
  [price code="99-102" quantity=1]             $10.00
  [price code="99-102" noformat=1]             10
  [price code="99-102" quantity=5]             $9.00
  [price code="99-102" quantity=5 size=XL]     $9.50
  [price code="99-102" size=XL]                $10.50
  [price code="99-102" size=XL noformat=1]     10.5

Product discounts for specific products, all products, or the entire
order can be configured with the [discount ...] tag. Discounts are
applied on a per-user basis - you can gate the discount based on
membership in a club or other arbitrary means.

Adding [discount 99-102] $s * .9[/discount] deducts 10% from the price
at checkout, but the price tag will not show that unless you add the
discount=1 parameter.

    [price code="99-102"]            -->   $10.00
    [price code="99-102" discount=1] -->   $9.00

See I<Product Discounts>.

=head2 process

Summary

Aliases for tag

process_target

Parameters: B<target secure>

ONLY THE B<> PARAMETERS ARE POSITIONAL.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->process(
        {
         target => VALUE,
         secure => VALUE,
        }
    )

 OR

    $Tag->process($target, $secure, $ATTRHASH);

Description

B<NO Description>

=head2 profile

Summary

Parameters: B<name>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->profile(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->profile($name, $ATTRHASH);

Description

B<NO Description>

=head2 query

Passes SQL statements through to SQL databases, or allows SQL queries
via Interchange's database abstraction into non-SQL databases and text
files. The latter use may require Jochen Wiedmann's I<SQL Statement>
module (included with Bundle::Interchange from CPAN).

Summary

    [query sql other_named_attributes]
    [query sql="SQL_query_text" other_named_attributes]

 Parameters   Description                               Default
 sql          The SQL statement.Passed directly through to an SQL database.For a non-SQL table, the tag interprets your SQL first. See Jochen Wiedmann's SQL Statement module for limitations and detail.none
 query        Alias for sql                             none

 Attributes                        Default
 table                             products
 base (alias for table)            products
 type (row_count, html, list, textref)none: uses arrayref="" if no type
 arrayref                          arrayref="" if no type given
 hashref                           none
 more (type=list)                  No
 xx form var. abbrev. (type=list)  see form variable
  (type=list)                      sql
 list_prefix (type=list)           list
 random (type=list)                No
 safe_data (type=list)             No
 label (type=list)                 current
 form (type=list)                  none
 wantarray                         No
 interpolate                       No
 reparse                           Yes

 Other_Charactreristics            
 Invalidates cache                 No
 Container tag                     Yes
 Has subtags                       Yes
 Nests                             No

B<Tag usage example:>

This will list sku, description and price for ten products per page,
followed by hyperlinks to the other pages of the list. Note that you
may interpolate interchange tags in the usual way if you double-quote
the SQL statement.

   [query sql="select sku, description, price from products where price < [value mv_arg]"
         type=list
         more=1
           ml=10]

      [on_match]Matched<br>[/on_match]
      [no_match]Not Found<br>[/no_match]

      [list]
        [sql-code] [sql-param description] [sql-price]
      [/list]

      [more_list]
        [more]
      [/more_list]
   [/query]

B<ASP-like Perl call:>

   my $sql = "select * from products order by price";
   my $result_array = $Tag->query( { sql => $sql,  },
                                   $body );
   my ($same_results, $col_name_hash, $col_name_array) =
                      $Tag->query( { sql => $sql,  },
                                   $body );

   my $result_hasharray = $Tag->query( { sql     => $sql,
                                         hashref => 'my_results',  },
                                       $body );

or similarly with positional parameters,

    $Tag->query( $sql, $attribute_hash_reference, $body);

Description

The query tag allows you to make SQL queries. If you are using an
SQL database table, the tag will pass your SQL statement directly to
the database and return the result.

If your table is not in an SQL database (for example, GDBM, text,
LDAP, and in-memory tables), Interchange will internally convert it to
an Interchange search specification with Jochen Wiedmann's I<SQL
Statement> module (included with Bundle::Interchange from CPAN). This
means that you can use simple SQL queries regardless of the underlying
database implementation.

I<Subtags>

For list queries (type=list), the following subtags are available:

 Subtag                            Usage
 on_match                           [on_match]   do this if something matched [/on_match]
 no_match                           [no_match]   do this if nothing matched [/no_match]
 list                               [list_prefix]   do this for each matched item [/list_prefix]The 'list' subtag defines a region where you can use any of the looping subtags that work in array-list context (see Looping tags and Sub-tags).The default looping tag prefix will be 'sql'. Note however that you can override this by setting the prefix attribute in the enclosing query tag.Similarly, the list_prefix attribute renames the [list] subtag itself to the value you set (see list_prefix below).
 more_list                          [more_list]   [more] [/more_list]The 'more_list' and 'more' subtags are used when paginating the query results (see 'more' attribute). The [more] subtag will expand to a list of links to the other pages of the query results.

See also the example at the end of the Summary section above.

Perl and ASP usage

If you are calling $Tag->query within a perl tag (or whenever the
code is secured by the Safe.pm module), you must be sure to set the
tables attribute properly in the enclosing perl tag (see the
perl tag documentation for detail).

The I<types> that return text to a page (i.e., row_count, html, and
textref) work as usual, returning an appropriate string. Note that you
may also have access to the results as an array reference in
$Vend::Interpolate::Tmp->{''} for the life of the page.

If you do not set a I<type>, or

If you call $Tag->query in scalar context and set I<arrayref> or
I<hashref>, it will return your results as a reference to an array of
either arrayrefs or hashrefs, respectively (i.e., the same data
structures you would get from Perl's DBI.pm module with
fetchall_arrayref).

In list context, the first returned element is the aforementioned
reference to your results. The second element is a hash reference to
your column names, and the third element is an an array reference to
the list of column names.

The following examples should be S<illustrative:>

  [perl tables=products]
    my $sql = "select sku, price, description from products
               where price < 10 order by price";

    my $results = $Tag->query( { sql => $sql, } );
    my ( $same_results, $col_name_hashref, $col_name_arrayref)
        = $Tag->query( { sql => $sql, } );

    my $hash_results = $Tag->query( {     sql => $sql,
                                      hashref => 'my_results' } );

    # $Vend::Interpolate::Tmp->{my_results} == $hash_results
    # $Vend::Interpolate::Tmp->{''} == $results == $same_results

    return $Tag->uneval( $results );
  [/perl]

See also 'I<wantarray>=1' if you use this call in a GlobalSub or
global UserTag.

I<sql>

This is the text of your SQL statement. The standard Interchange
quoting rules apply. For example, use double quotes (") if you want to
interpolate Interchange tags within your SQL statement, backticks (`)
to calculate a value, I<etc.>

   [query sql="select description, price from products
               where price < [value mv_arg]" ...]
      ...
   [/query]

I<table>

The table attribute sets the database to use for the query. The
default will typically be the database containing the 'products'
table (unless you have changed the first entry in
$Vend::Cfg->{ProductFiles}).

I<type>

If you are not setting the 'arrayref' or 'hashref' attributes,
then the type attribute defines the way the query will return its
results. The type should be one of the S<following:>

 Type                              Returns
 html                              The html type returns the results in an html table. You will need to supply the enclosing <TABLE ...> and </TABLE> html tags. The following is an example of typical usage: <TABLE>   [query sql="select * from products               where price > 12               order by price"         type=html]   [/query] </TABLE>
 list                              This allows you to use subtags to control the query output and pagination. See the Subtags section above for detail.
 row_count                         This causes the tag to return the number of rows in the query result.
 textref                           This causes the tag to return a the query results as a serialized array of arrays that Perl can evaluate with its eval() function. Here is an illustrative example:  my $rows = eval( $Tag->query( { sql  => "select * from products"                                  type => "textref" } )                 );  my $r3_c0 = $rows->[3]->[0];

If you do not specify a type, the tag will create an arrayref as if
you had set 'arrayref=""'.

I<arrayref and hashref>

If you set 'arrayref=I<keyname>' or 'hashref=I<keyname>', the
query will not ruturn results to the page. Instead, it will place the
results of your query in the $Vend::Interpolate::Tmp hash. Using
'arrayref=my_query' sets $Vend::Interpolate::Tmp->{my_query} to
refer to an array of array references, while 'hashref=my_query'
creates an array of hash references.

Note that this is useful only if you intend to access the results
within Perl code (for example, within a [perl] tag), since there is
no direct output to the returned page.

The $Vend::Interpolate::Tmp hash persists only for the life of the
template page being processed. If you need the query results array
reference to outlive the page, you will have to save the reference
somewhere more persistent such as the $Session S<hash:>

   $Session->{my_query} = $Vend::Interpolate::Tmp->{my_query};

Beware the impact on perfomance if you do this with large result sets.

Technical note - the string returned by the 'textref' type will
B<eval>() to the 'arrayref' data structure.

I<more>

Requires 'type=list'.

You must set more=1 to properly paginate your results from list
queries (see 'type=list' above. If you do not set more=1, then
the links to later pages will merely redisplay the first page of your
results.

I<form variable abbreviations>

Requires 'type=list'.

See the I<Search and Form Variables> appendix for a list of form
variables. Note that you must use the two-letter abbreviation rather
than the full form variable name.

A few deserve special S<mention:>

 Abbr                  Name                    Description
 ml                    mv_matchlimit           Sets number of rows to return. If paginating (more=1), sets rows returned per page.
 fm                    mv_first_match          Start displaying search at specified match
 sp                    mv_search_page          Sets the page for search display
 st                    mv_searchtype           Forces a specific search type (text, glimpse, db or sql), overriding the default determined from your database implementation.

I<>

Requires 'type=list'.

Setting 'prefix=foo' overrides the default prefix of 'sql' for loop
subtags within a list region (see I<Looping tags and Sub-tags>).

See the I<list_prefix> attribute below for an illustrative example.

I<list_prefix>

Requires 'type=list'.

Setting 'list_prefix=bar' overrides the default region tagname of
'list'. The best way to show this is by example. Compare the following
two examples of list queries, the first using the defaults and the
second with explicitly set prefix and list_prefix.

   [query sql="select sku, description, price from products
               where price < 20"
         type=list
         more=1
           ml=10]

      [on_match]Matched<br>[/on_match]
      [no_match]Not Found<br>[/no_match]

      [list]
        [sql-code] [sql-param description] [sql-price]
      [/list]

      [more_list]
        [more]
      [/more_list]
   [/query]

------------------------------------------------------------

   [query  sql="select sku, description, price from products
                where price < 20"
          type=list
        prefix=foo
   list_prefix=bar
          more=1
            ml=10]

      [on_match]Matched<br>[/on_match]
      [no_match]Not Found<br>[/no_match]

      [bar]
        [foo-code] [foo-param description] [foo-price]
      [/bar]

      [more_list]
        [more]
      [/more_list]
   [/query]

I<random>

Requires 'type=list'.

You can use the 'random' attribute to randomly select a set of rows
from the whole result set of your query. In other words, setting
'random=I<n>', where I<n> > 0, causes the [list] region to loop
over I<n> randomly chosen rows rather than the full query result set.

The example below would display three randomly chosen products priced
under 20.

   [query sql="select * from products
               where price < 20"
         type=list
       random=3]

      [list]
        [sql-code] [sql-param description] [sql-price]
      [/list]

   [/query]

I<safe_data>

Requires 'type=list'.

Note - you should not set this unless you need it and know what you
are doing.

Setting 'safe_data=1' allows the [sql-data] tag to return values
containing the '[' character. See also I<Looping tags and Sub-tags>.

Beware of reparsing issues.

I<label>

Requires 'type=list'.

If you are setting up multiple simultaneously active search objects
within a page, this allows you to distinguish them. The default label
is 'current'. Most people will not need this.

I<form>

Requires 'type=list'.

You can use this to pass one CGI form variable in the pagination links
of a [more-list]. For example, 'form="foo=bar"' to include
'&foo=bar' in the URL of each of the pagination links.

Note that the variable will not be available in the initial result set
since the query returns the first page directly (i.e., you did not
follow a pagination link).

I<wantarray>

This is relevant only when calling $Tag->query( ... ) within global
Perl code such as a globalsub or global usertag where $MVSAFE::Safe is
not defined. In these cases, setting 'wantarray=1' allows the call
to

  $Tag->query( { wantarray => 1, ... }, ... );

to return references as it would if called within an ordinary
[perl] tag. Note that it does not force list context if you call
$Tag->query in scalar context.

Technical note - the ordinary [query

=over 4

=over 8

=over 12

=item

] ... [/query] usage forces scalar context on the query call and
suppresses the return value for those types that would return
references if $Tag->query were called within a [perl] tag. The
wantarray option is needed because global subs and usertags are also
affected by this unless you set wantarray.

=back

=back

=back

=head2 read_cookie

Returns the value of the named cookie. Returns nothing if the cookie
does not exist.

Summary

    [read_cookie name]
    [read_cookie name=mycookie]

 Attributes   Description                               Default
 name         The name of the cookie whose value you wantnone

 Attributes                        Default
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 Yes
 Container tag                     No

B<Usage example:>

   [read-cookie name=MV_SESSION_ID]
------------------------------------------------------
   6CZ2whqo

B<ASP-like Perl call:>

    $Tag->read_cookie(  { name => $name, }  );

or similarly with positional parameters,

    $Tag->read_cookie( $name );

Description

This tag expands to the value of the named cookie (or nothing if the
cookie does not exist).

See the Netscape specification at
I<http://www.netscape.com/newsref/std/cookie_spec.html> if you need
more cookie-specific detail.

I<name>

This is the name of the cookie whose value you want to retrieve.

I<Parsing an HTTP_COOKIE string>

If you pass this tag a second parameter within a Perl call, it will
use your value as the HTTP_COOKIE string (ignoring the real one). This
only applies if you pass the values positionally within a perl call
since there is no name for the HTTP_COOKIE string S<input:>

  $Tag->read_cookie('MV_SESSION_ID', "MV_SESSION_ID=UnHyaDQj:127.0.0.1; ...");

=head2 record

Summary

No parameters.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->record(
        {
        }
    )

 OR

    $Tag->record($ATTRHASH);

Attribute aliases

            code ==> key
            column ==> col
            field ==> col

Description

B<NO Description>

=head2 row

Summary

Parameters: B<width>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Interpolates B<container text> by default>.

This is a container tag, i.e. [row] FOO [/row]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->row(
        {
         width => VALUE,
        },
        BODY
    )

 OR

    $Tag->row($width, $BODY);

Description

Formats text in tables. Intended for use in emailed reports or
<PRE></PRE> HTML areas. The parameter I<nn> gives the number of
columns to use. Inside the row tag, [col param=value ...] tags may be
used.

[col width=nn wrap=yes|no gutter=n align=left|right|input spacing=n]

Sets up a column for use in a [row]. This parameter can only be
contained inside a [row nn] [/row] tag pair. Any number of columns
(that fit within the size of the row) can be defined.

The parameters are:

    width=nn        The column width, I<including the gutter>. Must be
                    supplied, there is no default. A shorthand method
                    is to just supply the number as the I<first> parameter,
                    as in [col 20].

    gutter=n        The number of spaces used to separate the column (on
                    the right-hand side) from the next. Default is 2.

    spacing=n       The line spacing used for wrapped text. Default is 1,
                    or single-spaced.

    wrap=(yes|no)   Determines whether text that is greater in length than
                    the column width will be wrapped to the next line. Default
                    is I<yes>.

    align=(L|R|I)   Determines whether text is aligned to the left (the default),
                    the right, or in a way that might display an HTML text
                    input field correctly.

[/col]

Terminates the column field.

=head2 salestax

Summary

Parameters: B<name noformat>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->salestax(
        {
         name => VALUE,
         noformat => VALUE,
        }
    )

 OR

    $Tag->salestax($name, $noformat);

Attribute aliases

            cart ==> name

Description

Expands into the sales tax on the subtotal of all the items ordered so
far for the cart, default cart is main. If there is no key field to
derive the proper percentage, such as state or zip code, it is set to
0. If the noformat tag is present and non-zero, the raw number with no
currency formatting will be given.

=head2 scratch

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->scratch(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->scratch($name);

Description

Returns the contents of a scratch variable to the page. (A scratch
variable is set with a [set] value [/set] container pair.)

=head2 scratchd

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->scratchd(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->scratchd($name);

Description

B<NO Description>

=head2 search_list

Formats results returned by a search. Must be enclosed within a
search_region. Has sub-tags (see Looping tags and Sub-tags).

=head2 search_region

Summary

Parameters: B<arg>

ONLY THE B<> PARAMETERS ARE POSITIONAL.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [search_region] FOO [/search_region].
Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->search_region(
        {
         arg => VALUE,
        },
        BODY
    )

 OR

    $Tag->search_region($arg, $ATTRHASH, $BODY);

Attribute aliases

            args ==> arg
            params ==> arg
            search ==> arg

Description

B<NO Description>

=head2 selected

Summary

Parameters: B<name value>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->selected(
        {
         name => VALUE,
         value => VALUE,
        }
    )

 OR

    $Tag->selected($name, $value, $ATTRHASH);

Description

You can provide a "memory" for drop-down menus, radio buttons, and
checkboxes with the [checked] and [selected] tags.

This will output SELECTED if the variable var_name is equal to
value. If the optional MULTIPLE argument is present, it will look
for any of a variety of values. Not case sensitive unless the optional
case=1 parameter is used.

Here is a drop-down menu that remembers an item-modifier color
selection:

    <SELECT NAME="color">
    <OPTION [selected color blue]> Blue
    <OPTION [selected color green]> Green
    <OPTION [selected color red]> Red
    </SELECT>

Here is the same thing, but for a shopping-basket color selection

    <SELECT NAME="[modifier-name color]">
    <OPTION [selected [modifier-name color] blue]> Blue
    <OPTION [selected [modifier-name color] green]> Green
    <OPTION [selected [modifier-name color] red]> Red
    </SELECT>

By default, the Values space (i.e. [value foo]) is checked - if you
want to use the volatile CGI space (i.e. [cgi foo]) use the option
cgi=1.

=head2 set

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [set] FOO [/set]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->set(
        {
         name => VALUE,
        },
        BODY
    )

 OR

    $Tag->set($name, $BODY);

Description

Sets a scratch variable to I<value>.

Most of the mv_* variables that are used for search and order
conditionals are in another namespace - they can be set by means of
hidden fields in a form.

You can set an order profile with:

  [set checkout]
  name=required
  address=required
  [/set]
  <INPUT TYPE=hidden NAME=mv_order_profile VALUE="checkout">

A search profile would be set with:

  [set substring_case]
  mv_substring_match=yes
  mv_case=yes
  [/set]
  <INPUT TYPE=hidden NAME=mv_profile VALUE="substring_case">

Any of these profile values can be set in the OrderProfile files as
well.

=head2 set_cookie

Sets browser cookie(s) with the specified attributes.

Summary

    [set_cookie named_attributes]

Parameters must be named (no positional usage except in Perl call)

 Attributes   Description                               Default
 name         The name you give the cookie              none
 value        The value (automatically html-escaped by Interchange)none
 expire       Expiration date as"Wdy, DD-Mon-YYYY HH:MM:SS GMT"none
 domain       Overrides the domain(s) set in CookieDomainDomain(s), if any, defined in the CookieDomain directive
 path         legal URL paths for the cookie            URL path(s) to your catalog, including aliases

 Other_Charactreristics            
 Invalidates cache                 Yes
 Container tag                     No

B<Usage example:>

   [set-cookie name=mycookie
              value="the value"
             expire="Tue, 03-Apr-2001 17:00:00 GMT" ]
------------------------------------------------------
   This tag returns no value in the page

B<ASP-like Perl call:>

    $Tag->set_cookie(  { name   => $name,
                         value  => $value,
                         expire => $expire,
                         domain => $domain,
                         path   => $path, }  );

or similarly with positional parameters,

    $Tag->set_cookie( $name, $value, $expire, $domain, $path );

Description

This tag sets one or more browser cookies with your specified name,
value, and expiration. (Interchange will set more than one cookie if
needed to ensure that the cookie is visible from all Catalog URL
path aliases and CookieDomains.)

See the Netscape specification at
I<http://www.netscape.com/newsref/std/cookie_spec.html> for more
cookie-specific detail.

If you need access to the cookie from outside of your Interchange
catalog, you can also set the domain and URL paths for which the
cookie will be valid. If you need the cookie only within your catalog
and the domains specified by the CookieDomain directive, you
probably should not override the Interchange domain and path defaults.

I<name>

This is the name of the cookie. This is the key you will use when
reading the cookie later.

I<value>

This is the value to store in the cookie.

I<expire>

Persistent cookies (that outlive a browser session) require an
expiration date. The date must be a string of the S<form:>

=over 4

=item

"Wdy, DD-Mon-YYYY HH:MM:SS GMT"

=back

and the timezone must be GMT.

If you do not supply a date, the cookie will disappear when the user
closes the browser.

I<domain>

The value you set will override the Interchange default domain(s). You
might set this if you need access to the cookie from outside the
Interchange catalog, but it is usually better to set the
CookieDomain directive in your catalog.

The default is to use your catalog's domain or all CookieDomain
values.

I<path>

The value you set will override the Interchange default URL path(s).

The default is to set a cookie with a path for each catalog alias (see
the Catalog directive). This ensures that the cookie will be
visible regardless of how the end user returns to your catalog.

=head2 seti

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Interpolates B<container text> by default>.

This is a container tag, i.e. [seti] FOO [/seti]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->seti(
        {
         name => VALUE,
        },
        BODY
    )

 OR

    $Tag->seti($name, $BODY);

Description

Equivalent to the [set] tag, except that it I<interpolates> by
default.

=head2 setlocale

Summary

Parameters: B<locale currency>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->setlocale(
        {
         locale => VALUE,
         currency => VALUE,
        }
    )

 OR

    $Tag->setlocale($locale, $currency, $ATTRHASH);

Description

B<NO Description>

=head2 shipping

Summary

Parameters: B<mode>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->shipping(
        {
         mode => VALUE,
        }
    )

 OR

    $Tag->shipping($mode, $ATTRHASH);

Attribute aliases

            carts ==> cart
            modes ==> mode
            name ==> mode
            tables ==> table

Description

The shipping cost of the items in the basket via mode - the default
mode is the shipping mode currently selected in the mv_shipmode
variable. See I<SHIPPING>.

Rounding

The tag rounds the calculated shipping cost to a locale-specific
number of fractional digits (e.g., to the nearest penny, or 2 digits
after the decimal point in the USA).

=head2 shipping_desc

Summary

Aliases for tag

shipping_description

Parameters: B<mode>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->shipping_desc(
        {
         mode => VALUE,
        }
    )

 OR

    $Tag->shipping_desc($mode);

Description

B<NO Description>

=head2 soap

Summary

Parameters: B<call uri proxy>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->soap(
        {
         call => VALUE,
         uri => VALUE,
         proxy => VALUE,
        }
    )

 OR

    $Tag->soap($call, $uri, $proxy, $ATTRHASH);

Description

B<NO Description>

=head2 strip

Summary

No parameters.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [strip] FOO [/strip]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->strip(
        {
        },
        BODY
    )

 OR

    $Tag->strip($BODY);

Description

B<NO Description>

=head2 subtotal

Summary

Parameters: B<name noformat>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->subtotal(
        {
         name => VALUE,
         noformat => VALUE,
        }
    )

 OR

    $Tag->subtotal($name, $noformat);

Attribute aliases

            cart ==> name

Description

Positional: [subtotal cart* noformat*]

mandatory: NONE

optional: cart noformat

Expands into the subtotal cost, exclusive of sales tax, of all the
items ordered so far for the optional cart. If the noformat tag is
present and non-zero, the raw number with no currency formatting will
be given.

=head2 tag

Summary

Parameters: B<op arg>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [tag] FOO [/tag]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->tag(
        {
         op => VALUE,
         arg => VALUE,
        },
        BODY
    )

 OR

    $Tag->tag($op, $arg, $ATTRHASH, $BODY);

Attribute aliases

            description ==> arg

Description

Performs any of a number of operations, based on the presence of
arg. The arguments that may be given are:

I<export database file* type*>

Exports a complete Interchange database to its text source file (or
any specified file). The integer n, if specified, will select
export in one of the enumerated Interchange export formats. The
following tag will export the products database to products.txt (or
whatever you have defined its source file as), in the format specified
by the I<Database> directive:

    [tag export products][/tag]

Same thing, except to the file products/new_products.txt:

    [tag export products products/newproducts.txt][/tag]

Same thing, except the export is done with a PIPE delimiter:

    [tag export products products/newproducts.txt 5][/tag]

The file is relative to the catalog directory, and only may be an
absolute path name if I<NoAbsolute> is set to No.

I<flag arg>

Sets an Interchange condition.

The following enables writes on the products and sizes databases
held in Interchange internal DBM format:

    [tag flag write]products sizes[/tag]

SQL databases are always writable if allowed by the SQL database
itself - in-memory databases will never be written.

The [tag flag build][/tag] combination forces static build of a page,
even if dynamic elements are contained. Similarly, the [tag flag
cache][/tag] forces search or page caching (not usually wise).

I<log dir/file>

Logs a message to a file, fully interpolated for Interchange tags. The
following tag will send every item code and description in the user's
shopping cart to the file logs/transactions.txt:

    [tag log logs/transactions.txt]
    [item_list][item-code]  [item-description]
    [/item_list][/tag]

The file is relative to the catalog directory, and only may be an
absolute path name if I<NoAbsolute> is set to No.

I<mime description_string>

Returns a MIME-encapsulated message with the boundary as employed in
the other mime tags, and the description_string used as the
Content-Description. For example

   [tag mime My Plain Text]Your message here.[/tag]

will return

  Content-Type: TEXT/PLAIN; CHARSET=US-ASCII
  Content-ID: [sequential, lead as in mime boundary]
  Content-Description: My Plain Text

  Your message here.

When used in concert with [tag mime boundary], [tag mime header], and
[tag mime id], allows MIME attachments to be included - typically with
PGP-encrypted credit card numbers. See the demo page ord/report.html
for an example.

I<mime boundary>

Returns a MIME message boundary with unique string keyed on session
ID, page count, and time.

I<mime header>

Returns a MIME message header with the proper boundary for that
session ID, page count, and time.

I<mime id>

Returns a MIME message id with the proper boundary for that session
ID, page count, and time.

I<show_tags>

The encased text will not be substituted for with Interchange tags,
with < and [ characters changed to &#lt; and &#91; respectively.

    [tag show_tags][value whatever][/tag]

I<time>

Formats the current time according to POSIX strftime arguments. The
following is the string for Thursday, April 30, 1997.

    [tag time]%A, %B %d, %Y[/tag]

I<touch >

Touches a database to allow use of the tag_data() routine in
user-defined subroutines. If this is not done, the routine will error
out if the database has not previously been accessed on the page.

    [tag touch products][/tag]

=head2 time

Summary

Parameters: B<locale>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [time] FOO [/time]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->time(
        {
         locale => VALUE,
        },
        BODY
    )

 OR

    $Tag->time($locale, $ATTRHASH, $BODY);

Description

Formats the current time according to POSIX strftime arguments. The
following is the string for Monday, January 1, 2001.

    [time]%A, %B %d, %Y[/tag]

See the strftime man page for information on the arguments (which
are the same as modern UNIX date commands).

Accepts the following options:

I<adjust>

If you wish to temporarily adjust the time for display purposes, you
can pass an adjust parameter with the number of hours (plus or
minus) from the local time or from GMT:

        [time]%c[/time]
        [time adjust="-3"]%c[/time]

Will display:

 Mon 01 Jan 2001 11:29:03 AM EST
 Mon 01 Jan 2001 08:29:03 AM EST

Note that the time zone does not change - you should either pick a
format which doesn't display zone, use the tz parameter, or manage
it yourself.

NOTE: You can adjust time globally for an Interchange installation by
setting the $ENV{TZ} variable on many systems. Set TZ in your
environment and then restart interchange:

        ## bash/ksh/sh
        TZ=PST7PDT; export TZ
        interchange -restart

        ## csh/tcsh
        setenv TZ PST7PDT
        interchange -restart

On most modern UNIX systems, all times will now be in the PST zone.

I<gmt>

If you want to display time as GMT, use the gmt parameter:

        [time]%c[/time]
        [time gmt=1]%c[/time]

will display:

        Mon 01 Jan 2001 11:33:26 AM EST
        Mon 01 Jan 2001 04:33:26 PM EST

Once again, the zone will not be set to GMT, so you should pick a
format string which doesn't use zone, use the tz parameter, or
manage it yourself.

I<locale>

Format the time according to the named locale, assuming that locale
is available on your operating system. For example, the following:

        [time locale=en_US]%B %d, %Y[/time]
        [time locale=fr_FR]%B %d, %Y[/time]

should display:

        January 01, 2001
        janvier 01, 2001

I<tz>

Use the passed tz to display the time. Will adjust for hours
difference.

Example:

        [time tz=GMT0]
        [time tz=CST6CDT]
        [time tz=PST8PDT]

will display:

        Mon 01 Jan 2001 04:43:02 PM GMT
        Mon 01 Jan 2001 10:43:02 AM CST
        Mon 01 Jan 2001 08:43:02 AM PST

Note that the first alphabetical string is the zone name when not
under daylight savings time, the digit is the number of hours
displacement from GMT, and the second alphabetical string is the zone
name when in daylight savings time. NOTE: This may not work on all
operating systems.

=head2 timed_build

Summary

Parameters: B<file>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [timed_build] FOO [/timed_build].
Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->timed_build(
        {
         file => VALUE,
        },
        BODY
    )

 OR

    $Tag->timed_build($file, $ATTRHASH, $BODY);

Description

Allows you to build CPU-intensive regions of ITL tags on a timed
basis.

In the simplest case, surround a region of ITL with [timed-build]
and [/timed-build]:

        [timed-build]
                Built at [time]%c[/time].
        [/timed-build]

If a file parameter is not passed, saves to the directory I<timed>
in catalog root, with the file name of the current page. If the
minutes parameter is not passed specifying how often the page
should be rebuilt, then it will not be rebuilt until the output file
is removed.

Accepts the following parameters:

I<file>

Name of the file to save the results in. Relative to catalog root. The
directory must exist.

I<if>

Allows you to to only display the cached region when the if
paremeter is true. For example, you can do:

        [timed-build if="[value timed]"]
        ITL tags....
        [/timed-build]

The cached region will only be displayed if the variable timed is
set to a non-zero, non-blank value. Otherwise, the ITL tags will be
re-interpreted every time.

I<minutes>

The number of minutes after which the timed build should be repeated.
If set to 0, it will be built once and then not rebuilt until the
output file is removed.

I<period>

Alternative way of expressing time. You can pass a string describing
the rebuild time period:

        [timed-build period="4 hours"]
        ITL tags....
        [/timed-build]

This is really the same as minutes=240. Useful for passing seconds:

        [timed-build period="5 seconds"]
        ITL tags....
        [/timed-build]

The region will be rebuilt every 5 seconds.

Performance S<Tip:> use minutes of .08 instead; avoids having to parse
the period string.

If you have the StaticDir catalog.cfg parameter set to a writable
path, you can build a cached static version of your catalog over time.
Simply place a [timed-build] tag at the top of pages you wish to build
statically. Assuming the catalog is not busy and write lock can be
obtained, the StaticDBM database will be updated to mark the page as
static and the next time a link is made for that page the static
version will be presented.

=head2 tmp

Summary

Parameters: B<name>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Interpolates B<container text> by default>.

This is a container tag, i.e. [tmp] FOO [/tmp]. Nesting: NO

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->tmp(
        {
         name => VALUE,
        },
        BODY
    )

 OR

    $Tag->tmp($name, $BODY);

Description

Sets a scratch variable to I<value>, but at the end of the user
session the Scratch key is deleted. This saves session write time in
many cases.

This tag interpolates automatically. (Interpolation can be turned off
with interpolate=0.)

IMPORTANT NOTE: the [tmp ...][/tmp] tag is not appropriate for setting
order profiles or mv_click actions. If you want to avoid that, use
a profile stored via the catalog.cfg directive OrderProfile.

=head2 total_cost

Summary

Parameters: B<name noformat>

Positional parameters in same order.

Pass attribute hash as last to subroutine: B<no>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->total_cost(
        {
         name => VALUE,
         noformat => VALUE,
        }
    )

 OR

    $Tag->total_cost($name, $noformat);

Attribute aliases

            cart ==> name

Description

Expands into the total cost of all the items in the current shopping
cart, including sales tax (if any).

=head2 tree

Summary

Parameters: B<table master subordinate start>

ONLY THE B<> PARAMETERS ARE POSITIONAL.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [tree] FOO [/tree]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->tree(
        {
         table => VALUE,
         master => VALUE,
         subordinate => VALUE,
         start => VALUE,
        },
        BODY
    )

 OR

    $Tag->tree($table, $master, $subordinate, $start, $ATTRHASH, $BODY);

Attribute aliases

            sub ==> subordinate

Description

Provides iterative list capability for binary trees. It produces
hash-based rows use the same tags as [item-list]; sets some
additional hash key entries to describe the tree and provide display
control.

Works on a data set with the structure:

    parent  child
    99      a
    a       b
    a       c
    a       d
    a       x
    x       y
    x       z
    99      m
    99      n
    99      o
    o       e
    o       f
    o       g

Sets several keys which assist in walking and displaying the tree.

I<mv_level>

Level of the item. If it is in the first level, it is 0. Sublevels are
infinite (except for performance).

I<mv_increment>

Increment label for the item. Normally goes from 1...n, but can be
changed to A...Z or a...z in outline mode.

I<mv_children>

If in autodetect mode, set to the number of children this branch has.
If a leaf, set to 0.

I<mv_spacing>

A multiple of level times the spacing option. Useful for setting width
of spacer images.

The above sample data would produce:

    a           mv_level=0, mv_increment=1, mv_children=4
        b       mv_level=1, mv_increment=1, mv_children=0
        c       mv_level=1, mv_increment=2, mv_children=0
        d       mv_level=1, mv_increment=3, mv_children=0
        x       mv_level=1, mv_increment=4, mv_children=2
            y   mv_level=2, mv_increment=1, mv_children=0
            z   mv_level=2, mv_increment=2, mv_children=0
    m           mv_level=0, mv_increment=1, mv_children=0
    n           mv_level=0, mv_increment=2, mv_children=0
    o           mv_level=0, mv_increment=3, mv_children=3
        e       mv_level=1, mv_increment=1, mv_children=0
        f       mv_level=1, mv_increment=2, mv_children=0
        g       mv_level=1, mv_increment=3, mv_children=0

from the tag call:

        <table>
    [tree   start=99
            parent=parent_fld
            child=child_fld
            autodetect=1
                        spacing=4
            full=1]
        <tr>
        <td>
        [if-item-param mv_level]
                [item-calc]
                        return '&nbsp' x [item-param mv_spacing];
                [/item-calc]
        [/if-item-param]
        [item-param child_fld]
        </td>
        <td>
                mv_level=[item-param mv_level],
                mv_increment=[item-param mv_increment],
                mv_children=[item-param mv_children]
        </td>
        </tr>
        [/tree]
        </table>

Accepts the following paremeters:

I<table>

Database table which contains the tree. Must be a valid Interchange
table identifier.

I<parent>

The column which is used to determine the parent of the item.

I<subordinate>

The child column, which determines which items are sub-items of the
current one. Used to re-query for items with its value in parent.

I<start_item>

The first item to be followed, i.e. the parent value of all the
top-level items.

I<autodetect>

Specifies that the next level should be followed to detect the number
of child items contained. Not recursive; only follows far enough to
determine the children of the current item.

I<full>

Specifies that all items should be followed. Essentially the same as
specifying memo and passing the explode variable, but not
dependent on them. Useful for building lists for inclusion in embedded
Perl, among other things.

I<stop>

An optional stop field which, when the value is true, can stop the
following of the branch.

I<continue>

An optional continue field which, when the value is true, can force
the branch to be followed.

I<sort>

The column which should be used for ordering the items - determines
the order in which they will be displayed under the current parent.

I<outline>

Sets outline mode, where mv_increment will be displayed with letter
values or numeral values. If set to specifically 1, will produced
outline increments like:

    1
        A
        B
            1
            2
        C
            1
            2
                a
                b
                    1
                    2
                        a
                        b
    2

I<memo>

Indicates that the collapse/explode/toggle features are to be used,
and names a Scratch variable where the values should be stored.

I<collapse>

The name of a variable in the user's session which will determine that
the tree should be "collapsed". When collapsed, the child items will
not be followed unless they are set to be followed with toggle.
Zeros all toggles.

Requires memo to be set if values are to be retained.

I<toggle>

The name of a variable in the user's session which will determine that
the current item should be either followed or not followed. The first
time the toggle variable corresponding to its primary key is
passed, the item will be expanded. The next call will "collapse" the
item.

Requires memo to be set if values are to be retained.

I<explode>

The name of a variable in the user's session which will determine that
the tree should be "exploded". When exploded, all child items are
followed and the full tree can be displayed.

Requires memo to be set if values are to be retained.

I<pedantic>

When set to a true value, and an endless tree is detected (i.e. the
child branch contains a parent) then the error will be logged to the
catalog error log and the tree call will return with an error.

If pedantic is not set (the default), the current leaf will be
shown but never followed. This allows partial display of the tree.

I<log_error>

When set to a true value, and an endless tree is detected (i.e. the
child branch contains a parent) then the error will be logged to the
catalog error log. No logging done by default.

I<show_error>

When set to a true value, and an endless tree is detected (i.e. the
child branch contains a parent) then the error will be returned in the
page. Errors are NOT shown by default.

In addition to the above values, all valid options for a list tag are
in force. For example, you can set a "SELECTED" value on an option
list with option=1, set the tag prefix with prefix, etc.

=head2 try

See catch for description.

Summary

Parameters: B<label>

Positional parameters in same order.

B<The attribute hash reference is passed> after the parameters but
before the container text argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

This is a container tag, i.e. [try] FOO [/try]. Nesting: NO

Invalidates cache: B<no>

Called Routine:

B<ASP-like Perl call:>

    $Tag->try(
        {
         label => VALUE,
        },
        BODY
    )

 OR

    $Tag->try($label, $ATTRHASH, $BODY);

Description

B<NO Description>

=head2 update

Summary

Parameters: B<function>

ONLY THE B<> PARAMETERS ARE POSITIONAL.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->update(
        {
         function => VALUE,
        }
    )

 OR

    $Tag->update($function, $ATTRHASH);

Description

B<NO Description>

=head2 userdb

Summary

Parameters: B<function>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->userdb(
        {
         function => VALUE,
        }
    )

 OR

    $Tag->userdb($function, $ATTRHASH);

Attribute aliases

            name ==> nickname
            table ==> db

Description

Interchange provides a [userdb ...] tag to access the UserDB
functions.

 [userdb
        function=function_name
        username="username"*
        password="password"*
        verify="password"*
        oldpass="old password"*
        shipping="fields for shipping save"
        billing="fields for billing save"
        preferences="fields for preferences save"
        force_lower=1
        param1=value*
        param2=value*
        ...
        ]

* Optional

It is normally called in an mv_click or mv_check setting, as in:

    [set Login]
    mv_todo=return
    mv_nextpage=welcome
    [userdb function=login]
    [/set]

    <FORM ACTION="[process-target]" METHOD=POST>
    <INPUT TYPE=hidden NAME=mv_click VALUE=Login>
    Username <INPUT NAME=mv_username SIZE=10>
    Password <INPUT NAME=mv_password SIZE=10>
    </FORM>

There are several global parameters that apply to any use of the
userdb functions. Most importantly, by default the database table
is set to be I<userdb>. If you must use another table name, then you
should include a database=table parameter with any call to
userdb. The global parameters (default in parens):

    database     Sets user database table (userdb)
    show         Show the return value of certain functions
                 or the error message, if any (0)
    force_lower  Force possibly upper-case database fields
                 to lower case session variable names (0)
    billing      Set the billing fields (see Accounts)
    shipping     Set the shipping fields (see Address Book)
    preferences  Set the preferences fields (see Preferences)
    bill_field   Set field name for accounts (accounts)
    addr_field   Set field name for address book (address_book)
    pref_field   Set field name for preferences (preferences)
    cart_field   Set field name for cart storage (carts)
    pass_field   Set field name for password (password)
    time_field   Set field for storing last login time (time)
    expire_field Set field for expiration date (expire_date)
    acl          Set field for simple access control storage (acl)
    file_acl     Set field for file access control storage (file_acl)
    db_acl       Set field for database access control storage (db_acl)

=head2 value

Returns the the current value of the named form input field.
HTML-escapes interchange tags in the result for security.

Can also set a new value within the current page.

Summary

    [value name other_named_attributes]
    [value name=form_var_name other_named_attributes]

 Parameters   Description                               Default
 name         This is the name of the form variable whose value you want.None

 Attributes                        Default
 set                               none
 hide                              No
 filter                            none
 keep (with filter)                No
 scratch                           No
 default                           none
 interpolate (reparse)             No

 Other_Charactreristics            
 Invalidates cache                 Yes

B<Tag expansion example:>

Assuming form variable 'foo' = 'bar',

   [value foo]
---
   bar

B<ASP-like Perl call:>

    $Tag->value(  { name => var_name, }  );

    # or if you simply want the value,
    $::Values->{var_name};

or similarly with positional parameters,

    $Tag->value($name$, $attribute_hash_reference);

Description

HTML examples:

   <PARAM MV="value name">
   <INPUT TYPE="text" NAME="name" VALUE="[value name]">

Expands into the current value of the named customer/form input
field. When the value is returned, any Interchange tags present in the
value will be escaped. This prevents users from entering Interchange
tags in form values, which would be a serious security risk.

I<name>

This is the name of the form variable whose value you want.

I<set>

You can change a value with 'set=I<new_value>'. The tag will return
the value you set unless you also set the I<hide>=1 attribute.

Use this to "uncheck" a checkbox or set other form variable values to
defaults. If you simply want a place to store your own data, use the
set and scratch tags instead.

Note that this is only available in new-style tags, for safety
reasons.

I<hide>

Setting hide=1 suppresses the tag's return value, which can be
useful with the setset attribute.

I<filter>

See the filter tag for a list of filters.

Setting 'filter="I<filter>"' modifies the named value with the
specified filter.

I<keep> (with filter)

Set keep=1 if you want the tag to return a filtered result but do
not want the filter to modify the form value itself in the $::Values
hash.

I<scratch>

Setting 'scratch=1' places a copy of the value in the $::Scratch
hash. An illustrative S<example:>

   foo is [value name=foo scratch=1] in the Values hash
   foo is now also [scratch foo] in the Scratch hash

I<default>

This sets a return value in case the named value is missing or
otherwise false. The following will expand to S<"Using default":>

   [value name=myname set=0 hide=1]
   [value myname default="Using default"]

=head2 value_extended

Summary

Parameters: B<name>

Positional parameters in same order.

B<The attribute hash reference is passed> to the subroutine after the
parameters as the last argument. B<This may mean that there are
parameters not shown here.>

Must pass named parameter interpolate=1 to cause interpolation.

Invalidates cache: B<YES>

Called Routine:

B<ASP-like Perl call:>

    $Tag->value_extended(
        {
         name => VALUE,
        }
    )

 OR

    $Tag->value_extended($name, $ATTRHASH);

Description

Named call example:

   [value-extended
            name=formfield
            outfile=filename*
            ascii=1*
            yes="Yes"*
            no="No"*
            joiner="char|string"*
            test="isfile|length|defined"*
            index="N|N..N|*"
            file_contents=1*
            elements=1*]

Expands into the current value of the customer/form input field named
by field. If there are multiple elements of that variable, it will
return the value at index; by default all joined together with a
space.

If the variable is a file variable coming from a multipart/form-data
file upload, then the contents of that upload can be returned to the
page or optionally written to the outfile.

I<name>

The form variable NAME. If no other parameters are present, then the
value of the variable will be returned. If there are multiple
elements, then by default they will all be returned joined by a space.
If joiner is present, then they will be joined by its value.

In the special case of a file upload, the value returned is the name
of the file as passed for upload.

I<joiner>

The character or string that will join the elements of the array. Will
accept string literals such as "\n" or "\r".

I<test>

Three tests - isfile returns true if the variable is a file upload.
length returns the length. defined returns whether the value has
ever been set at all on a form.

I<index>

The index of the element to return if not all are wanted. This is
useful especially for pre-setting multiple search variables. If set to
*, will return all (joined by joiner). If a range, such as 0
.. 2, will return multiple elements.

I<file_contents>

Returns the contents of a file upload if set to a non-blank, non-zero
value. If the variable is not a file, returns nothing.

I<outfile>

Names a file to write the contents of a file upload to. It will not
accept an absolute file name; the name must be relative to the catalog
directory. If you wish to write images or other files that would go to
HTML space, you must use the HTTP server's Alias facilities or make
a symbolic link.

I<ascii>

To do an auto-ASCII translation before writing the outfile, set the
ascii parameter to a non-blank, non-zero value. Default is no
translation.

I<yes>

The value that will be returned if a test is true or a file is written
successfully. Defaults to 1 for tests and the empty string for
uploads.

I<no>

The value that will be returned if a test is false or a file write
fails. Defaults to the empty string.

=head1 User-defined Tags

To define a tag that is catalog-specific, place I<UserTag> directives
in your catalog.cfg file. For server-wide tags, define them in
interchange.cfg. Catalog-specific tags take precedence if both are
defined - in fact, you can override the base Interchange tag set with
them. The directive takes the form:

   UserTag  tagname  property  value

where tagname is the name of the tag, property is the attribute
(described below), and value is the value of the property for that
tagname.

The user tags can either be based on Perl subroutines or just be
aliases for existing tags. Some quick examples are below.

An alias:

    UserTag product_name Alias     data products title

This will change [product_name 99-102] into [data products title
99-102], which will output the title database field for product
code 99-102. Don't use this with [item-data ...] and
[item-field ...], as they are parsed separately. You can do
[product-name [item-code]], though.

A simple subroutine:

    UserTag company_name Routine   sub { "Your company name" }

When you place a [company-name] tag in an Interchange page, the text
Your company name will be substituted.

A subroutine with a passed text as an argument:

    UserTag caps   Routine   sub { return "\U@_" }
    UserTag caps   HasEndTag

The tag [caps]This text should be all upper case[/caps] will become
THIS TEXT SHOULD BE ALL UPPER CASE.

Here is a useful one you might wish to use:

    UserTag quick_table HasEndTag
    UserTag quick_table Interpolate
    UserTag quick_table Order   border
    UserTag quick_table Routine <<EOF
    sub {
        my ($border,$input) = @_;
        $border = " BORDER=$border" if $border;
        my $out = "<TABLE ALIGN=LEFT$border>";
        my @rows = split /\n+/, $input;
        my ($left, $right);
        for(@rows) {
            $out .= '<TR><TD ALIGN=RIGHT VALIGN=TOP>';
            ($left, $right) = split /\s*:\s*/, $_, 2;
            $out .= '<B>' unless $left =~ /</;
            $out .= $left;
            $out .= '</B>' unless $left =~ /</;
            $out .= '</TD><TD VALIGN=TOP>';
            $out .= $right;
            $out .= '</TD></TR>';
            $out .= "\n";
        }
        $out .= '</TABLE>';
    }
    EOF

Called with:

    [quick-table border=2]
    Name: [value name]
    City: [value city][if value state], [value state][/if] [value country]
    [/quick_table]

As is the case with [perl] tag, user tags run under the Perl
Safe.pm module with warnings disabled. Unlike [perl] tags, however,
user tags use Perl's 'strict' pragma.

The properties for UserTag are:

=head2 Alias

An alias for an existing (or other user-defined) tag. It takes the
form:

    UserTag tagname Alias    tag to insert

An Alias is the only property that does not require a I<Routine> to
process the tag.

=head2 attrAlias

An alias for an existing attribute for defined tag. It takes the form:

    UserTag tagname attrAlias   alias attr

As an example, the standard Interchange value tag takes a named
attribute of name for the variable name, meaning that [value
name=var] will display the value of form field var. If you put this
line in catalog.cfg:

    UserTag value attrAlias   identifier name

then [value identifier=var] will be an equivalent tag.

=head2 CanNest

Notifies Interchange that this tag must be checked for nesting. Only
applies to tags that have I<HasEndTag> defined, of course. NOTE: Your
routine must handle the subtleties of nesting, so don't use this
unless you are quite conversant with parsing routines. See the
routines tag_loop_list and tag_if in lib/Vend/Interpolate.pm for
an example of a nesting tag.

    UserTag tagname CanNest

=head2 HasEndTag

Defines an ending [/tag] to encapsulate your text - the text in
between the beginning [tagname] and ending [/tagname] will be
the last argument sent to the defined subroutine.

    UserTag tagname HasEndTag

=head2 Implicit

This defines a tag as implicit, meaning it can just be an attribute
instead of an attribute=value pair. It must be a recognized
attribute in the tag definition, or there will be big problems. Use
this with caution!

    UserTag tagname Implicit attribute value

If you want to set a standard include file to a fixed value by
default, but don't want to have to specify [include
file="/long/path/to/file"] every time, you can just put:

    UserTag include Implicit file file=/long/path/to/file

and [include file] will be the equivalent. You can still specify
another value with [include file="/another/path/to/file"].

=head2 InsertHTML

This attribute makes HTML tag output be inserted into the containing
tag, in effect adding an attribute=value pair (or pairs).

    UserTag tagname InsertHTML   htmltag  mvtag|mvtag2|mvtagN

In Interchange's standard tags, among others, the <OPTION ...> tag has
the [selected ..] and [checked ...] tags included with them, so that
you can do:

   <INPUT TYPE=checkbox
        MV="checked mvshipmode upsg" NAME=mv_shipmode> UPS Ground shipping

to expand to this:

   <INPUT TYPE=checkbox CHECKED NAME=mv_shipmode> UPS Ground shipping

Providing, of course, that mv_shipmode B<is> equal to upsg. If
you want to turn off this behavior on a per-tag basis, add the
attribute mv.noinsert=1 to the tag on your page.

=head2 InsideHTML

To make a container tag be placed B<after> the containing HTML tag,
use the InsideHTML setting.

    UserTag tagname InsideHTML   htmltag  mvtag|mvtag2|mvtagN

In Interchange's standard tags, the only InsideHTML tag is the
<SELECT> tag when used with I<loop>, which causes this:

   <SELECT MV="loop upsg upsb upsr" NAME=mv_shipmode>
   <OPTION VALUE="[loop-code]"> [shipping-desc [loop-code]]
   </SELECT>

to expand to this:

   <SELECT NAME=mv_shipmode>
   [loop upsg upsb upsr]
   <OPTION VALUE="[loop-code]"> [shipping-desc [loop-code]]
   [/loop]
   </SELECT>

Without the InsideHTML setting, the [loop ...] would have been
B<outside> of the select - not what you want. If you want to turn off
this behavior on a per-tag basis, add the attribute mv.noinside=1 to
the tag on your page.

=head2 Interpolate

The behavior for this attribute depends on whether the tag is a
container (i.e. HasEndTag is defined). If it is not a container,
the Interpolate attribute causes the B<the resulting HTML> from the
UserTag to be re-parsed for more Interchange tags. If it is a
container, Interpolate causes the contents of the tag to be parsed
B<before> the tag routine is run.

    UserTag tagname Interpolate

=head2 InvalidateCache

If this is defined, the presence of the tag on a page will prevent
search cache, page cache, and static builds from operating on the
page.

    UserTag tagname InvalidateCache

It does not override [tag flag build][/tag], though.

=head2 Order

The optional arguments that can be sent to the tag. This defines not
only the order in which they will be passed to I<Routine>, but the
name of the tags. If encapsulated text is appropriate (I<HasEndTag> is
set), it will be the last argument.

    UserTag tagname Order param1 param2

=head2 PosRoutine

Identical to the Routine argument - a subroutine that will be called
when the new syntax is not used for the call, i.e. [usertag
argument] instead of [usertag ARG=argument]. If not defined,
I<Routine> is used, and Interchange will usually do the right thing.

=head2 ReplaceAttr

Works in concert with InsertHTML, defining a B<single> attribute which
will be replaced in the insertion operation..

  UserTag tagname ReplaceAttr  htmltag attr

An example is the standard HTML <A HREF=...> tag. If you want to use
the Interchange tag [area pagename] inside of it, then you would
normally want to replace the HREF attribute. So the equivalent to the
following is defined within Interchange:

  UserTag  area  ReplaceAttr  a  href

Causing this

    <A MV="area pagename" HREF="a_test_page.html">

to become

    <A HREF="http://yourserver/cgi/simple/pagename?X8sl2lly;;44">

when intepreted.

=head2 ReplaceHTML

For HTML-style tag use only. Causes the tag containing the Interchange
tag to be stripped and the result of the tag to be inserted, for
certain tags. For example:

  UserTag company_name Routine sub { my $l = shift; return "$l: XYZ Company" }
  UserTag company_name HasEndTag
  UserTag company_name ReplaceHTML  b    company_name

<BR> is the HTML tag, and "company_name" is the Interchange tag. At
that point, the usage:

    <B MV="company-name"> Company </B>  --->>  Company: XYZ Company

Tags not in the list will not be stripped:

    <I MV="company-name"> Company </I> --->>  <I>Company: XYZ Company</I>

=head2 Routine

An inline subroutine that will be used to process the arguments of the
tag. It must not be named, and will be allowed to access unsafe
elements only if the interchange.cfg parameter I<AllowGlobal> is
set for the catalog.

    UserTag tagname Routine  sub { "your perl code here!" }

The routine may use a "here" document for readability:

    UserTag tagname Routine <<EOF
    sub {
        my ($param1, $param2, $text) = @_;
        return "Parameter 1 is $param1, Parameter 2 is $param2";
    }
    EOF

The usual I<here documents> caveats apply.

Parameters defined with the I<Order> property will be sent to the
routine first, followed by any encapsulated text (I<HasEndTag> is
set).

Note that the UserTag facility, combined with AllowGlobal, allows the
user to define tags just as powerful as the standard Interchange tags.
This is not recommended for the novice, though - keep it simple. 8-)

=head1 Standard Usertags

The distribution includes a number of prebuilt usertags in the
interchange_root/usertag directory. Some of these are used by the
foundation catalog or its administrative interface.

=head2 I<bar_button>

=head2 I<delete_cart>

=head2 I<fedex_query>

=head2 I<loc>

=head2 I<reconfig_wait>

=head2 I<title_bar>

=head2 I<xml_generator>

=head2 I<button>

=head2 I<email>

=head2 I<formel>

=head2 I<rand>

=head2 I<save_cart>

=head2 I<ups_query>

=head2 I<convert_date>

=head2 I<email_raw>

=head2 I<get_url>

=head2 I<reconfig>

=head2 I<summary>

=head2 I<usertrack>

=head2 I<db_date>

=head2 I<fcounter>

=head2 I<load_cart>

=head2 I<reconfig_time>

=head2 I<table_organize>

=head2 I<var>

Tag Entry Format

=head2 dummy

Alias: B<pedagogy>, B<dummy_alias>

B<Note: >[B<dummy> ...], [B<pedagogy> ...] and [B<dummy-alias> ...]
are equivalent.



A short description of the tag goes here. This example (B<dummy>) is
not an actual tag.

Summary

    [dummy first second other_named_attributes][/dummy]
    [dummy first=first_args second=second_args other_named_attributes][/dummy]

B<Positional parameters>

The first line shows the usage with positional parameters (given in
order). The second line shows usage with named parameters.



 Parameters   Description                               Default
 first        The first positional parameterSpecial arguments'special_value' - any special arguments to the parameter that cause the tag to behave differently are listed here and described in detail in the Description section below.'pig_latin' - For this dummy tag, let's suppose that an argument of 'pig_latin' rewrites the body text in pig latin.default value if the parameter is not given
 second       Another example parameter                 none
 alias1       alias for first - some parameters have aliases - [dummy alias1="X"] is equivalent to [dummy first="X"]Same default as first, of course

 Attributes                        Default
 more                              none
 still-more                        none (requires more)
 other                             none
 interpolate (body)                Yes
 reparse                           No

 Other_Charactreristics            
 Invalidates cache                 No
 Macro                             No
 Has end tag                       [/dummy]

B<Tag expansion example:>

   [dummy first=pig_latin second="Capitalize"]\
   Body text acted on by the tag goes here.[/dummy]
------------------------------------------------------
   OdyBay ExtTaY ActedAy OnAy YBay EThay AgTay OesGay \
   EreHay.

B<Reading the tag expansion example: >

=over 4

=item

B<format:> The tag is listed first. A blank line separates it from the
expanded return value.

B<long lines:> When this document must break a line from an example
because it is too wide for the page, a trailing backslash indicates
the continuation. Note that such a trailing backslash is *not* part of
the actual tag syntax or expansion.

=back



ASP-like Perl call

    $Tag->area(  { href => URI_base,
                   arg  => CGI_GET_arguments, }  );

or similarly,

    $Tag->area($href, $arg, $attribute_hash_reference);

Description

More detailed tag description

first

Section describing the first parameter

I<special_value>

Description of treatment of the special argument. For example, giving
the I<page> tag an B<href> of 'scan' causes it to link to a search
specification rather than a page.

I<more>

more is a named attribute that applies to this tag.

I<still-more>

still-more is a named attribute that applies to this tag only when
the more attribute has been given. It would be an error to use the
still-more attribute without specifying a value for more

I<other>

'other' is another named attribute that applies to this tag.

Template Parsing Order

Standard Parsing

Under normal circumstances, the template page containing tags and HTML
is parsed in the following order:

=over 4

=item 1.

Any content in MV_AUTOLOAD is prepended to the template page.

=over 8

=item

I<>

=back

I<>

=item 2.

Any [pragma] tags anywhere in the text are processed, and the
specified pragmas are set.

=over 8

=item *

Since [pragma] tags are preprocessed before any other content,
reparse will not catch them, nor will they work if included in
variables. Also, the specified pragma will apply to the entire
template (not just the section after the tag).

=item *

If you want to apply a pragma with a variable or only to part of a
document, you must use [tag pragma="..."] instead.

=back

I<>

=item 3.

Variables (macros) are processed in the following order:

=over 8

=item 4.

@@VARNAME@@ global variables

=item 5.

@_VARNAME_@ local or global variables

=item 6.

__VARNAME__ local variables

=back

I<>

=item 7.

Interchange comments are stripped.

=over 8

=item

I<>

=back

I<>

=item 8.

False-endtag macros are expanded (e.g., [/page] and [/order]).

=over 8

=item

I<>

=back

I<>

=item 9.

'<!--[tagname]-->' escapes are converted to [tagname]

=over 8

=item *

This can be a convenience for your HTML editor if it has trouble with
tags using the standard [tagname] syntax.

=item *

However, if you want to HTML-comment out an interchange tag in content
that will be fed raw to a browser, you must include whitespace, like
this, '<!-- [tagname] -->'.

=back

I<>

=item 10.

The main tag parser is called.

=over 8

=item *

Some tags parse recursively (depending on reparse and
interpolate settings, of course).

=item *

Some tags (e.g., [loop]) process I<prefix>-tags in their contained
body text. The I<prefix>-tags are not handled recursively.

=back

I<>

=item 11.

Image paths substitution on the HTML output occurs.

=over 8

=item

I<>

=back

I<>

=back

Nonstandard parsing within the admin interface

Parsing of content via the specialized regenerate usertag included
with the administrative interface does not obey the above order. The
MV_AUTOLOAD and '<!--[tagname]-->' escapes are skipped. There are some
other more subtle differences as well; in the very unlikely event that
you need to check this in the source code, compare the
'interpolate_html' and 'cache_html' routines in Interpolate.pm.

Nonstandard parsing of Subtags

Subtags are parsed within the containing array-list or hash-list
context created by the containing tag (see I<Looping tags and
Sub-tags>).

=over 4

=item *

All subtags at an earlier precedence level are treated before any in
the next level.

=item *

Within the same level, tags are proccessed in the order the appear on
the page.

=item *

Any standard tags are processed during 'interpolate' (before) or
'reparse' (after) phases of processing the containing tag.

=back

B<Technical note>

Processing within a hash- or array-list is actually done as a series
of global regular expression substitutions on the page. Each
substitution replaces one tag with the output of the subroutine(s)
associated with it.



In array-list context, subtags are processed in the following
S<order:>

=over 4

=item 1.

Check for I<prefix>_line and prepare for it if present (does not
process I<prefix>-line at this time)

=item 2.

I<prefix>-sub definitions processed

=item 3.

if-I<prefix>-I<etc.> nesting resolved

=item 4.

I<prefix>-alternate processed

=item 5.

if-I<prefix>-param  processed

=item 6.

if-I<prefix>-pos  processed

=item 7.

I<prefix>-pos  processed

=item 8.

if-I<prefix>-field  processed

=item 9.

I<prefix>-line  processed

=item 10.

I<prefix>-increment  processed

=item 11.

I<prefix>-accessories  processed

=item 12.

I<prefix>-options  processed

=item 13.

I<prefix>-code  processed

=item 14.

I<prefix>-description  processed

=item 15.

I<prefix>-field  processed

=item 16.

I<prefix>-price  processed

=item 17.

I<prefix>-change  processed

=item 18.

I<prefix>-calc  processed

=item 19.

I<prefix>-exec  processed

=item 20.

I<prefix>-filter  processed

=item 21.

I<prefix>-last  processed

=item 22.

I<prefix>-next  processed

=item 23.

User's previous HTML widget SELECTED settings restored

=item 24.

Reparse standard tags in output of above (if reparse enabled for the
containing tag)

=back

In hash-list context, subtags are processed in the following S<order:>

=over 4

=item 1.

I<prefix>-sub definitions processed

=item 2.

if-I<prefix>-I<etc.> nesting resolved

=item 3.

I<prefix>-alternate processed

=item 4.

I<prefix>-line  processed

=item 5.

if-I<prefix>-param  processed

=item 6.

if-I<prefix>-field  processed

=item 7.

if-I<prefix>-modifier  processed (if-I<prefix>-param and
if-I<prefix>-modifier are functionally identical except for parse
order)

=item 8.

I<prefix>-increment  processed

=item 9.

I<prefix>-accessories  processed

=item 10.

I<prefix>-options  processed

=item 11.

I<prefix>-sku  processed

=item 12.

I<prefix>-code  processed

=item 13.

I<prefix>-quantity  processed

=item 14.

I<prefix>-modifier  processed

=item 15.

I<prefix>-param  processed

=item 16.

I<prefix>-quantity-name  processed

=item 17.

I<prefix>-modifier-name  processed

=item 18.

I<prefix>-subtotal  processed

=item 19.

I<prefix>-discount-subtotal  processed

=item 20.

I<prefix>-code  processed again differently (operating on new
instances of I<prefix>-code in output of above?)

=item 21.

I<prefix>-field  processed

=item 22.

I<prefix>-description  processed

=item 23.

I<prefix>-price  processed

=item 24.

I<prefix>-discount-price  processed

=item 25.

I<prefix>-difference  processed

=item 26.

I<prefix>-discount  processed

=item 27.

I<prefix>-change  processed

=item 28.

I<prefix>-tag  processed (*** CHECK THIS TAG NAME ***)

=item 29.

I<prefix>-calc  processed

=item 30.

I<prefix>-exec  processed

=item 31.

I<prefix>-filter  processed

=item 32.

I<prefix>-last  processed

=item 33.

I<prefix>-next  processed

=item 34.

User's previous HTML widget SELECTED settings restored

=item 35.

Reparse standard tags in output of above (if reparse enabled for the
containing tag)

=back

Search and Form Variables

Variable Names

 Name                scan   Type   Description
 mv_all_chars        ac     S      Turns on punctuation matching
 mv_arg[0-9]+               A      Parameters for mv_subroutine (mv_arg0,mv_arg1,...)
 mv_base_directory   bd     S      Sets base directory for search file names
 mv_begin_string     bs     S      Pattern must match beginning of field
 mv_case             cs     S      Turns on case sensitivity
 mv_cartname                O      Sets the shopping cart name
 mv_cache_params            S      Determines caching of searches
 mv_change_frame            A      Any form, changes frame target of form output
 mv_check                   A      Any form, sets multiple user variables after update
 mv_checkout                O      Sets the checkout page
 mv_click                   A      Any form, sets multiple form variables before update
 mv_click                   XA     Default mv_click routine, click is mv_click_arg
 mv_click name              XA     Routine for a click name, sends click as arg
 mv_click_arg               XA     Argument name in scratch space
 mv_coordinate       co     S      Enables field/spec matching coordination
 mv_column_op        op     S      Operation for coordinated search
 mv_credit_card*            O      Discussed in order security (some are read-only)
 mv_delay_page       dp     S      Delay search until after inital page display
 mv_dict_end         de     S      Upper bound for binary search
 mv_dict_fold        df     S      Non-case sensitive binary search
 mv_dict_limit       di     S      Sets upper bound based on character position
 mv_dict_look        dl     S      Search specification for binary search
 mv_dict_order       do     S      Sets dictionary order mode
 mv_doit                    A      Sets default action
 mv_email                   O      Reply-to address for orders
 mv_exact_match      em     S      Sets word-matching mode
 mv_failpage         fp     O,S    Sets page to display on failed order check/search
 mv_field_file       ff     S      Sets file to find field names for Glimpse
 mv_field_names      fn     S      Sets field names for search, starting at 1
 mv_first_match      fm     S      Start displaying search at specified match
 mv_head_skip        hs     S      Sets skipping of header line(s) in index
 mv_index_delim      id     S      Delimiter for search fields (TAB default)
 mv_matchlimit       ml     S      Sets match page size
 mv_max_matches      mm     S      Sets maximum match return (only for Glimpse)
 mv_min_string       ms     S      Sets minimum search spec size
 mv_negate           ne     S      Records NOT matching will be found
 mv_nextpage         np     A      Sets next page user will go to
 mv_numeric          nu     S      Comparison numeric in coordinated search
 mv_order_group             O      Allows grouping of master item/sub item
 mv_order_item              O      Causes the order of an item
 mv_order_number            O      Order number of the last order (read-only)
 mv_order_quantity          O      Sets the quantity of an ordered item
 mv_order_profile           O      Selects the order check profile
 mv_order_receipt           O      Sets the receipt displayed
 mv_order_report            O      Sets the order report sent
 mv_order_subject           O      Sets the subject line of order email
 mv_orsearch         os     S      Selects AND/OR of search words
 mv_profile          mp     S      Selects search profile
 mv_range_alpha      rg     S      Sets alphanumeric range searching
 mv_range_look       rl     S      Sets the field to do a range check on
 mv_range_max        rx     S      Upper bound of range check
 mv_range_min        rm     S      Lower bound of range check
 mv_record_delim     dr     S      Search index record delimiter
 mv_return_all       ra     S      Return all lines found (subject to range search)
 mv_return_delim     rd     S      Return record delimiter
 mv_return_fields    rf     S      Fields to return on a search
 mv_return_file_name rn     S      Set return of file name for searches
 mv_return_spec      rs     S      Return the search string as the only result
 mv_save_session            C      Set to non-zero to prevent expiration of user session
 mv_search_field     sf     S      Sets the fields to be searched
 mv_search_file      fi     S      Sets the file(s) to be searched
 mv_search_line_returnlr    S      Each line is a return code (loop search)
 mv_search_match_count      S      Returns the number of matches found (read-only)
 mv_search_page      sp     S      Sets the page for search display
 mv_searchspec       se     S      Search specification
 mv_searchtype       st     S      Sets search type (text, glimpse, db or sql)
 mv_separate_items          O      Sets separate order lines (one per item ordered)
 mv_session_id       id     A      Suggests user session id (overridden by cookie)
 mv_shipmode                O      Sets shipping mode for custom shipping
 mv_sort_field       tf     S      Field(s) to sort on
 mv_sort_option      to     S      Options for sort
 mv_spelling_errors  er     S      Number of spelling errors for Glimpse
 mv_substring_match  su     S      Turns off word-matching mode
 mv_successpage             O      Page to display on successful order check
 mv_todo                    A      Common to all forms, sets form action
 mv_todo.map                A      Contains form imagemap
 mv_todo.checkout.x         O      Causes checkout action on click of image
 mv_todo.return.x           O      Causes return action on click of image
 mv_todo.submit.x           O      Causes submit action on click of image
 mv_todo.x                  A      Set by form imagemap
 mv_todo.y                  A      Set by form imagemap
 mv_unique           un     S      Return unique search results only
 mv_value            va     S      Sets value on one-click search (va=var=value)

Abbreviations

The two-letter abbreviations are mapped with these letters:

 Abbr                              Long name
 DL                                mv_raw_dict_look
 MM                                mv_more_matches
 SE                                mv_raw_searchspec
 ac                                mv_all_chars
 ar                                mv_arg
 bd                                mv_base_directory
 bs                                mv_begin_string
 ck                                mv_cache_key
 co                                mv_coordinate
 cs                                mv_case
 cv                                mv_verbatim_columns
 de                                mv_dict_end
 df                                mv_dict_fold
 di                                mv_dict_limit
 dl                                mv_dict_look
 do                                mv_dict_order
 dp                                mv_delay_page
 dr                                mv_record_delim
 em                                mv_exact_match
 er                                mv_spelling_errors
 fi                                mv_search_file
 fm                                mv_first_match
 fn                                mv_field_names
 hs                                mv_head_skip
 id                                mv_session_id
 il                                mv_index_delim
 ix                                mv_index_delim
 lb                                mv_search_label
 lo                                mv_list_only
 lr                                mv_line_return
 lr                                mv_search_line_return
 ml                                mv_matchlimit
 mm                                mv_max_matches
 mp                                mv_profile
 ms                                mv_min_string
 ne                                mv_negate
 np                                mv_nextpage
 nu                                mv_numeric
 op                                mv_column_op
 os                                mv_orsearch
 pc                                mv_pc
 ra                                mv_return_all
 rd                                mv_return_delim
 rf                                mv_return_fields
 rg                                mv_range_alpha
 rl                                mv_range_look
 rm                                mv_range_min
 rn                                mv_return_file_name
 rr                                mv_return_reference
 rs                                mv_return_spec
 rx                                mv_range_max
 se                                mv_searchspec
 sf                                mv_search_field
 si                                mv_search_immediate
 sp                                mv_search_page
 sq                                mv_sql_query
 st                                mv_searchtype
 su                                mv_substring_match
 tf                                mv_sort_field
 to                                mv_sort_option
 un                                mv_unique
 va                                mv_value

